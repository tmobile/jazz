#!groovy.
import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import java.text.SimpleDateFormat
import groovy.transform.Field

/**
    Service onboarding workflow
    - identify service type, runtime, target cloud provider
    - create appropriate template
    - add service_id to deployment-env.yml
    - create code repository
    - push template to the repository
*/

@Field def repo_credential_id
@Field def aws_credential_id
@Field def region
@Field def instance_prefix
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def events
@Field def awsAPIGatewayModule
@Field def serviceMetadataLoader
@Field def service_config
@Field def utilModule
@Field def aclModule

@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def auth_token = ''
@Field def g_base_url = ''
@Field def context_map = [:]

node  {
  try {
	def accountDetailsPrimary
	jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModules(jazzBuildModuleURL)
	def platformPrimaryAWSAccountInfo = utilModule.getAccountInfoPrimary();

	def service_id = params.service_id
	def repo_name
	def service_template

	echo "Input to the workflow: $params"

	stage('Input Validation'){
    if (service_id) {
      service_config = serviceMetadataLoader.loadServiceMetadata(service_id)
    } else {
        error "service_id missing in the input"
    }

    def platformAPIId = awsAPIGatewayModule.getApiGatewayCore(platformPrimaryAWSAccountInfo)
    g_base_url = "https://${platformAPIId}.execute-api.${configLoader.AWS.DEFAULTS.REGION}.amazonaws.com/prod"
    events.initialize(configLoader, service_config, "SERVICE_CREATION", "", "", g_base_url + "/jazz/events")

    context_map = [created_by : service_config['created_by']]
    events.sendStartedEvent("VALIDATE_INPUT", 'Input validation started', context_map)
    auth_token = getAuthToken()
    scmModule.setServiceConfig(service_config)

    def serviceType = service_config['type'].toLowerCase()
    def serviceRunTime = service_config['runtime'].toLowerCase()
    def provider = service_config['provider'].toLowerCase()
    repo_name = "${service_config['domain']}_${service_config['service']}"

    if (!(serviceType in ["api","function","website","sls-app"])) {
        events.sendFailureEvent('VALIDATE_INPUT', "Invalid service type", context_map)
        sendStatusEmailNotification("FAILED")
        error "Invalid service type: ${serviceType}"
    }

    if (!(provider in ["aws","azure"])) {
        events.sendFailureEvent('VALIDATE_INPUT', "Invalid deployment target provider", context_map)
        sendStatusEmailNotification("FAILED")
        error "Invalid deployment target provider: ${provider}"
    }
    // website uses runTime = n/a
    if (serviceRunTime == "n/a" || serviceRunTime.matches("(java|go|nodejs|python|c#).*")){
        if (serviceType == "website"){
            def framework = service_config['framework']
            if(framework in ['angular','react']) {
                service_template = "${framework}-website-template"
            } else {
                service_template = 'static-website-template'
            }
        } else if (serviceType == "api"){
			if (serviceRunTime.startsWith("nodejs")) {
				if(provider == "aws"){
					service_template = "${serviceType}-template-nodejs"
				} else {
					service_template = "azure-${serviceType}-template-nodejs"
				}
			} else if (serviceRunTime.startsWith("python")) {
				service_template = "${serviceType}-template-python"
			} else if (serviceRunTime.startsWith("java")) {
				service_template = "${serviceType}-template-java"
			} else if (serviceRunTime.startsWith("go")) {
				service_template = "${serviceType}-template-go"
			} else if (serviceRunTime.startsWith("c#")) {
				service_template = "azure-${serviceType}-template-csharp"
			}
		} else if (serviceType == "function"){
			if (serviceRunTime.startsWith("nodejs")) {
				if(provider == "aws"){
					service_template = "lambda-template-nodejs"
				} else {
					service_template = "azure-${serviceType}-template-nodejs"
				}
			} else if (serviceRunTime.startsWith("python")) {
				service_template = "lambda-template-python"
			} else if (serviceRunTime.startsWith("java")) {
				service_template = "lambda-template-java"
			} else if (serviceRunTime.startsWith("go")) {
				service_template = "lambda-template-go"
			} else if (serviceRunTime.startsWith("c#")) {
				service_template = "azure-${serviceType}-template-csharp"
			}
		} else if (serviceType == "sls-app"){
			if (serviceRunTime.startsWith("nodejs")) {
				service_template = "${serviceType}-template-nodejs"
			} else if (serviceRunTime.startsWith("python")) {
				service_template = "${serviceType}-template-python"
			} else if (serviceRunTime.startsWith("java")) {
				service_template = "${serviceType}-template-java"
			}  else if (serviceRunTime.startsWith("go")) {
				service_template = "${serviceType}-template-go"
			}
		}
    } else {
        events.sendFailureEvent('VALIDATE_INPUT', "Invalid runtime: ${service_config['runtime']}", context_map)
        sendStatusEmailNotification("FAILED")
        error "Invalid runtime: ${service_config['runtime']}"
    }
		events.sendCompletedEvent('VALIDATE_INPUT', 'Input validation successful', context_map)
	}

	stage('Get Service Template'){
		try {
			try {
				sh 'rm -rf *'
			}
			catch (error) {
				//do nothing
			}

			echo "service_template : $service_template"
			events.sendStartedEvent("CLONE_TEMPLATE", 'cloning template starts', context_map)
			sh 'mkdir ' + service_template
      
			dir(service_template){
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getTemplateUrl(service_template)]]])
				def config = LoadConfiguration()
                def serviceMetadataJson = [:]
                if(service_config['provider'] == 'aws'){
					def roleARN
                    if (service_config['domain'] == "jazz") {
                        // allocate platform roles for platform APIs
						roleARN = platformPrimaryAWSAccountInfo.IAM.PLATFORMSERVICES_ROLEID
					} else {
                        accountDetails = utilModule.getAccountInfo(service_config);
						roleARN = accountDetails.IAM.USERSERVICES_ROLEID
                    }
                    serviceMetadataJson["iamRoleARN"] = roleARN
				}
				
				for (item in config) {
					serviceMetadataJson[item.key] = item.value
				}
				for (item in service_config.catalog_metadata) {
					serviceMetadataJson[item.key] = item.value
				}

				def repo_url = scmModule.getRepoUrl(repo_name)
				context_map['repository'] = repo_url
				context_map['metadata'] = serviceMetadataJson
			}
			events.sendCompletedEvent('CLONE_TEMPLATE', 'cloning template completed', context_map)
		}
		catch (ex) {
			events.sendFailureEvent('CLONE_TEMPLATE', "Error while cloning service template: " + ex.getMessage(), context_map)
			sendStatusEmailNotification("FAILED")
      error ex.getMessage()
		}
	}

	stage('Update Service Template'){
		try {
			dir(service_template){
				events.sendStartedEvent("MODIFY_TEMPLATE", 'modify template starts', context_map)
				sh "echo -n > ./deployment-env.yml"
				sh "echo 'service_id: $service_id' >> ./deployment-env.yml"

				// Replacing template specific keys in the code
				if (service_config['type'] == "sls-app" && service_config['runtime'].startsWith("go")) {
					echo "Updating go template in the serveless app"
					def dirPath = pwd()
					dirs = readDir()
					def size = dirs.size()
					if (size > 0) {
						for (item in dirs) {
							def functionpath = "./${item}"
							sh "sed -i -- 's/sls-api-template-go/${repo_name}/g' ${functionpath}/main.go"
						}
					} else {
						echo "No functions found.. Skipping code updates to the template!"
					}
				}
			}
		}
		catch (ex) {
			events.sendFailureEvent('MODIFY_TEMPLATE', 'Failed to update template: ' + ex.getMessage(), context_map)
			sendStatusEmailNotification("FAILED")
			error ex.getMessage()
		}
	}

	stage('Uploading templates to code repository'){
		dir(service_template){
            events.sendStartedEvent("CREATE_SERVICE_REPO", 'service repo creation starts', context_map)
			try {
				scmModule.createProject(service_config['created_by'], repo_name)
				events.sendCompletedEvent('CREATE_SERVICE_REPO', 'modify template completed', context_map)
			}
			catch (ex) {
				events.sendFailureEvent('CREATE_SERVICE_REPO', "Service repository creation failed, error: " + ex.getMessage(), context_map)
				sendStatusEmailNotification("FAILED")
                error ex.getMessage()
			}
		}
		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: repo_credential_id, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
			def encoded_password = URLEncoder.encode(PWD, "utf-8")

			def repo_clone_base_url = scmModule.getRepoCloneBaseUrl(repo_name)
			def repo_protocol = scmModule.getRepoProtocol()

			sh "git config --global user.email \"" + configLoader.JAZZ.STACK_ADMIN + "\""
			sh "git config --global user.name $UNAME"
			sh "git clone ${repo_protocol}$UNAME:$encoded_password@${repo_clone_base_url}"
		}
		try {
			sh "mv -nf " + service_template + "/* " + repo_name + "/"
			sh "mv -nf " + service_template + "/.* " + repo_name + "/"
		}
		catch (ex) {
			echo "Error while moving code to the destination folder"
		}
		dir(repo_name){
            sh "ls -lart"
            try {
                events.sendStartedEvent('ADD_WEBHOOK', 'Adding webhook', context_map)
                scmModule.addWebhook(repo_name, "notify-events", "${g_base_url}/jazz/scm-webhook")
                events.sendCompletedEvent('ADD_WEBHOOK', 'Webhook added successfully', context_map)
            } catch (ex) {
                events.sendFailureEvent('ADD_WEBHOOK', 'Failed while adding webhook: ' + ex.getMessage(), context_map)
                sendStatusEmailNotification("FAILED")
                error ex.getMessage()
            }
            
            try {
                events.sendStartedEvent("PUSH_TEMPLATE_TO_SERVICE_REPO", 'push template to repo started', context_map)
                sh "git add --all"
                sh "git commit -m 'Code from the standard template'"
                sh "git remote -v"
                sh "git push -u origin master"
                events.sendCompletedEvent('PUSH_TEMPLATE_TO_SERVICE_REPO', 'push template completed', context_map)
            } catch (ex) {
                events.sendFailureEvent('PUSH_TEMPLATE_TO_SERVICE_REPO', 'Failed while pushing code to repository, error: ' + ex.getMessage(), context_map)
                sendStatusEmailNotification("FAILED")
                error ex.getMessage()
            }

            try {
                events.sendStartedEvent("ADD_POLICIES_AND_REPO_PERMISSIONS", 'Started adding acl policies for the service', context_map)
                aclModule.updateServiceACL(service_id, auth_token, "${g_base_url}/jazz/acl/policies", service_config['created_by'])
                events.sendCompletedEvent('ADD_POLICIES_AND_REPO_PERMISSIONS', 'Completed adding acl policies for the service', context_map)
            } catch (ex) {
                events.sendFailureEvent('ADD_POLICIES_AND_REPO_PERMISSIONS', 'Failed while adding acl policies, error: '+ ex.getMessage(), context_map)
                sendStatusEmailNotification("FAILED")
                error ex.getMessage()
            }

            try {
                events.sendStartedEvent("LOCK_MASTER_BRANCH", 'set branch permission to repo started', context_map)
                scmModule.setBranchPermissions(repo_name)
                events.sendCompletedEvent('LOCK_MASTER_BRANCH', 'creation completed', context_map)
            } catch (ex) {
                events.sendFailureEvent('LOCK_MASTER_BRANCH', ex.getMessage(), context_map)
                sendStatusEmailNotification("FAILED")
                error ex.getMessage()
            }
        }
        // Workflow is now complete! Send notification!
        sendStatusEmailNotification("COMPLETED")
	}
	} catch (err) {
   throw err
  } finally {
   deleteDir()
  }
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
def getAuthToken() {
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		def loginUrl = g_base_url + "/jazz/login"
		def payload = JsonOutput.toJson([
			'username': UNAME,
			'password': PWD
		])
		try {
			def token = sh(script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" $loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()
			def tokenJson = jsonParseClassic(token)
			return tokenJson.data.token
		}
		catch (e) {
			error "Failed while getting auth token for user: $UNAME, error: " + e.getMessage()
		}
	}
}

/**
 * Prepare service configurations
 */
def LoadConfiguration() {
	def result = readFile('deployment-env.yml').trim()
	echo "Configurations from code => $result"
	def prop = [:]
	def resultList = result.tokenize("\n")

    // delete commented lines
    def cleanedList = []
    for (i in resultList) {
        if (!i.toLowerCase().startsWith("#")){
            cleanedList.add(i)
        }
    }
    for (item in cleanedList) {
        // Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
        // handle empty values
        def value = null;
        if (eachItemList[1]) {
            value = eachItemList[1].trim();
        }
        if (eachItemList[0]) {
            prop.put(eachItemList[0].trim(), value)
        }
    }
	echo "Final service configurations => $prop"
	return prop
}

/**
* Send email to the user with the build status and any additional build context
* Supported build status values: STARTED, FAILED & COMPLETED
*/
def sendStatusEmailNotification (status) {
   	echo "Sending build notification to ${service_config['created_by']}"
    def body_subject = ''
    def body_text = ''
    def cc_email = ''
    def body_html = ''

    if (status == 'STARTED') {
        echo "Send Build Started notification"
        body_subject = "Jazz Build Notification: Creation STARTED for service:  ${service_config['service']} "
    } else if (status == 'FAILED') {
        echo "Send Build Failed notification"
        def build_url = env.BUILD_URL + 'console'
        body_subject = "Jazz Build Notification: Creation FAILED for service:  ${service_config['service']} "
        body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
    } else if (status == 'COMPLETED') {
        echo "Send Build Completed notification"
        body_subject = "Jazz Build Notification: Creation COMPLETED successfully for service:  ${service_config['service']} "
    } else {
        echo "Unsupported build status, nothing to email.."
        return
    }
    
    body_text = "${body_text} \n\n For Service: ${service_config['service']}  in Domain:  ${service_config['domain']}"
	
    body = JsonOutput.toJson([
      from : 'Jazz Admin <' + configLoader.JAZZ.STACK_ADMIN + '>',
      to : service_config['created_by'],
      subject : body_subject,
      text : body_text,
      cc : cc_email,
      html : body_html
    ])

   	try {
      def sendMail = sh(script: "curl -X POST \
              ${g_base_url}/jazz/email \
              -k -v -H \"Authorization: $auth_token\" \
              -H \"Content-Type: application/json\" \
              -d \'${body}\'", returnStdout: true).trim()
      def responseJSON = jsonParse(sendMail)

      if (responseJSON.data) {
        echo "Successfully sent email to ${service_config['created_by']}"
      } else {
        echo "Exception occured while sending email: $responseJSON"
      }
   	} catch (e) {
       	echo "Failed while sending build status notification"
   	}
}


/*
* Loading build modules
*/
def loadBuildModules(buildModuleUrl){
	echo "Loading build modules.."
	dir('build_modules') {
		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		configModule = load "config-loader.groovy"
		configLoader = configModule.loadConfigData(aws_credential_id, region, instance_prefix)
		echo "config loader loaded successfully."

		awsAPIGatewayModule = load "aws-apigateway-module.groovy"
        awsAPIGatewayModule.initialize()
        echo "apigateway module loaded successfully."

		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)
		echo "SCM module loaded successfully."

		serviceMetadataLoader = load "service-metadata-loader.groovy"
		serviceMetadataLoader.initialize(configLoader)
		echo "service metadata loader module loaded successfully."

		events = load "events-module.groovy"
		echo "event module loaded successfully."

        utilModule = load "utility-loader.groovy"
        echo "util module loaded successfully."

		aclModule = load "acl-module.groovy"
		echo "acl module loaded successfully."
	}
        echo "Loaded all the required build modules for the workflow"
}

/*
* Get build module url
*/
def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
		// right now only bitbucket has this additional tag scm in its git clone path
		return "http://${repo_base}/${repo_core}/jazz-build-module.git"
    } else {
		return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    }
}

@NonCPS
def jsonParseClassic(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}

@NonCPS
def jsonParse(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

def readDir() {
  sh "ls -al"
  def targetPaths
  try {
    targetPaths = sh(returnStdout: true, script: 'ls -d functions/*').split("\n")
    echo "completed : $targetPaths"
  } catch (ex) {
      echo "Error Occured while Fetching functions... $ex"
  }
  return targetPaths
}
