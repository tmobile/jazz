#!groovy
import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core

@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def serviceConfigdata
@Field def events
@Field def serviceMetadataLoader
@Field def utilModule
@Field def environmentDeploymentMetadata
@Field def sonarModule

@Field def auth_token = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def g_base_url = ''
@Field def environment_logical_id = ''
@Field def g_base_url_for_swagger = ''
@Field def current_environment

node() {
	def jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModules(jazzBuildModuleURL)

	def jazz_prod_api_id = utilModule.getAPIIdForCore(configLoader.AWS.API["PROD"])
	g_base_url = "https://${jazz_prod_api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	g_base_url_for_swagger = "http://${configLoader.AWS.S3.API_DOC}.s3-website-${configLoader.AWS.REGION}.amazonaws.com/"

	echo "Build triggered via branch: " + params.scm_branch

	def branch = params.scm_branch
	def repo_name = params.service_name
	def gitCommitOwner
	def gitCommitHash
	def context_map

	if (domain && domain != "") {
		repo_name = params.domain + "_" + params.service_name
	}

	def config
	def domain = params.domain

	stage('Checkout code base') {
		sh 'rm -rf ' + repo_name
		sh 'mkdir ' + repo_name

		def repocloneUrl
		if (domain && domain == "jazz") {
			repocloneUrl = scmModule.getCoreRepoCloneUrl(repo_name)
		} else {
			auth_token = setCredentials()
			repocloneUrl = scmModule.getRepoCloneUrl(repo_name)
		}

		dir(repo_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: repocloneUrl]]])
		}

		// @TODO: dir can be removed, needs to be refactored
		def configObj = dir(repo_name)
		{
			return LoadConfiguration()
		}

		if (configObj.service_id) {
			config = serviceMetadataLoader.loadServiceMetadata(configObj.service_id)
		} else {
			error "Service Id is not available."
		}
	}

	if (!config) {
		error "Failed to fetch service metadata from catalog"
	}

	dir(repo_name)
	{
		scmModule.setServiceConfig(config)
		def envApi = "${g_base_url}/jazz/environments"
		environmentDeploymentMetadata.initialize(config, configLoader, scmModule, branch, env.BUILD_URL, env.BUILD_ID, envApi, auth_token)
		gitCommitHash = scmModule.getRepoCommitHash()
		gitCommitOwner = scmModule.getRepoCommitterInfo(gitCommitHash)
		context_map = [created_by : config['created_by'], deployed_by: gitCommitOwner]


		if (branch == 'master') {
			environment_logical_id = 'prod'
			current_environment = 'prod'
		} else {
			environment_logical_id = environmentDeploymentMetadata.getEnvironmentLogicalId();
			current_environment = 'dev'
		}

		if (!environment_logical_id && config['domain'] != 'jazz') {
			error "The environment has not been created yet and its missing the environment id"
		}

		if (!events) { error "Can't load events module" } //Fail here
		def eventsApi = "${g_base_url}/jazz/events"
		events.initialize(configLoader, config, "SERVICE_DEPLOYMENT", branch, environment_logical_id, eventsApi)

		domain = config['domain']
		def runtime = config['providerRuntime']
		def service = config['service']

		def stackName = "${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}-${environment_logical_id}"

		def internalAccess = config['require_internal_access']
		def roleARN = configLoader.AWS.ROLEID.replaceAll("/", "\\\\/")

		// @TODO: the below statement will be replaced with regular expression in very near future;
		def roleId = roleARN.substring(roleARN.indexOf("::") + 2, roleARN.lastIndexOf(":"))

		sonarModule.initialize(configLoader, config, branch)

		loadServerlessConfig(config)

		if (domain && domain == "jazz") {
			stage('Update Service Template'){
				echo "Inside Update service template"
				try {
					updatePlatformServiceTemplate(config, roleARN, roleId, current_environment, repo_name)
				}
				catch (error) {
					error "Error occured while updating service template."
				}
			}
		}

		def requestId = utilModule.generateRequestId()
		if (requestId != null) {
			events.setRequestId(requestId)
			environmentDeploymentMetadata.setRequestId(requestId)
		} else {
			error "Request Id Generation failed"
		}
		events.sendStartedEvent('CREATE_DEPLOYMENT', 'Service deployment workflow started', environmentDeploymentMetadata.generateDeploymentMap("started", environment_logical_id, gitCommitHash), environment_logical_id)

		stage('Pre-Build Validation') {
			try {
				events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation started', context_map, environment_logical_id)
				send_status_email(config, 'STARTED', "")
				validateDeploymentConfigurations(config)
				validateSwaggerSpec();
			} catch (ex) {
				events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage(), context_map, environment_logical_id)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
				error ex.getMessage()
			}
			events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation completed', context_map, environment_logical_id)
		}

		if (config['domain'] && config['domain'] != 'jazz' && configLoader.CODE_QUALITY.SONAR.ENABLE_SONAR == "true" ) {
			stage('Code Quality Check'){
				events.sendStartedEvent('CODE_QUALITY_CHECK', 'code quality check starts', context_map, environment_logical_id)
				try {
					clearVirtualEnv()
					runValidation(runtime)
					sonarModule.doAnalysis()

				} catch (ex) {
					events.sendFailureEvent('CODE_QUALITY_CHECK', ex.getMessage(), context_map, environment_logical_id)
					events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
					error ex.getMessage()
				}
				events.sendCompletedEvent('CODE_QUALITY_CHECK', 'code quality check completed', context_map, environment_logical_id)
			}
		}
		stage('Build') {
			try {
				events.sendStartedEvent('BUILD', 'build starts', context_map, environment_logical_id)
				buildLambda(runtime)
			} catch (ex) {
				events.sendFailureEvent('BUILD', ex.getMessage(), context_map, environment_logical_id)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
				error ex.getMessage()
			}
			events.sendCompletedEvent('BUILD', 'build completed', context_map, environment_logical_id)
		}

		def env_key
		if (branch == "master") {
			env_key = "PROD"
		} else {
			env_key = "DEV"
		}
		stage("Deployment to ${env_key} environment") {
			def env_info = environmentDeploymentMetadata.getEnvironmentInfo()

			def env_metadata = [:]

			if (env_info && env_info["metadata"]) {
				env_metadata = env_info["metadata"]
			}

			events.sendStartedEvent('DEPLOY_TO_AWS', "Deployment started to ${env_key} AWS environment", context_map, environment_logical_id)
			events.sendStartedEvent('UPDATE_ENVIRONMENT', "Environment status update event for ${env_key} deployment", environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment_logical_id, null), environment_logical_id)

			def endpointUrl = null
			def aws_api_id = null

			if (env_metadata["AWS_API_ID"] != null) {
				aws_api_id = env_metadata["AWS_API_ID"]
			}

			try {

				// resetting env endpoint url
				environmentDeploymentMetadata.setEnvironmentEndpoint(endpointUrl)
				events.sendStartedEvent('UPDATE_ENVIRONMENT', "Environment status update event for ${env_key} deployment", environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment_logical_id, null), environment_logical_id)
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					echo "AWS Configure ......."
					sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
					sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
					sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

					// Generate serverless yml file with domain added in function name
					echo "Generate deployment env with domain for ${env_key}"

					writeServerlessFile(config, environment_logical_id)

					setLambdaExecutionRole(configLoader.AWS.ROLEID);

					echo "serverless deploy......."
					def envBucketKey = "${env_key}${configLoader.JAZZ.S3_BUCKET_NAME_SUFFIX}"
					sh "serverless deploy --stage ${environment_logical_id} -v --bucket ${configLoader.AWS.S3[envBucketKey]}"

					def lambdaARN = getLambdaARN(stackName);
					events.sendCompletedEvent('CREATE_ASSET', null, utilModule.generateAssetMap("aws", lambdaARN, "lambda", config), environment_logical_id);

					if (fileExists('swagger/swagger.json')) {
						echo "Generating swagger file for environment: ${env_key}"

						if (aws_api_id == null) {
							aws_api_id = utilModule.getAPIId(configLoader.AWS.API[env_key], config)
						}

						def apiHostName = "${aws_api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com"
						echo "API Host Name: $apiHostName"
						generateSwaggerEnv(environment_logical_id, "${configLoader.INSTANCE_PREFIX}-${current_environment}", apiHostName, config)
						if (env_key.equals("DEV") && config['domain'] != 'jazz') {
							updateStageForDev(environment_logical_id)
						}

						sh "cat swagger/swagger.json "

						echo "Deploying to API Gateway environment.."
						sh "aws apigateway put-rest-api --rest-api-id ${aws_api_id} --mode merge --parameters basepath=prepend --body 'file://swagger/swagger.json'" + " --profile cloud-api"
						sh "aws apigateway create-deployment --rest-api-id ${aws_api_id} --stage-name ${current_environment} --profile cloud-api"
						sh "aws apigateway tag-resource --resource-arn arn:aws:apigateway:${configLoader.AWS.REGION}::/restapis/${aws_api_id}/stages/${current_environment} --tags Application=Jazz,JazzInstance=${configLoader.INSTANCE_PREFIX}  --profile cloud-api"

						if("${configLoader.JAZZ.API_DETAILED_MONITORING}" == "true") {
							sh "aws apigateway update-stage --rest-api-id ${aws_api_id} --stage-name ${current_environment} --patch-operations op=replace,path=/*/*/metrics/enabled,value=true --region ${configLoader.AWS.REGION}"
						} else {
							sh "aws apigateway update-stage --rest-api-id ${aws_api_id} --stage-name ${current_environment} --patch-operations op=replace,path=/*/*/metrics/enabled,value=false --region ${configLoader.AWS.REGION}"
						}

						if (current_environment == 'prod' || config['domain'] == 'jazz') {
							endpointUrl = "https://${apiHostName}/${current_environment}/${config['domain']}/${config['service']}"
						} else {
							endpointUrl = "https://${apiHostName}/${current_environment}/${environment_logical_id}/${config['domain']}/${config['service']}"
						}

						def apiArns = getAPIGatewayResourceARNs(aws_api_id, environment_logical_id)
						if(apiArns) {
							for (arn in apiArns) {
								events.sendCompletedEvent('CREATE_ASSET', null, utilModule.generateAssetMap("aws", arn, "apigateway", config), environment_logical_id);
							}
						}

						if (domain != "jazz") {
							createSubscriptionFilters(stackName, configLoader.AWS.REGION, roleId);
						}

						updateApiDocUrl(current_environment)
						sh "aws s3 cp swagger/ s3://${configLoader.AWS.S3.API_DOC}/${domain}/${config['service']}/${environment_logical_id} --recursive "
						echo "completed deployment........."

						def swaggerDocUrl = "${g_base_url_for_swagger}${domain}/${service}/${environment_logical_id}/swagger.json"
						events.sendCompletedEvent('CREATE_ASSET', null, utilModule.generateAssetMap("aws", swaggerDocUrl, "swagger_url", config), environment_logical_id);

						def svc_status = "Your service endpoint for ${current_environment} environment: ${endpointUrl} \n\nView and test your API here: ${configLoader.JAZZ.SWAGGER.EDITOR_URL}${swaggerDocUrl}"
						send_status_email(config, 'COMPLETED', svc_status)

					}

					if (domain && domain == "jazz") {
						serviceConfigdata.setLogStreamPermission(config)
					}
				}
			} catch (ex) {
				events.sendFailureEvent('UPDATE_ENVIRONMENT', ex.getMessage(), environmentDeploymentMetadata.generateEnvironmentMap("deployment_failed", environment_logical_id, null), environment_logical_id)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
				events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map, environment_logical_id)
				error ex.getMessage()
			}
			environmentDeploymentMetadata.setEnvironmentEndpoint(endpointUrl)
			def serviceContext = [created_by : config['created_by'], deployed_by: gitCommitOwner]

			env_metadata["AWS_API_ID"] = aws_api_id

			events.sendCompletedEvent('CREATE_ASSET', null, utilModule.generateAssetMap("aws", endpointUrl, "endpoint_url", config), environment_logical_id);
			events.sendCompletedEvent('UPDATE_ENVIRONMENT', 'Environment update event for deployment completion', environmentDeploymentMetadata.generateEnvironmentMap("deployment_completed", environment_logical_id, env_metadata), environment_logical_id)
			events.sendCompletedEvent('UPDATE_DEPLOYMENT', "Deployment completion event for ${env_key} deployment", environmentDeploymentMetadata.generateDeploymentMap("successful", environment_logical_id, gitCommitHash), environment_logical_id)
			events.sendCompletedEvent('DEPLOY_TO_AWS', 'Successfully deployed services to AWS', serviceContext, environment_logical_id)
		}//stage of deployment to an environment ends here

	}//dir ends here
}

def getLambdaARN(String stackName) {
	def ARN = "";

	try {
		def cloudformation_resources = "";
		cloudformation_resources = sh(returnStdout: true, script: "aws cloudformation describe-stacks --output json --stack-name ${stackName} --profile cloud-api")

		def parsedObject = parseJson(cloudformation_resources);
		def outputs = parsedObject.Stacks[0].Outputs;

		for (output in outputs) {
			if (output.OutputKey == "HandlerLambdaFunctionQualifiedArn") {
				ARN = output.OutputValue
			}
		}
	} catch (ex) {
		error ex.getMessage();
	}

	return ARN;
}

/**
 * Get API Resource Arns
 *
 */
def getAPIGatewayResourceARNs(apiId, deployStg){
	def basePath = getBasePath()
	echo "basePath : $basePath"
	basePath = basePath.replaceAll("^api/", "/");
	if(!basePath.startsWith("/")) {
		basePath = "/"+basePath
	}
	def resourceArns = []
	def resourcesMap = createPathMethodList() //Returns a list maps of path and methods
	if(resourcesMap) {
		for (_map in resourcesMap){
			for (path in _map) {
				def arn = createApiGatewayResourceArn(apiId, deployStg, path.value, path.key, basePath)
				resourceArns.add(arn)
			}
		}
	}
	echo "resourceArns : $resourceArns"
	return resourceArns;
}

def getBasePath() {

    def propValue = "/"

    if (fileExists('swagger/swagger.json')) {
        def swaggerFile = readFile('swagger/swagger.json').trim()
        def slurper = new groovy.json.JsonSlurper()
        def result = slurper.parseText(swaggerFile)

        propValue = result.basePath
    }
    def propVal = propValue.replace( /{domain}/, '' ).trim()
    if (propVal.startsWith('/')) {
        propVal = propVal.substring(1)
    }
    echo "getBasePath : $propValue -> $propVal"
    return propVal
}

//Creates a list consisting of all path-method combination from the swagger which is serializable.
def createPathMethodList() { //Creates a list consisting of all path-method combination from the swagger
    def swaggerFile = readFile('swagger/swagger.json').trim()
    def lazyMap = new groovy.json.JsonSlurper().parseText(swaggerFile)
    def jsonMap = [:]
    jsonMap.putAll(lazyMap.paths)
    def composedList = []

    for (path in jsonMap){
        def pathKey = path.key
        def pathVal = [:]
        pathVal.putAll(path.value)

        //loop through all methods in path
        for (method in pathVal){
            def methodVal = method.key.toUpperCase()
            def pathMap = [:]
            pathMap[pathKey] = methodVal
            composedList.add(pathMap)
        }
    }
	echo "composedList :  $composedList"
    return composedList;
}

/**
 * create apigateway arns pattern
 */
def createApiGatewayResourceArn(apiId, deployStg, method, path, basePath) {
	def apiResourceArn = ""
	def _region = configLoader.AWS.REGION
	def _account = configLoader.AWS.ACCOUNTID
	def _apiId = apiId
	def _stgName = deployStg
	def _method = method
	def _path = path
	def _basePath = basePath
	apiResourceArn = "arn:aws:execute-api:"+_region+":"+_account+":"+_apiId+"/"+_stgName+"/"+_method+_basePath+_path
	echo "apiResourceArn : $apiResourceArn"
	return apiResourceArn;
}
/**
	Update context stage to use the dev properties file.
*/
def updateStageForDev(environment) {
	sh "sed -i -- 's#basePath\": \"/#basePath\": \"/$environment/#g' swagger/swagger.json"
}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}

def LoadConfiguration() {
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def prop = [:]
	def resultList = result.tokenize("\n")

	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if (i.toLowerCase().startsWith("#")) { } else {
			cleanedList.add(i)
		}
	}
	// echo "result of yaml parsing after clean up....$cleanedList"
	for (item in cleanedList) {
		// Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
		//handle empty values
		def value = null;
		if (eachItemList[1]) {
			value = eachItemList[1].trim();
		}

		if (eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}

	}
	echo "Loaded configurations....$prop"
	return prop
}


/**
	Build project based on runtime
*/
def buildLambda(runtime) {
	echo "installing dependencies for $runtime"
	if (runtime.indexOf("nodejs") > -1) {
		sh "npm install --save"
	} else if (runtime.indexOf("java") > -1) {
		sh "mvn package"
	} else if (runtime.indexOf("python") > -1) {
		// install requirements.txt in library folder, these python modules
		// will be a part of deployment package
		sh "pip install -r requirements.txt -t library"

		// create virtual environment and install dev-requirements
		sh """
		pip install virtualenv
		virtualenv venv
		. venv/bin/activate
		pip install pytest
		"""
	}
}


/**
	Generate the swagger file specific to each environment
*/
def generateSwaggerEnv(env, deploymentNode, apiHostName, config) {
	sh "sed -i -- 's/{lambda_function_name}/${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}-${env}/g' swagger/swagger.json"
	sh "sed -i -- 's/{api_deployment_node_title}/${deploymentNode}/g' swagger/swagger.json" // {api_deployment_node_title}
	sh "sed -i -- 's/{service_name}/${config['service']}/g' swagger/swagger.json" // {service_name}
	sh "sed -i -- 's/{api_host_name}/${apiHostName}/g' swagger/swagger.json" // {api_host_name}
	sh "sed -i -- 's/{domain}/${config['domain']}/g' swagger/swagger.json" // {domain}
	sh "sed -i -- 's/{envPrefix}/${configLoader.INSTANCE_PREFIX}/g' swagger/swagger.json" // {domain}
	sh "sed -i -- 's/{envmnt}/${current_environment}/g' swagger/swagger.json" // {environment}
	def roleARN = configLoader.AWS.ROLEID.replaceAll("/", "\\\\/")

	// TODO: the below couple of statements will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::") + 2, roleARN.lastIndexOf(":"))

	sh "sed -i -- 's/{conf-role}/${roleARN}/g' ./swagger/swagger.json"
	sh "sed -i -- 's/{conf-region}/${configLoader.AWS.REGION}/g' ./swagger/swagger.json"
	sh "sed -i -- 's/{conf-accId}/${roleId}/g' ./swagger/swagger.json"
}

def writeServerlessFile(config, environment_logical_id){
	sh "sed -i -- 's/\${file(deployment-env.yml):service}/${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}/g' serverless.yml"
	sh "sed -i -- 's/{inst_stack_prefix}/${configLoader.INSTANCE_PREFIX}/g' serverless.yml"
  sh "sed -i -- 's/{env-stage}/${environment_logical_id}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/${config['region']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/${config['domain']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/${config['created_by']}/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|${config['iamRoleARN']}|g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/${config['providerRuntime']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/${config['providerMemorySize']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/${config['providerTimeout']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/${config['securityGroupIds']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/${config['subnetIds'] }/g' serverless.yml"
  sh "sed -i -- '/#Start:resources/,/#End:resources/d' ./serverless.yml"
  sh "sed -i -- '/#Start:isScheduleEnabled/,/#End:isScheduleEnabled/d' ./serverless.yml"

	if (config['artifact']) {
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/${config['artifact']}/g' serverless.yml"
	}
	if (config['mainClass']) {
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/${config['mainClass']}/g' serverless.yml"
	}
}

/**
	Set the Lambda execution role. If user provided a custom role override the default.
*/
def setLambdaExecutionRole(role) {
	sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#${role}#g' serverless.yml"
}

/**
	Reset credentials
*/
def resetCredentials() {
	echo "resetting AWS credentials"
	sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
	sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {

	if (prop.containsKey("service")) {
		if (prop['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}

	} else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}

	if (prop.containsKey("providerRuntime")) {
		def _runtime = prop['providerRuntime']
		if (_runtime == "") {
			error "Wrong configuration. Value for Key 'providerRuntime' is missing in the configuration"

		} else {
			def validRuntimes = ["nodejs4.3", "nodejs6.10", "nodejs8.10", "python2.7", "java8"]
			def flag = false
			for (int i = 0; i < validRuntimes.size(); i++) {
				if (_runtime == validRuntimes[i]) {
					flag = true
				}
			}

			if (!flag) {
				echo "$flag"
				error "Runtime given in the configuration is not valid."
			}
		}

	} else {
		error "Wrong configuration. Key 'providerRuntime' is missing in the configuration"
	}

	if (prop.containsKey("providerTimeout")) {
		if (prop['providerTimeout'] == "") {
			error "Wrong configuration. Value for Key 'providerTimeout' is missing in the configuration"
		} else if (Integer.parseInt(prop['providerTimeout']) > 300) { // Should not be a high
			error "Wrong configuration. Value for Key 'providerTimeout' should be a less than 160"
		}

	} else {
		error "Wrong configuration. Key 'providerTimeout' is missing in the configuration"
	}


	def runtime = prop['providerRuntime']
	if (runtime.indexOf("java") > -1) {

		if (prop.containsKey("artifact")) {
			if (prop['artifact'] == "") {
				error "Wrong configuration. Value for Key 'artifact' is missing in the configuration"
			}

		} else {
			error "Wrong configuration. Key 'artifact' is missing in the configuration"
		}

		if (prop.containsKey("mainClass")) {
			if (prop['mainClass'] == "") {
				error "Wrong configuration. Value for Key 'mainClass' is missing in the configuration"
			}
		} else {
			error "Wrong configuration. Key 'mainClass' is missing in the configuration"
		}
	}

}

def addVpcDetails() {
	echo "addVpcdetails to serverless.yml file"
	sh "sed -i -- 's/vpcDisabled/vpc/g' ./serverless.yml"
}

def loadServerlessConfig(config) {
	dir('_config') {
		def configPackURL = scmModule.getCoreRepoCloneUrl("serverless-config-pack")

		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: configPackURL]

			]])
	}

	if (config['providerRuntime'].indexOf("nodejs") > -1) {
		sh "cp _config/serverless-nodejs.yml ./serverless.yml"
	} else if (config['providerRuntime'].indexOf("java") > -1) {
		sh "cp _config/serverless-java.yml ./serverless.yml"
	} else if (config['providerRuntime'].indexOf("python") > -1) {
		sh "cp _config/serverless-python.yml ./serverless.yml"
	}

	if ((config['service'] == 'cloud-logs-streamer' || config['service'] == 'logs') && config['domain'] == 'jazz') {
		//addVpcDetails()
	}


	echoServerlessFile()
}

/**
	Pre-build validation of swagger api specifications
**/
def validateSwaggerSpec() {

}

def validateSwaggerFile(service, domain, apiHostName){
	if (fileExists('swagger/swagger.json')) {
		def swaggerFile = readFile('swagger/swagger.json').trim()
		echo "after reading swagger file/....."
		def slurper = new groovy.json.JsonSlurper()
		def inputJSON = slurper.parseText(swaggerFile)
		def swagger_host = inputJSON.host
		def swagger_service = inputJSON.paths.keySet() as List
		def swagger_domain = inputJSON.basePath
		assert swagger_domain == ~ "/" + domain
		assert swagger_service[0] == "/" + service

	}
	sh "sed -i -- 's/host\": \"[^\"]*\"/host\": \"" + apiHostName + "\"/g' swagger/swagger.json"
}

/**
	Update the Api doc host url to include env in the path
**/
def updateApiDocUrl(String env) {
	sh "sed -i -- 's#basePath\": \"/#basePath\": \"/$env/#g' swagger/swagger.json"
	sh "sed -i -- 's#basePath\": \"/$env/\"#basePath\": \"/$env\"#g' swagger/swagger.json"
}

/**
	Create the subscription filters and loggroup if not existing
**/
def createSubscriptionFilters(stackName, region, roleId) {
	def lambda = "/aws/lambda/${stackName}"
	def logStreamer = "arn:aws:lambda:${configLoader.AWS.REGION}:${roleId}:function:${configLoader.INSTANCE_PREFIX}-jazz-cloud-logs-streamer-prod"
	try {
		sh "aws logs create-log-group --log-group-name ${lambda} --region ${region}"
	} catch (Exception ex) { }// ignore if already existing

	try {
		filter_json = sh(
			script: "aws logs describe-subscription-filters --output json --log-group-name \"${lambda}\" --region ${region}",
			returnStdout: true
		).trim()
		echo "${filter_json}"
		def resultJson = parseJson(filter_json)
		filtername = resultJson.subscriptionFilters[0].filterName
		echo "removing existing filter... $filtername"
		if (filtername != "" && !filtername.equals(lambda)) {
			sh "aws logs delete-subscription-filter --output json --log-group-name \"${lambda}\"  --filter-name \"${filtername}\" --region ${region}"
		}
	} catch (Exception ex) { }// ignore error if not created yet

	try {
		sh "aws logs put-subscription-filter --output json --log-group-name \"${lambda}\" --filter-name \"${lambda}\" --filter-pattern \"\" --destination-arn \"${logStreamer}\" --region ${region}"
	} catch (Exception ex) {
		echo "error occured: " + ex.getMessage()
	}
}



/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
def setCredentials() {
	def loginUrl = g_base_url + '/jazz/login'
	def token
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			token = sh(script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout: true).trim()

			def tokenJson = parseJson(token)
			tokenJson_token = tokenJson.data.token

			return tokenJson_token
		}
		catch (e) {
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email(config, build_status, email_content) {
	if (domain != "jazz") {
		echo "Sending build notification to ${config['created_by']}"
		def body_subject = ''
		def body_text = ''
		def cc_email = ''
		def body_html = ''
		if (build_status == 'STARTED') {
			echo "email status started"
			body_subject = 'Jazz Build Notification: Deployment STARTED for service: ' + config['service']
		} else if (build_status == 'FAILED') {
			echo "email status failed"
			def build_url = env.BUILD_URL + 'console'
			body_subject = 'Jazz Build Notification: Deployment FAILED for service: ' + config['service']
			body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
		} else if (build_status == 'COMPLETED') {
			body_subject = 'Jazz Build Notification: Deployment COMPLETED successfully for service: ' + config['service']
		} else {
			echo "Unsupported build status, nothing to email.."
			return
		}
		if (email_content != '') {
			body_text = body_text + '\n\n' + email_content
		}
		def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
		body = JsonOutput.toJson([
			from : fromStr,
			to : config['created_by'],
			subject : body_subject,
			text : body_text,
			cc : cc_email,
			html : body_html
		])

		try {
			def sendMail = sh(script: "curl -X POST \
					${g_base_url}/jazz/email \
					-k -v -H \"Authorization: $auth_token\" \
					-H \"Content-Type: application/json\" \
					-d \'${body}\'", returnStdout: true).trim()
			def responseJSON = parseJson(sendMail)
			if (responseJSON.data) {
				echo "successfully sent e-mail to ${config['created_by']}"
			} else {
				echo "exception occured while sending e-mail: $responseJSON"
			}
		} catch (e) {
			echo "Failed while sending build status notification"
		}
	}
}

/** Run validation based on runtime
*/
def runValidation(String runtime) {
	if (runtime.indexOf("nodejs") > -1) {
		echo "running validations for $runtime"
		sh "jshint *.js"
	} else if (runtime.indexOf("java") > -1) {
		echo "running validations for $runtime"
		sh "java -cp ${configLoader.CODE_QUALITY.SONAR.CHECKSTYLE_LIB} com.puppycrawl.tools.checkstyle.Main -c sun_checks.xml src"
	} else if (runtime.indexOf("python") > -1) {
		echo "running validations for $runtime"
	}
}

/**
*   Clear Virtualenvironment
**/
def clearVirtualEnv() {
	// sh "virtualenv --clear venv" // to uninstall all the packages installed in venv
	sh "rm -rf venv" // just delete the venv folder
}

def updatePlatformServiceTemplate(config, roleARN, roleId, environment_logical_id, repo_name)	{
	echo "loadServerlessConfig......."
	def jenkinsURL = JenkinsLocationConfiguration.get().getUrl().replaceAll("/", "\\\\/")
	serviceConfigdata.initialize(configLoader, roleARN, config['region'], roleId, jenkinsURL, environment_logical_id, repo_name, utilModule)
	serviceConfigdata.loadServiceConfigurationData()
}

@NonCPS
def parseJson(jsonString) {
	def lazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
	def m = [:]
	m.putAll(lazyMap)
	return m
}

def getBuildModuleUrl() {
	if (scm_type && scm_type != "bitbucket") {
		// right now only bitbucket has this additional tag scm in its git clone path
		return "http://${repo_base}/${repo_core}/jazz-build-module.git"
	} else {
		return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
	}
}

/*
* Load build modules
*/

def loadBuildModules(buildModuleUrl){

	dir('build_modules') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		echo "config loader loaded successfully."

		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)
		echo "SCM module loaded successfully."

		serviceConfigdata = load "service-configuration-data-loader.groovy"
		echo "Service configuration module loaded successfully."

		events = load "events-module.groovy"
		echo "Event module loaded successfully."

		serviceMetadataLoader = load "service-metadata-loader.groovy"
		serviceMetadataLoader.initialize(configLoader)
		echo "Service metadata loader module loaded successfully."

		utilModule = load "utility-loader.groovy"
		echo "Util module loaded successfully."

		environmentDeploymentMetadata = load "environment-deployment-metadata-loader.groovy"
		echo "Environment deployment data loader module loaded successfully."

		sonarModule = load "sonar-module.groovy"
		echo "Sonar module loaded successfully."

	}
}
