#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def events
@Field def serviceMetadataLoader
@Field def utilModule
@Field def environmentDeploymentMetadata

@Field def auth_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'

@Field def environment = ''
@Field def context_map = [:]
@Field def s3Bucket
@Field def asset_info
@Field def asset_name
@Field def service_config

node()  {
	def jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModules(jazzBuildModuleURL)

	def jazz_prod_api_id = utilModule.getAPIIdForCore(configLoader.AWS.API["PROD"])
	g_base_url = "https://${jazz_prod_api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"

	echo "Build Pack website params: " + params

	def branch = params.scm_branch
	def domain = params.domain
	def service = params.service_name
	def repo_name = params.service_name
	def requestId = params.request_id
	def gitCommitOwner
	def gitCommitHash

	if (domain && domain != "") {
		repo_name = params.domain + "_" + params.service_name
	}

	auth_token = setCredentials()

	def current_environment
	stage('Checkout code base') {
		sh 'rm -rf ' + repo_name
		sh 'mkdir ' + repo_name
		dir(repo_name) {
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getRepoCloneUrl(repo_name)]]])
		}
		// @TODO: dir can be removed, needs to be refactored
		def configObj = dir(repo_name) {
			return LoadConfiguration()
		}

		if (configObj.service_id) {
			service_config = serviceMetadataLoader.loadServiceMetadata(configObj.service_id)
		} else {
			error "Service Id is not available."
		}
	}

	if (!service_config) {
		error "Failed to fetch service metadata from catalog"
	}

	environmentDeploymentMetadata.initialize(service_config, configLoader, scmModule, branch, env.BUILD_URL, env.BUILD_ID, g_base_url + "/jazz/environments", auth_token)

	def environment_logical_id
	if (params.scm_branch == 'master') {
		environment_logical_id = 'prod'
		current_environment = 'PROD'
		s3Bucket = configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	} else {
    environment_logical_id = environmentDeploymentMetadata.getEnvironmentLogicalId();
		if (!environment_logical_id) {
			error "The environment has not been created yet and its missing the logical Id"
		}
		current_environment = "DEV"
		s3Bucket = configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
	}

  environment = environment_logical_id

	if (!events) { error "Can't load events module"	} //Fail here
	events.initialize(configLoader, service_config, "SERVICE_DEPLOYMENT", branch, environment, g_base_url + "/jazz/events")

	def create_cloudfront_url
	context_map = [created_by : service_config['created_by']]
	scmModule.setServiceConfig(service_config)
	gitCommitHash = scmModule.getRepoCommitHash()
	gitCommitOwner = scmModule.getRepoCommitterInfo(gitCommitHash)

	echo "requestId: $requestId"
	if(requestId != "none" && requestId != null && !utilModule.isReplayedBuild()) {
		echo "Setting up requestId"
		events.setRequestId(requestId)
		environmentDeploymentMetadata.setRequestId(requestId)
	} else {
		requestId = utilModule.generateRequestId()
		events.setRequestId(requestId)
		environmentDeploymentMetadata.setRequestId(requestId)
		events.sendStartedEvent('CREATE_DEPLOYMENT', 'Website deployment started', environmentDeploymentMetadata.generateDeploymentMap("started", environment_logical_id, gitCommitHash), environment_logical_id)
	}


	dir(repo_name)
	{

		stage('Pre-Build Validation'){

			events.sendStartedEvent("VALIDATE_INPUT", 'pre-build validation starts', context_map)
			try {
				service = service_config['service']
				domain = service_config['domain']
				if (domain != '' && domain != null) {
					service = domain + '-' + service
				}

				create_cloudfront_url = true
				if (service_config['create_cloudfront_url'] == true || service_config['create_cloudfront_url'] == "true") {
					create_cloudfront_url = true
				}

				echo "create_cloudfront_url====" + create_cloudfront_url
				send_status_email('STARTED', '')
				validateTemplate()
				validateDeploymentConfigurations()
			} catch (ex) {
				send_status_email('FAILED', '')
				events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage(), context_map)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment, gitCommitHash), environment)
				error ex.getMessage()
			}
			events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation completed', context_map)
		}

		stage("Deployment to ${current_environment} Env"){
			def randomString = utilModule.generateRequestId();
			def credsId = "jazz-${randomString}";
			events.sendStartedEvent("DEPLOY_TO_AWS", 'deployment starts', context_map)
			events.sendStartedEvent('UPDATE_ENVIRONMENT', "Environment status update event for ${environment} deployment", environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment, null), environment)
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
				sh "aws configure set profile.${credsId}.region ${configLoader.AWS.REGION}"
				sh "aws configure set profile.${credsId}.aws_access_key_id $AWS_ACCESS_KEY_ID"
				sh "aws configure set profile.${credsId}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
				sh "aws configure set preview.cloudfront true"

				generateAssetInfo()
				def assetInfo = "S3 Folder - /${asset_info}"

				echo "Checking if the website already exists.."
				if (configLoader.JAZZ.BUCKET_PER_SERVICE == "true") {
					def isBucketExists = checkIfBucketExists(s3Bucket)
					if (!isBucketExists) {
						echo "creating a new website with name $s3Bucket"
						sh "aws s3 mb s3://$s3Bucket --region ${configLoader.AWS.REGION}"
					}
				}
				def isBucketwithEnvExists = checkIfBucketExists(asset_info)
				def asset_event
				def asset_event_message
				if (isBucketwithEnvExists) {
					asset_event = 'UPDATE_ASSET'
					asset_event_message = 'update'
				} else {
					asset_event = 'CREATE_ASSET'
					asset_event_message = 'create'
				}
				events.sendStartedEvent(asset_event, "${asset_event_message} assets starts", utilModule.generateAssetMap("aws", "arn:aws:s3:::${asset_info}/*", "s3", service_config))
				try {
					sh "aws s3 sync ./app s3://${asset_info}  --exclude \".git/*\" --exclude \".gitignore\" --exclude \"*.svg\""
					sh "aws s3 sync ./app s3://${asset_info}  --exclude \"*\" --include \"*.svg\" --no-guess-mime-type --content-type image/svg+xml"
					events.sendCompletedEvent(asset_event, null, utilModule.generateAssetMap("aws", "arn:aws:s3:::${asset_info}/*", "s3", service_config), environment);
					def url
					if (create_cloudfront_url == true) {
						updateOrCreateCF()
						def cloudFrontDistribution = getCloudFrontARN()
						cfArn = cloudFrontDistribution.ARN
						events.sendCompletedEvent(asset_event, null, utilModule.generateAssetMap("aws", cfArn, "cloudfront", service_config), environment);

						def cloudFrontDistributionDetails = getCloudFrontDetails()
						url = 'https://' + cloudFrontDistributionDetails['Distribution']

						invalidateCloudFrontCache()
						generateBucketPolicy(true)
						echo "CLOUDFRONT UPDATED"
						echo "You can access the website at $url"
					} else {
						def distributionID = getDistributionId()
						if (distributionID != null && distributionID != "") {
							cleanupCloudFrontDistribution()
						}
						generateBucketPolicy(false)
						sh "aws s3 website s3://$s3Bucket --index-document index.html --error-document error.html"
						url = generateAssetUrl()
						echo "You can access the website at $url"
					}
					def svc_status = "You can access your website using following link: ${url}"
					echo svc_status
					environmentDeploymentMetadata.setEnvironmentEndpoint(url)
					send_status_email('COMPLETED', svc_status)

					events.sendCompletedEvent(asset_event, "${asset_event_message} assets completed", utilModule.generateAssetMap("aws", url, "endpoint_url", service_config),environment)
					events.sendCompletedEvent('UPDATE_DEPLOYMENT',  'Deployment completion Event for $environment deployment',  environmentDeploymentMetadata.generateDeploymentMap("successful",  environment, gitCommitHash), environment)
					events.sendCompletedEvent('UPDATE_ENVIRONMENT', 'Environment update event for deployment completion', environmentDeploymentMetadata.generateEnvironmentMap("deployment_completed", environment, null), environment)
					events.sendCompletedEvent('DEPLOY_TO_AWS', 'deployment completed', context_map)
				} catch (ex) {
					send_status_email('FAILED', '')
					events.sendFailureEvent(asset_event, ex.getMessage(), context_map)
					events.sendFailureEvent('UPDATE_DEPLOYMENT',  ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment, gitCommitHash), environment)
					events.sendFailureEvent('UPDATE_ENVIRONMENT', ex.getMessage(), environmentDeploymentMetadata.generateEnvironmentMap("deployment_failed", environment, null), environment)
					events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map)
					error "Deployment Failed. "+ ex.getMessage()
				}

			}
			// reset Credentials
			resetCredentials(credsId)
		}
	}
}

def generateAssetUrl(){
	def url = ""
	if (configLoader.JAZZ.BUCKET_PER_SERVICE == "true") {
		url = "http://${s3Bucket}.s3-website-${configLoader.AWS.REGION}.amazonaws.com/${environment}/index.html"
	} else {
		url = "http://${s3Bucket}.s3-website-${configLoader.AWS.REGION}.amazonaws.com/${service_config['domain']}-${service_config['service']}/${environment}/index.html"
	}
	return url
}

def generateAssetInfo(){
	if (configLoader.JAZZ.BUCKET_PER_SERVICE == "true") {
		if (service_config['s3_bucket_name']) {
			s3Bucket = service_config['s3_bucket_name']
		} else {
			s3Bucket = "${configLoader.INSTANCE_PREFIX}-${utilModule.generateBucketNameForService(service_config['domain'], service_config['service'])}"
			def serviceMetadataJson = ["s3_bucket_name" : s3Bucket]
			for (item in service_config.catalog_metadata) {
				serviceMetadataJson[item.key] = item.value
			}
			context_map['metadata'] = serviceMetadataJson
		}
		asset_info = "${s3Bucket}/${environment}"
		asset_name = "${s3Bucket}-${environment}"
	} else {
		asset_info = "${s3Bucket}/${service_config['domain']}-${service_config['service']}/${environment}"
		asset_name = "${s3Bucket}-${service_config['domain']}-${service_config['service']}-${environment}"
	}
}

/**
 * Update the CloudFront Dist for enabling compression & smooth streaming
 * TODO
 */
def updateOrCreateCF() {
	echo "Fetching distribution list"
	def distributionId = getDistributionId()
	echo "distributionId...$distributionId"
	def service = "${service_config['domain']}-${service_config['service']}"
	if (distributionId == null || distributionId == "") {
		echo "No Distribution present with the name $service. So creating new distribution."
		loadDistributionConfig()
		echo "Generating distribution configuration."
		generateDistributionConfig()
		sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json  file://distribution_config_with_tags.json"
	} else {
		echo "distribution exists..."
		updateEnableCompressConfig(distributionId)
	}
}

def updateEnableCompressConfig(distributionId) {

	try {

		def cf_config = getDistributionConfig(distributionId)
		echo "cf_config is $cf_config"
		def cfConfig = jsonParse(cf_config)
		if (cfConfig == null) { error "Could not fetch distribution configuration"}

		def _eTag = cfConfig.ETag

		echo "_eTag is $_eTag"
		def updateConfig = cfConfig.DistributionConfig
		if (updateConfig == null) { error "Invalid distribution configuration returned"}

		echo "updateConfig $updateConfig"

		if (!updateConfig.DefaultCacheBehavior.SmoothStreaming || !updateConfig.DefaultCacheBehavior.Compress) {
			updateConfig.DefaultCacheBehavior.SmoothStreaming = true
			updateConfig.DefaultCacheBehavior.Compress = true

			def updateConfigJson = JsonOutput.toJson(updateConfig)
			try {
				sh "echo '$updateConfigJson' > cf_config.json"
				sh "cat cf_config.json"
			} catch (ex) {
				echo "Ignoring the lazy error0 "+ ex.getMessage()
			}

			sh "aws cloudfront update-distribution \
					--distribution-config file://cf_config.json \
					--id $distributionId \
					--if-match $_eTag \
					--output json"
		}
	} catch (ex) {
		if ((ex.getMessage().indexOf("groovy.json.JsonSlurper") > -1) ||
			(ex.getMessage().indexOf("groovy.json.internal.LazyMap") > -1)) {
			echo "Ignoring the lazy error1 "+ ex.getMessage()
		} else {
			send_status_email('FAILED', '')
			events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map)
			error "Could not update the distribution. "+ ex.getMessage()
		}
	}
}
/**
 * Get dist Id if exists
 *
 */
def getDistributionId() {
	def distributionID
	try {
		def outputStr = listDistribution()
		if (outputStr) {
			echo "### OutputStr for getting Distribution Id: $outputStr"
			def outputObj = new JsonSlurper().parseText(outputStr)
			if (outputObj && outputObj[0].Id) {
				distributionID = outputObj[0].Id
			}
		}
		return distributionID
	} catch (ex) {
		return distributionID
	}
}

def listDistribution(){
	def outputStr = null
	def service = "${service_config['domain']}-${service_config['service']}"
	try {
		outputStr = sh(
			script: "aws cloudfront list-distributions \
				--output json \
				--query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-${environment}-static-website-origin-$service']].{Distribution:DomainName, Id:Id}\"",
			returnStdout: true
		)
		return outputStr
	} catch (ex) {
		return outputStr
	}
}

/**
 * Get CloudFront ARN
 */
def getCloudFrontARN() {
	def cfInfo = [:]
	try {
		def cloudFrontId = "";
		def cloudFrontDetailsArray = getCloudFrontDetails();
		cloudFrontId = cloudFrontDetailsArray.Id;

		def cloudFrontDistributionDetails = sh(returnStdout: true, script: "aws  cloudfront get-distribution --output json  --id $cloudFrontId")
		echo "cloudFrontDistributionDetails... $cloudFrontDistributionDetails"
		def _map = jsonParse(cloudFrontDistributionDetails)
		if(_map) {
			cfInfo << [ARN: _map.Distribution.ARN]
			cfInfo << [DomainName: _map.Distribution.DomainName]
		}
	} catch(error) {
		echo "error $error"
	}
	return cfInfo;
}

/**
 * Get CloudFront Details
 */
def getCloudFrontDetails() {
	def cfInfo
	try {
		def cloudFrontDistributionDetails = listDistribution()
		echo "cloudFrontDistributionDetails... $cloudFrontDistributionDetails"
		if (cloudFrontDistributionDetails) {
			def outputObj = jsonParse(cloudFrontDistributionDetails)
			cfInfo = outputObj[0]
		}
	} catch (ex) {
		send_status_email('FAILED', '')
		events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map)
		echo "error " + ex.getMessage()
	}
	return cfInfo;
}
/**
 * Create an S3 policy for direct S3 access through URLs or only through cloud front
 * @param isCloudfront if true - cloudfront policy is generated or S3 folder policy is generated
 *
 */
def generateBucketPolicy(isCloudfront) {
	def policySpec = '{"Version":"2012-10-17","Id":"Policy For ","Statement":[]}'
	def policyObj

	try {
		def policyJson = sh(returnStdout: true, script: "aws s3api get-bucket-policy --bucket $s3Bucket --query Policy --output text")
		policyObj = jsonParse(policyJson)
	} catch (ex) {
		echo "Bucket policy doesn't exists yet."
		policyObj = jsonParse(policySpec)
		policyObj.Id += "$s3Bucket"
	}
	if (policyObj) {
		updateBucketPolicy(isCloudfront, policyObj)
	}
}

def updateBucketPolicy(isCloudfront, existingPolicyObj){
	try {
		def policyObj = existingPolicyObj
		def stmtS3 = '{"Sid":"","Effect":"Allow","Principal":{"AWS":"*"},"Action":"s3:GetObject","Resource":"arn:aws:s3:::","Condition":{"IpAddress":{"aws:SourceIp":[]}}}'
		def stmtCf = '{"Sid":"","Effect":"Allow","Principal":{"AWS":""},"Action":"s3:GetObject","Resource":"arn:aws:s3:::"}'
		def stmtCfList = '{"Sid":"","Effect":"Allow","Principal":{"AWS":""},"Action":"s3:ListBucket","Resource":"arn:aws:s3:::"}'
		def existingStmts = policyObj.Statement
		def cleanupIndex = -1
		def CFOAI

		try {
			CFOAI = sh(
				script: "aws cloudfront list-cloud-front-origin-access-identities --output text \
			--query \"CloudFrontOriginAccessIdentityList.Items[?Comment=='${configLoader.INSTANCE_PREFIX}-origin_access_identity'].{j: Id}\"",
				returnStdout: true
			).trim()
		} catch (ex) {
			echo "Failed to list cloudfront origin access identities"
		}

		for (aStmt in existingStmts) {
			cleanupIndex++
			if ((aStmt['Sid'] == "list-$asset_name") ||
				(aStmt['Resource'] == "arn:aws:s3:::$asset_info/*")) {
				policyObj.Statement[cleanupIndex] = null
			}
		}
		policyObj.Statement.removeAll([null])
		def newStmtObj
		if (isCloudfront) {
			def principal = ["AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity $CFOAI"]
			newStmtObj = jsonParse(stmtCf)
			newStmtObj.Sid = "list-$asset_name"
			newStmtObj.Principal = principal
			newStmtObj.Resource += "$asset_info/*"
			policyObj.Statement << newStmtObj

			//Add list policy
			def listPolicyObject = jsonParse(stmtCfList)
			listPolicyObject.Sid = "list-$asset_name"
			listPolicyObject.Principal = principal
			listPolicyObject.Resource += "$s3Bucket"
			policyObj.Statement << listPolicyObject
		} else {
			def principal = "*"
			newStmtObj = jsonParse(stmtS3)
			newStmtObj.Sid = "list-$asset_name"
			newStmtObj.Principal = principal
			newStmtObj.Resource += "$asset_info/*"
			policyObj.Statement << newStmtObj
		}

		def newPolicyJson = JsonOutput.prettyPrint(JsonOutput.toJson(policyObj))
		echo "newPolicyJson... $newPolicyJson"
		def putPolicyResponse = sh(returnStdout: true, script: "aws s3api put-bucket-policy --output json --bucket $s3Bucket --policy \'${newPolicyJson}\'")

	} catch (ex) {
		echo "Bucket policy update failed. "+ ex.getMessage()
		error "Bucket policy update failed. "+ ex.getMessage()
	}

}

/**
 * Clean up (can disable only) the active distribution
 *
 */
def cleanupCloudFrontDistribution() {
	try {
		def distributionId
		def _Etag
		echo "cleaning cloud front distribution..."
		distributionId = getDistributionId()
		def distributionConfig = getDistributionConfig(distributionId)
		_Etag = generateDistributionConfigForDisable(distributionConfig)
		_Etag = disableCloudFrontDistribution(distributionId, _Etag, "disable-cf-distribution-config.json")
	} catch (ex) {
		if ((ex.getMessage()).indexOf("getDistributionId Failed") > -1) {
			echo "Could not find a CloudFront distribution Id for service: ${service_config['domain']}-${service_config['service']} and environment $environment"
		} else {
			error "cleanupCloudFrontDistribution Failed. "+ ex.getMessage()
		}
	}
}

/**
 * Disable Distribution configuration
 * @param distributionID
 * @param _Etag
 * @param configFile
 * @return
 */
def disableCloudFrontDistribution(distributionID, _Etag, configFile) {
	def disableOutput
	def eTag
	try {
		disableOutput = sh(
			script: "aws cloudfront update-distribution \
						--output json \
						--id $distributionID \
						--distribution-config file://"+ configFile + " \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "disableOutput... $disableOutput"
		if (disableOutput) {
			def disableConfigObj = jsonParse(disableOutput)
			eTag = disableConfigObj.ETag
		}
		echo "disable eTag...$eTag"
		return eTag
	} catch (ex) {
		error "disableCloudFrontDistribution. "+ ex.getMessage()
	}
}

/**
 * Get and save the CloudFront distribution Config corresponding to the service
 * @param distributionID
 * @return
 */
def getDistributionConfig(distributionId) {
	def distributionConfig
	try {
		distributionConfig = sh(
			script: "aws cloudfront get-distribution-config \
						--output json --id "+ distributionId,
			returnStdout: true
		)
		return distributionConfig
	} catch (ex) {
		error "getDistributionConfig Failed."+ ex.getMessage()
	}

}

/**
 * Generate Disable Distribution configuration
 * @param service
 * @param stage
 * @return
 */
def generateDistributionConfigForDisable(distributionConfig) {
	def distributionConfigObj
	def eTag
	try {
		if (distributionConfig) {
			distributionConfigObj = parseJson(distributionConfig)
		}
		eTag = distributionConfigObj.ETag
		distributionConfigObj.DistributionConfig.Enabled = false
		def updatedCfg = JsonOutput.toJson(distributionConfigObj.DistributionConfig)
		echo "updatedCfg... $updatedCfg"
		try {
			sh "echo \'$updatedCfg\' > disable-cf-distribution-config.json"
		} catch (ex) { }

		return eTag
	} catch (ex) {
		error "generateDistributionConfigForDisable Failed."+ ex.getMessage()
	}

}
def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if (i.toLowerCase().startsWith("#")) {
		} else {
			cleanedList.add(i)
		}
    }

	for (item in cleanedList) {
		def eachItemList = item.tokenize(":")
		//handle empty values
		def value = "";
		if (eachItemList[1]) {
			value = eachItemList[1].trim();
		}

		if (eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}
	}

	echo "Loaded configurations...$prop"
	return prop
}


/**
	Reset credentials
*/
def resetCredentials(credsId) {
  echo "resetting AWS credentials"
	sh "aws configure set profile.${credsId}.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
  sh "aws configure set profile.${credsId}.aws_secret_access_key XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Generate the distribution service_config file
*/
def generateDistributionConfig() {
	sh "sed -i -- 's/{service_name}/${service_config['domain']}-${service_config['service']}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{env}/${environment}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{conf_s3bucketname}/${s3Bucket}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{conf_stack_prefix}/${configLoader.INSTANCE_PREFIX}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's:{conf_origin_id}:${configLoader.AWS.CLOUDFRONT_ORIGIN_ID}:g' distribution_config_with_tags.json"
	if (configLoader.JAZZ.BUCKET_PER_SERVICE == "true") {
		sh "sed -i -- 's/{origin_path}/${environment}/g' distribution_config_with_tags.json"
	} else {
		sh "sed -i -- 's:{origin_path}:${service_config['domain']}-${service_config['service']}/${environment}:g' distribution_config_with_tags.json"
	}

	sh "sed -i -- 's/{owner}/${service_config['created_by']}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{domain_name}/${service_config['domain']}/g' distribution_config_with_tags.json"
	def distribution_config_with_tags = readFile('distribution_config_with_tags.json').trim()
	echo(distribution_config_with_tags)
}

/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations() {
	if (service_config.containsKey("service")) {
		if (service_config['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}
	} else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}
}


/**
	Validate template for all necessary files. Ex: index.html
*/
def validateTemplate() {
	if (fileExists('app/index.html')) {
		echo "index.html is present"
	} else {
		error "index.html is not available."
	}

	if (fileExists('deployment-env.yml')) {
		echo "deployment-env.yml is present"
	} else {
		error "deployment-env.yml is not available."
	}
}

def loadDistributionConfig() {
	checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url:  scmModule.getCoreRepoCloneUrl("website-distribution-pack")]]])
}

def invalidateCloudFrontCache() {
	try {
		def distributionId = getDistributionId()
		def service = "${service_config['domain']}-${service_config['service']}"
		if (distributionId) {
			def callerReference = "${service}_${env.BUILD_ID}"
			def config = "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$callerReference\"}"

			def invalidateStatus = sh(
				script:"aws cloudfront create-invalidation \
								--distribution-id $distributionId \
								--invalidation-batch '$config' \
								--output json",
				returnStdout: true)

			echo "Invalidated Cloud Front Cache for service $service..:$invalidateStatus"
		}
	} catch (ex) {
		error "Error occured while invalidating the Cloudfron Cache. "+ ex.getMessage()
	}
}

/**
 * Check if bucket exists
 *
 */
def checkIfBucketExists(s3BucketName) {
	def status = true;
	try {
		sh "aws s3 ls s3://$s3BucketName"
	} catch (ex) {
		status = false
	}
	return status
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
def setCredentials() {
	def loginUrl = g_base_url + '/jazz/login'

	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			def token = sh(script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = jsonParse(token)
			tokenJson_token = tokenJson.data.token

			return tokenJson_token
		}
		catch (e) {
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (build_status, email_content) {
   	echo "Sending build notification to ${service_config['created_by']}"
	def body_subject = ''
	def body_text = ''
	def cc_email = ''
	def body_html = ''
   	if (build_status == 'STARTED') {
		echo "email status started"
		body_subject = "Jazz Build Notification: Deployment STARTED for service: ${service_config['service']}"
   	} else if (build_status == 'FAILED') {
		echo "email status failed"
		def build_url = env.BUILD_URL + 'console'
		body_subject = "Jazz Build Notification: Deployment FAILED for service: ${service_config['service']}"
		body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
   	} else if (build_status == 'COMPLETED') {
		body_subject = "Jazz Build Notification: Deployment COMPLETED successfully for service: ${service_config['service']}"
   	} else {
		echo "Unsupported build status, nothing to email.."
		return
   	}
   	if (email_content != '') {
		body_text = body_text + '\n\n' + email_content
	}
	def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
	body = JsonOutput.toJson([
		from : fromStr,
		to : service_config['created_by'],
		subject : body_subject,
		text : body_text,
		cc : cc_email,
		html : body_html
	])

   	try {
		def sendMail = sh(script: "curl -X POST \
						${g_base_url}/jazz/email \
						-k -v -H \"Authorization: $auth_token\" \
						-H \"Content-Type: application/json\" \
						-d \'${body}\'", returnStdout: true).trim()
		def responseJSON = parseJson(sendMail)
		if (responseJSON.data) {
			echo "successfully sent e-mail to ${service_config['created_by']}"
		} else {
			echo "exception occured while sending e-mail: $responseJSON"
		}
   	} catch (e) {
       	echo "Failed while sending build status notification  " + e.toString()
   	}
}


/*
* Load environment variables from build module
*/

def loadBuildModules(buildModuleUrl){

	dir('build_modules') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		echo "config loader loaded successfully."

		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)
		echo "SCM module loaded successfully."

		events = load "events-module.groovy"
		echo "Event module loaded successfully."

		serviceMetadataLoader = load "service-metadata-loader.groovy"
		serviceMetadataLoader.initialize(configLoader)
		echo "Service metadata loader module loaded successfully."

		utilModule = load "utility-loader.groovy"

		environmentDeploymentMetadata = load "environment-deployment-metadata-loader.groovy"

	}
}

/**
 * Non-lazy JSON parser
 */
@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
		// right now only bitbucket has this additional tag scm in its git clone path
		return "http://${repo_base}/${repo_core}/jazz-build-module.git"
    } else {
		return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    }
}

@NonCPS
def jsonParse(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}
