service: ${file(deployment-env.yml):service}

provider:
  name: aws
  deploymentBucket: ${opt:bucket}
  region: ${file(deployment-env.yml):region}
  stage: dev
  owner: jazz
  domain: ""
  stackTags:
    application: {inst_stack_prefix}
    service: ${file(deployment-env.yml):service}
    domain: ${file(deployment-env.yml):domain, self:provider.domain}
    owner: ${file(deployment-env.yml):owner, self:provider.owner}
    environment: ${opt:stage, self:provider.stage}

custom:
  myStage: ${opt:stage, self:provider.stage}
  alerts:
    stages: # Optionally - select which stages to deploy alarms to
      - prod
      - production
    dashboards: true
    topics:
      ok: ${self:service}-${opt:stage}-alerts-ok
      alarm:
        topic: ${self:service}-${opt:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: sughosh@moonraft.com
      insufficientData: ${self:service}-${opt:stage}-alerts-insufficientData
    definitions:
      functionErrors:
        period: 300
      customAlarm:
        description: 'My custom alarm'
        namespace: 'AWS/Lambda'
        metric: duration
        threshold: 200
        statistic: Average
        period: 300
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
    alarms:
      - functionThrottles
      - functionErrors

plugins:
  - serverless-plugin-aws-alerts

functions:
  myalarm:
    handler: myalarm.handler
    alarms: # merged with function alarms
      - customAlarm
      - name: ${file(deployment-env.yml):service} # creates new alarm or overwrites some properties of the alarm (with the same name) from definitions
        namespace: 'AWS/Lambda'
        metric: errors # define custom metrics here
        threshold: 1
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold

  handler:
    name: ${self:service}-${self:custom.myStage}
    handler: index.handler
    role: ${file(deployment-env.yml):iamRoleARN}
    description: ${self:service} Lambda Function
    runtime: ${file(deployment-env.yml):providerRuntime}
    memorySize: ${file(deployment-env.yml):providerMemorySize}
    timeout: ${file(deployment-env.yml):providerTimeout}
    eventsDisabled:
      - schedule:
          rate: ${file(deployment-env.yml):eventScheduleRate}
          name: ${self:service}-${self:custom.myStage}-schedule
          enabled: ${file(deployment-env.yml):eventScheduleEnable}
    vpcDisabled:
      securityGroupIds:
        "Fn::Split":
          - ","
          - ${file(deployment-env.yml):securityGroupIds}
      subnetIds:
        "Fn::Split":
          - ","
          - ${file(deployment-env.yml):subnetIds}
