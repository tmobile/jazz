#!groovy

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core

@Field def repo_credential_id
@Field def aws_credential_id
@Field def region
@Field def instance_prefix
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def events
@Field def serviceMetadataLoader
@Field def utilModule
@Field def environmentDeploymentMetadata
@Field def sonarModule
@Field def whiteListModule
@Field def slsBuildRules
@Field def awsAPIGatewayModule
@Field def vaultUtilityModule

@Field def accountDetails
@Field def accountDetailsPrimary
@Field def env_deployment_descriptor

@Field def auth_token = ''
@Field def config
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def environment_logical_id

node() {
  try {  
    def jazzBuildModuleURL = getBuildModuleUrl()
    loadBuildModules(jazzBuildModuleURL)

    echo "Build triggered via branch: " + params.scm_branch + " with params: " + params
    def _event = ""

    def branch = params.scm_branch
    def domain = params.domain
    def repo_name = domain + "_" + params.service_name

    def gitCommitOwner
    def gitCommitHash
    def context_map
    def arnsMap = [:]

    accountDetailsPrimary = utilModule.getAccountInfoPrimary();

    def coreDomain = "jazz";
    def jazz_prod_api_id = awsAPIGatewayModule.getApigatewayInfoCore('PROD', coreDomain, accountDetailsPrimary);
    g_base_url = "https://${jazz_prod_api_id}.execute-api.${configLoader.AWS.DEFAULTS.REGION}.amazonaws.com/prod"

    stage('Checkout code base') {

      sh 'rm -rf ' + repo_name
      sh 'mkdir ' + repo_name
      sh 'pwd'

      def repocloneUrl
      if (domain == "jazz") {
        repocloneUrl = scmModule.getCoreRepoCloneUrl(repo_name)
      } else {
        auth_token = setCredentials()
        repocloneUrl = scmModule.getRepoCloneUrl(repo_name)
      }

      dir(repo_name) {
        checkout([$class: 'GitSCM', branches: [
          [name: '*/' + params.scm_branch]
        ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
            [credentialsId: repo_credential_id, url: repocloneUrl]
          ]])
      }

      def configObj = dir(repo_name) {
        LoadConfiguration()
      }

      if (configObj.service_id) {
        config = serviceMetadataLoader.loadServiceMetadata(configObj.service_id)
        config << configObj
      } else {
        error "Service Id is not available."
      }
    }

    if (!config) {
      error "Failed to fetch service metadata from catalog"
    }

    accountDetails = utilModule.getAccountInfo(config);

    dir(repo_name) {
      scmModule.setServiceConfig(config)
      def envApi = "${g_base_url}/jazz/environments"
      environmentDeploymentMetadata.initialize(config, configLoader, scmModule, branch, env.BUILD_URL, env.BUILD_ID, envApi, auth_token)
      gitCommitHash = scmModule.getRepoCommitHash()
      gitCommitOwner = scmModule.getRepoCommitterInfo(gitCommitHash)
      context_map = [created_by: config['created_by'], deployed_by: gitCommitOwner]

      if (branch == 'master') {
        environment_logical_id = 'prod';
      } else {
        environment_logical_id = environmentDeploymentMetadata.getEnvironmentLogicalId();
      }

      if (!environment_logical_id && config['domain'] != 'jazz') {
        error "The environment has not been created yet and its missing the environment id"
      }
      //set g_environment_logical_id
      environmentDeploymentMetadata.setEnvironmentLogicalId(environment_logical_id)
      //Get deployment descriptor from environments
      env_deployment_descriptor = environmentDeploymentMetadata.getEnvDeploymentDescriptor()
    }
    if (!events) {
      error "Can't load events module"
    } //Fail here

    def eventsApi = "${g_base_url}/jazz/events"
    events.initialize(configLoader, config, "SERVICE_DEPLOYMENT", branch, environment_logical_id, eventsApi)

    def runtime = config['providerRuntime']
    def service = config['service']
    domain = config['domain']

    def roleARN = accountDetails.IAM.PLATFORMSERVICES_ROLEID.replaceAll("/", "\\\\/")

    sonarModule.initialize(configLoader, config, branch)

    if (configLoader.TVAULT && configLoader.TVAULT.IS_ENABLED instanceof Boolean && configLoader.TVAULT.IS_ENABLED) {
      vaultUtilityModule.initialize(configLoader,config, g_base_url, auth_token, environment_logical_id, events, utilModule)      
    }

    def requestId = utilModule.generateRequestId()
    if (requestId != null) {
      events.setRequestId(requestId)
      environmentDeploymentMetadata.setRequestId(requestId)
    } else {
      error "Request Id Generation failed"
    }

    events.sendStartedEvent('CREATE_DEPLOYMENT', 'Serverless application deployment started', environmentDeploymentMetadata.generateDeploymentMap("started", environment_logical_id, gitCommitHash), environment_logical_id)

    dir(repo_name) {
      // copy the application.yml (Backward Compatible) from codebase to serverless.yml if it exists and always returns true
      sh "[[ -e application.yml ]] && cp application.yml serverless.yml || true"

      // copy serverless.yml from codebase to application.yml if it exists before it is overwritten and always returns true
      sh "[[ -e serverless.yml ]] && cp serverless.yml application.yml || true"

      // if neither exist serverless.yml or application.yml - create it from environment config 
      def deploymentDescriptor = slsBuildRules.prepareServerlessYml(config, environment_logical_id, configLoader, env_deployment_descriptor, accountDetails) // Generating the deployment descriptor
      echo "prepareServerlessYml => ${deploymentDescriptor}"
      sh "rm -rf ./serverless.yml"
      writeYaml(file: './serverless.yml', data: deploymentDescriptor)

      stage('Pre-Build Validation') {
        events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation started', context_map, environment_logical_id)
        try {
          send_status_email('STARTED', '')
          validateDeploymentConfigurations(config)
        } catch (ex) {
          send_status_email('FAILED', '')
          events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage(), context_map, environment_logical_id)
          events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
          error ex.getMessage()
        }
        events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation completed', context_map, environment_logical_id)
      }

      stage('Install Plugins') {
        events.sendStartedEvent('INSTALL_PLUGINS', 'Plugin Installation started', context_map, environment_logical_id)
        try {
          installServerlessPlugins()
        } catch (ex) {
          send_status_email('FAILED', '')
          events.sendFailureEvent('INSTALL_PLUGINS', ex.getMessage(), context_map, environment_logical_id)
          events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
          error ex.getMessage()
        }
        events.sendCompletedEvent('INSTALL_PLUGINS', 'Plugin Installation completed', context_map, environment_logical_id)

      }

      if (config['domain'] != 'jazz' && configLoader.CODE_QUALITY.SONAR.ENABLE_SONAR == "true") {
        stage('Code Quality Check') {
          events.sendStartedEvent('CODE_QUALITY_CHECK', 'code quality check starts', context_map, environment_logical_id)
          try {
            clearVirtualEnv(runtime)
            runValidation(runtime)
            sonarModule.doAnalysis()
          } catch (ex) {
            events.sendFailureEvent('CODE_QUALITY_CHECK', ex.getMessage(), context_map, environment_logical_id)
            events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
            error ex.getMessage()
          }
          events.sendCompletedEvent('CODE_QUALITY_CHECK', 'code quality check completed', context_map, environment_logical_id)
        }
      }

      stage('Build') {
        events.sendStartedEvent('BUILD', 'build starts', context_map, environment_logical_id)
        try {
          buildSlsApp(runtime, repo_name)
        } catch (ex) {
          events.sendFailureEvent('BUILD', ex.getMessage(), context_map, environment_logical_id)
          events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
          error ex.getMessage()
        }
        events.sendCompletedEvent('BUILD', 'build completed', context_map, environment_logical_id)
      }

      def env_key
      if (branch == "master") {
        env_key = "PROD"
      } else {
        env_key = "DEV"
      }

      stage('Package') {
        echo 'The packaging state'
        // As per 'Every stage should send started, failed, success events in each stage'
        events.sendStartedEvent('PACKAGE', 'Packaging starts', context_map, environment_logical_id)
        def credsId = null
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: accountDetails.CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
        ]) {
          try {
            def randomString = utilModule.generateRequestId();
            credsId = "jazz-${randomString}";
            def envBucketKey = "${env_key}"
            sh "aws configure set profile.${credsId}.region ${config.region}"
            sh "aws configure set profile.${credsId}.aws_access_key_id $AWS_ACCESS_KEY_ID"
            sh "aws configure set profile.${credsId}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

            def s3bucketvalue = getS3BucketValue(accountDetails , config, envBucketKey)

            // outputs the stdout and stderr to output.log and doesn't fail here
            sh "serverless package --stage ${environment_logical_id} --bucket ${s3bucketvalue} --profile ${credsId} -v > output.log 2>&1 || true"
            // Printing out the resulting stdout and the cloud-formation template
            def outputLog = readFile('output.log').trim()
            echo "serverless packaging log $outputLog"

            // will fail if ./.serverless/cloudformation-template-update-stack.json file DOES NOT exist
            // because of error in the previous step
            def cft = readFile('./.serverless/cloudformation-template-update-stack.json').trim()
            echo "CFT: $cft"
            // when we reached here then sending the success event out
            events.sendCompletedEvent('PACKAGE', 'Packaging has been completed', context_map, environment_logical_id)
          } catch(ex) {
            // Shall anything go wrong then the failure event is sent
            events.sendFailureEvent('PACKAGE', ex.getMessage(), context_map, environment_logical_id)
            def outputLog = readFile('output.log').trim()
            echo "serverless packaging log $outputLog"
            error ex.getMessage()
          } finally {
            // reset Credentials
            resetCredentials(credsId)
          }

        }
      }

      stage('Template validation') {
        echo 'The template validation state'
        // As per 'Every stage should send started, failed, success events in each stage'
        events.sendStartedEvent('TEMPLATE_VALIDATION', 'Template validation starts', context_map, environment_logical_id)
        def credsId = null
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: accountDetails.CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
        ]) {
          try {
            def randomString = utilModule.generateRequestId();
            credsId = "jazz-${randomString}";
            sh "aws configure set profile.${credsId}.region ${config.region}"
            sh "aws configure set profile.${credsId}.aws_access_key_id $AWS_ACCESS_KEY_ID"
            sh "aws configure set profile.${credsId}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
            // Please refer to https://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html
            sh "aws cloudformation validate-template --template-body file://.serverless/cloudformation-template-update-stack.json --profile ${credsId} --region ${config.region} > output.log"
            def outputLog = readFile('output.log').trim()
            echo "template validation log $outputLog"

            def cft = readFile('./.serverless/cloudformation-template-update-stack.json').trim()
            def cftJson = parseJson(cft)
            def outstandingResources = whiteListModule.validate(cftJson)
            if(outstandingResources.isEmpty()) {
              def serverlessyml = readFile('./serverless.yml').trim()
              def outstandingActions = whiteListModule.validateActions(serverlessyml)
              if(outstandingActions.isEmpty()) {
                def outstandingPlugins = whiteListModule.validatePlugins(serverlessyml)
                if(outstandingPlugins.isEmpty()) {
                  events.sendCompletedEvent('TEMPLATE_VALIDATION', 'Template validation has been completed', context_map, environment_logical_id)
                } else {
                  error "The following plugins are not allowed: ${outstandingPlugins}"
                }
              } else {
                error "The action types are not allowed: ${outstandingActions}"
              }
            } else {
              // Hopefully it'll raise an exception that is going to be immediately intercepted below
              error "The resource types not allowed: ${outstandingResources}"
            }
          } catch(ex) {
            // if anything went wrong then the failure event is sent
            events.sendFailureEvent('TEMPLATE_VALIDATION', ex.getMessage(), context_map, environment_logical_id)
            def outputLog = readFile('output.log').trim()
            echo "template validation log $outputLog"
            error ex.getMessage() // raising an exception thus propagating the message to the Jenkins
          } finally {
            // reset Credentials
            resetCredentials(credsId)
          }
        }
      }

      stage("Deployment to ${env_key} environment") {
        events.sendStartedEvent('DEPLOY_TO_AWS', 'Deployment started to staging AWS environment', context_map, environment_logical_id)

        echo "starts Deployment to ${env_key} Env"
        events.sendStartedEvent('UPDATE_ENVIRONMENT', "Environment status update event for ${env_key} deployment", environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment_logical_id, null), environment_logical_id)
        def credsId = null
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: accountDetails.CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
        ]) {
            try {
              // initialize aws credentials
              def randomString = utilModule.generateRequestId();
              credsId = "jazz-${randomString}";
              sh "aws configure set profile.${credsId}.region ${config.region}"
              sh "aws configure set profile.${credsId}.aws_access_key_id $AWS_ACCESS_KEY_ID"
              sh "aws configure set profile.${credsId}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

              // Generate serverless yml file with domain added in function name
              echo "Generate deployment env with domain"

              def envBucketKey = "${env_key}"
              echoServerlessFile()
              def cfStackName = "${instance_prefix}-${config['domain']}-${config['service']}-${environment_logical_id}"
              //Getting the list of aws resources associated with the CF stack before deployment. This is for comparing the 
              // the stack resources with the CF stack after deployment
              def oldCloudformationStackResources = utilModule.getStackResources(cfStackName, config['region'], credsId)
              //Getting the stack resources as map
              if (oldCloudformationStackResources) oldArnsMap = utilModule.createAllStackResources(whiteListModule, events, config, oldCloudformationStackResources, environment_logical_id, false)

              def deployOutput = servelessDeploy(environment_logical_id, envBucketKey, credsId)
              // After stack Deployment

              createAssetForHttpEvents(deployOutput)
              attachTagstoLogGroup(config, environment_logical_id, credsId)

              //Getting the list of aws resources associated with the CF stack after deployment. This is for comparing the 
              // the stack resources with the CF stack after deployment
              def newCloudformationStackResources = utilModule.getStackResources(cfStackName, config['region'], credsId)
              //Getting the stack resources as map
              arnsMap = utilModule.createAllStackResources(whiteListModule, events, config, newCloudformationStackResources, environment_logical_id, true)
              
              //If there is old CF stack resources, comparing the old and new stack resources
              if (oldCloudformationStackResources) utilModule.archiveOldAssets(g_base_url + "/jazz/assets", auth_token, config, environment_logical_id, events, arnsMap, oldArnsMap)

              //createSubscriptionFilters(config, accountDetails, environment_logical_id, credsId)
              send_status_email('COMPLETED', '')
            } catch (ex) {
              send_status_email('FAILED', '')
              events.sendFailureEvent('UPDATE_ENVIRONMENT', ex.getMessage(), environmentDeploymentMetadata.generateEnvironmentMap("deployment_failed", environment_logical_id, null), environment_logical_id)
              events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
              events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map, environment_logical_id)
              error ex.getMessage()
            } finally {
              // reset Credentials
              resetCredentials(credsId)
            }

            def serviceContext = [created_by: config['created_by'], deployed_by: gitCommitOwner]
            def deployment_descriptor = readFile("./serverless.yml")
            events.sendCompletedEvent('UPDATE_ENVIRONMENT', 'Environment update event for deployment completion', environmentDeploymentMetadata.generateEnvironmentMap("deployment_completed", environment_logical_id, null, deployment_descriptor), environment_logical_id)
            events.sendCompletedEvent('UPDATE_DEPLOYMENT', "Deployment completion Event for ${env_key} deployment", environmentDeploymentMetadata.generateDeploymentMap("successful", environment_logical_id, gitCommitHash), environment_logical_id)
            events.sendCompletedEvent('DEPLOY_TO_AWS', 'Successfully deployed services to AWS', serviceContext, environment_logical_id)

          } //end of withCredentials
        } //end of deployment to an environment

        //Udating safe details
        if (configLoader.TVAULT && configLoader.TVAULT.IS_ENABLED instanceof Boolean && configLoader.TVAULT.IS_ENABLED) {
          stage('Update Safe') {
            events.sendStartedEvent('UPDATE_SAFE', 'safe updation started', context_map, environment_logical_id)
            withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: accountDetails.CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
              try {
                // initialize aws credentials
                def randomString = utilModule.generateRequestId();
                credsId = "jazz-${randomString}";
                sh "aws configure set profile.${credsId}.region ${config.region}"
                sh "aws configure set profile.${credsId}.aws_access_key_id $AWS_ACCESS_KEY_ID"
                sh "aws configure set profile.${credsId}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
            
                def environment = environmentDeploymentMetadata.getEnvironmentInfo()
                if (environment && environment.metadata && environment.metadata.safe) {
                  def safeName = environment.metadata.safe.name
                  vaultUtilityModule.updateCustomServicesSafeDetails(safeName, arnsMap['lambda'], arnsMap['iam_role'], credsId)                
                }
                events.sendCompletedEvent('UPDATE_SAFE', 'safe updation completed', context_map, environment_logical_id)          
              } catch (ex) {
                events.sendFailureEvent('UPDATE_SAFE', ex.getMessage(), context_map, environment_logical_id)
                error ex.getMessage()
              } finally {
                resetCredentials(credsId)
              }              
            }
          } //End of stage
        } // End of if
      }
  } catch (err) {
    throw err
  } finally {
    deleteDir()
  }
}

def attachTagstoLogGroup(config, environment_logical_id, credsId){
  try {
    def deploymentDescriptor = null
    if( env_deployment_descriptor != null ){
      deploymentDescriptor = env_deployment_descriptor
    } else {
      deploymentDescriptor = config['deployment_descriptor']
    }
    // If no descriptor present then simply making an empty one. The readYaml default behavior is to return empty string back that is harmful as Map not String is expected below
    def doc = deploymentDescriptor ? readYaml(text: deploymentDescriptor) : [:]
    def functionsElem = doc['functions']

    // changing variable names appropriately
    def serviceDomain = "${configLoader.INSTANCE_PREFIX}_${config['domain']}_${config['service']}"
    functionsElem.each{functionName, funcConfig ->
      def lambdaName = funcConfig['name'] ? funcConfig['name'] : "${serviceDomain}_${functionName}_${environment_logical_id}"
      def logGroupName = "/aws/lambda/${lambdaName}"
      def serviceName = config['service']
      def namespace = config['domain']
      def environment = environment_logical_id
      sh "aws logs tag-log-group --log-group-name ${logGroupName} --tags '{\"service\":\"${serviceName}\", \"namespace\":\"${namespace}\", \"environment\":\"${environment}\", \"functionName\":\"${lambdaName}\"}' --profile ${credsId}"
    }
  } catch (Exception ex) {
    echo "Error occured while attaching tags to logGroup: ${ex.message}"
  } 
}

def deleteAndRedeployService(environment_logical_id, envBucketKey, accountDetails, config, credsId){
  def s3bucketvalue = getS3BucketValue(accountDetails , config, envBucketKey)
  echoServerlessFile()
  sh "serverless remove --stage $environment_logical_id -v --bucket ${s3bucketvalue} --profile ${credsId}"
  def redeployOutput = servelessDeploy(environment_logical_id, envBucketKey, credsId)
  if (redeployOutput != 'success') {
    echo "Exception occured while serverless deployment to ${environment_logical_id} environment : $redeployOutput"
    error "Exception occured while serverless deployment to ${environment_logical_id} environment"
  }
}

def createAssetForHttpEvents (deployOutput) {
  def deployLines = deployOutput.split('\n')
  def resourceArns = []
  def afterStackOutputs = false

  for(def line: deployLines) {
    if(afterStackOutputs && line.contains('functions:')) break;
    if(afterStackOutputs && !line.contains('None')) resourceArns.add(line)
    if(line.contains('endpoints')) afterStackOutputs = true
  }
  echo "resourceArns: $resourceArns"

  for(def resource: resourceArns) {
    def endpoints = resource.split(" - ")
    def method = endpoints[0].trim()
    def endpoint = endpoints[1].trim()
    def apigatewayRestApiId = endpoint.substring(0, endpoint.indexOf('.execute-api'))
    apigatewayRestApiId = apigatewayRestApiId.replaceAll(".*://", "")
    def path = endpoint.replaceAll(".*com", "")
    path = environment_logical_id == 'prod' ? path.replaceAll("/prod", "/prod/${method}") : "/dev/${method}${path}"
    def apigatewayArn = "arn:aws:execute-api:${config['region']}:${config['accountId']}:${apigatewayRestApiId}${path}"

    events.sendCompletedEvent('CREATE_ASSET', null, utilModule.generateAssetMap("aws", apigatewayArn, "apigateway", config), environment_logical_id)
    events.sendCompletedEvent('CREATE_ASSET', null, utilModule.generateAssetMap("aws", endpoint, "endpoint_url", config), environment_logical_id)
  }
}

def echoServerlessFile() {
  def serverlessyml = readFile('serverless.yml').trim()
  echo "serverless.yml => $serverlessyml"
}

def servelessDeploy(env, envBucketKey, credsId){
  try {
    def s3bucketvalue = getS3BucketValue(accountDetails, config, envBucketKey)
    sh "serverless deploy --stage ${env} -v --bucket ${s3bucketvalue} --profile ${credsId} > output.log"
    def outputLog = readFile('output.log').trim()
    echo "serverless deployment log: $outputLog"
    return outputLog
  } catch (ex) {
    echo "Serverless deployment failed due to: $ex"
    def outputLog = readFile('output.log').trim()
    echo "serverless deployment log: $outputLog"
    throw ex
  }
}

def removeEventResources(){
  sh "sed -i -- '/#Start:resources/,/#End:resources/d' ./serverless.yml"
  sh "sed -i -- '/#Start:events/,/#End:events/d' ./serverless.yml"
}

/**
** Get BucketName by region
**/
def getS3BucketValue(accountDetails , config, env_bucketKey){
  def s3bucketvalue
  for (item in accountDetails.REGIONS) {
    if(item.REGION == config.region){
      s3bucketvalue = item.S3[env_bucketKey]
    }
  }
  return s3bucketvalue
}




/**
 */
def isEnabled(config, key) {
  if (config.containsKey(key)) {
    return true
  } else {
    return false
  }
}

def LoadConfiguration() {
  def result = readFile('deployment-env.yml').trim()
  echo "result of yaml parsing....$result"
  def prop = [:]
  def resultList = result.tokenize("\n")

  // delete commented lines
  def cleanedList = []
  for (i in resultList) {
    if (i.toLowerCase().startsWith("#")) { } else {
      cleanedList.add(i)
    }
  }
  // echo "result of yaml parsing after clean up....$cleanedList"
  for (item in cleanedList) {
    // Clean up to avoid issues with more ":" in the values
    item = item.replaceAll(" ", "").replaceFirst(":", "#");
    def eachItemList = item.tokenize("#")
    //handle empty values
    def value = null;
    if (eachItemList[1]) {
      value = eachItemList[1].trim();
    }

    if (eachItemList[0]) {
      prop.put(eachItemList[0].trim(), value)
    }

  }
  echo "Loaded configurations....$prop"
  return prop
}

/**	Build project based on runtime
 */
def buildSlsApp(String runtime, String repo_name) {
  echo "installing dependencies for $runtime"
  if (runtime.indexOf("nodejs") > -1) {
    sh "npm install --save"
  } else if (runtime.indexOf("java") > -1) {
    sh "mvn package"
  } else if (runtime.indexOf("python") > -1) {
    // install requirements.txt in library folder, these python modules will be a part of deployment package
    sh "rm -rf library"
    sh "mkdir library"
    //Installing dependencies
    sh "pip install -r requirements.txt -t library"
    sh "touch library/__init__.py"
    if (runtime == 'python3.6' || runtime == 'python3.8') {
      // create virtual environment and install pytest
      sh """
      python3 -m venv virtualenv
      . virtualenv/bin/activate
      pip3 install pytest
      pytest --pyargs functions/*
      """
    } else {
      // create virtual environment and install pytest
      sh """
      pip install virtualenv
      virtualenv venv
      . venv/bin/activate
      pip install pytest
      pytest --pyargs functions/*
      """
    }
  } else if (runtime.indexOf("go") > -1 ) {
    // Installing dependencies using dep ensure
    // golang build scripts
   	withEnv(["GOPATH=${env.WORKSPACE}"]) {
      sh "mkdir -p $GOPATH/src"
      sh "rsync -a --exclude='.*' $GOPATH/" + repo_name + " $GOPATH/src"
      sh "cd $GOPATH/src/"+ repo_name+" && dep ensure"
      dirs = getFunctionPaths()
      def size = dirs.size()
      if( size > 0) {
        for(item in dirs) {
          def functionpath = "$GOPATH/src/${repo_name}/${item}"
          sh "env GOOS=linux GOARCH=amd64 go build -o ${item}/main ${functionpath}/main.go"
        }
      } else {
        error "No Functions Found..skipping build"
      }
    }
  }
}

/** Reset credentials
 */
def resetCredentials(credsId) {
  echo "resetting AWS credentials"
  def credPath = System.getenv().HOME + "/.aws/credentials"
  def confPath = System.getenv().HOME + "/.aws/config"
  sh "sed -i '/${credsId}/,+2d' ${credPath}"
  sh "sed -i '/${credsId}/,+1d' ${confPath}"
}

/** Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {
  if (prop.containsKey("service")) {
    if (prop['service'] == "") {
      error "Wrong configuration. Value for Key 'service' is missing in the configuration"
    }
  } else {
    error "Wrong configuration. Key 'service' is missing in the configuration"
  }
  if (prop.containsKey("providerRuntime")) {
    def _runtime = prop['providerRuntime']
    if (_runtime == "") {
      error "Wrong configuration. Value for Key 'providerRuntime' is missing in the configuration"
    } else {
      def validRuntimes = ["nodejs10.x", "nodejs12.x", "python3.6", "python3.8", "java8", "java11", "go1.x"]
      def flag = false

      for (int i = 0; i < validRuntimes.size(); i++) {
        if (_runtime == validRuntimes[i]) {
          flag = true
        }
      }

      if (!flag) {
        echo "$flag"
        error "Runtime given in the configuration is not valid."
      }
    }
  } else {
    error "Wrong configuration. Key 'providerRuntime' is missing in the configuration"
  }
}

def installServerlessPlugins(){
  try {
    def serverlessyml = readFile('./serverless.yml').trim()
    def outstandingPlugins = whiteListModule.validatePlugins(serverlessyml)
    if(outstandingPlugins.isEmpty()) {
      def plugins = whiteListModule.getPluginsfromYaml(serverlessyml)
      if( plugins ) {
        for (plugin in plugins){
          sh "npm install ${plugin}"
        }
      } else {
        echo "No plugins listed..skipping"
      }
    } else {
      error "The following plugins are not allowed: ${outstandingPlugins}"
    }
  } catch( ex ){
    error "Plugin Installation Failed "+ ex.getMessage();
  }
}

def echoServiceInfo(String env, String envBucketKey) {
  try {
    echo "Deployment output information - "
    def s3bucketvalue = getS3BucketValue(accountDetails , config, envBucketKey)

    sh "serverless --stage $env --bucket ${s3bucketvalue} info -v > deploy-info.txt"

    def arn = "unknown"
    def svc_response = "unknown"
    def result = readFile('deploy-info.txt').trim()
    def resultList = result.tokenize("\n")

    for (item in resultList) {
      if (item.startsWith("HandlerLambdaFunctionQualifiedArn")) {
        arn = item.trim().substring(35)
        version = arn.tokenize(':').last()
        arn = arn.substring(0, arn.length() - version.length() - 1)

        svc_response = "Your service endpoint: " + arn
      }
    }

    echo "==============================================================================================="
    echo svc_response
    echo "==============================================================================================="

    return svc_response

  } catch (Exception ex) {
    echo "Error while getting service info: " + ex.getMessage()
  }
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
def setCredentials() {
  def loginUrl = g_base_url + '/jazz/login'
  def token

  withCredentials([
    [$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']
  ]) {
    echo "user name is $UNAME"

    def login_json = []

    login_json = [
      'username': UNAME,
      'password': PWD
    ]
    def tokenJson_token = null
    def payload = JsonOutput.toJson(login_json)

    try {
      token = sh(script: "curl --silent -X POST -k -v \
        -H \"Content-Type: application/json\" \
          $loginUrl \
        -d \'${payload}\'", returnStdout: true).trim()

      def tokenJson = parseJson(token)
      tokenJson_token = tokenJson.data.token

      return tokenJson_token
    } catch (e) {
      echo "error occured: " + e.getMessage()
      error "error occured: " + e.getMessage()
    }
  }
}

/**
 * Send email to the recipient with the build status and any additional text content
 * Supported build status values = STARTED, FAILED & COMPLETED
 * @return
 */
def send_status_email (build_status, email_content) {
  echo "Sending build notification to ${config['created_by']}"
  // TODO: Use this to make the notification look better?
  def body_html = ''
  def body_subject = "[Jazz Build Notification] Deployment ${build_status} for your service: ${config['service']}"
  def body_text =  'View the complete build log here: ' + env.BUILD_URL + 'console'
  if (email_content != '') {
    body_text = email_content + '\n\n' + body_text
  }
  body = JsonOutput.toJson([
    from: 'Jazz Admin <' + configLoader.JAZZ.STACK_ADMIN + '>',
    to: config['created_by'],
    subject: body_subject,
    text: body_text,
    bcc: configLoader.JAZZ.STACK_ADMIN,
    html: body_html
  ])

  try {
    def sendMail = sh(script: "curl -X POST \
            ${g_base_url}/jazz/email \
            -k -v -H \"Authorization: $auth_token\" \
            -H \"Content-Type: application/json\" \
            -d \'${body}\'", returnStdout: true).trim()
      def responseJSON = parseJson(sendMail)
    if (responseJSON.data) {
      echo "successfully sent e-mail to ${config['created_by']}"
    } else {
      echo "exception occured while sending e-mail: $responseJSON"
    }
  } catch (e) {
    echo "Failed while sending build status notification  " + e.toString()
  }
}


/**
 *  Function to get arns of the triggers/events configured for the Lambda.
 *
 */
def getEventsArn(config, env) {
  def eventsArn = []
  try {
    def lambdaFnName = "${configLoader.INSTANCE_PREFIX}_${config['domain']}_${config['service']}_${env}"
    def lambdaPolicyTxt = sh(script: "aws lambda get-policy --region ${config['region']} --function-name $lambdaFnName --output json --profile ${credsId}", returnStdout: true)

    def policyLists = null
    if (lambdaPolicyTxt) {
      def lambdaPolicyJson = new groovy.json.JsonSlurperClassic()
      policyLists = lambdaPolicyJson.parseText(lambdaPolicyJson.parseText(lambdaPolicyTxt).Policy)
      if (policyLists) {
        for (st in policyLists.Statement) {
          if (st.Principal.Service == "events.amazonaws.com") {
            if (st.Condition.ArnLike["AWS:SourceArn"]) {
              eventsArn.push(st.Condition.ArnLike["AWS:SourceArn"])
            }
          }
        }
      }
    }
    return eventsArn
  } catch (ex) {
    // Skip the 'ResourceNotFoundException' when deploying first time. Workflow can't fail here.
    echo "Can't fetch the events policy configurations for lambda. " + ex.getMessage()
    return []
  }
}

def clearVirtualEnv(String runtime) {
  if (runtime.indexOf("python") > -1) {
      sh "rm -rf venv"
      sh "rm -rf virtualenv"
  }
}

/** Run validation based on runtime
 */
def runValidation(String runtime) {
  echo "Running linter for $runtime (if applicable)"
  if (runtime.indexOf("nodejs") > -1) {
    // sh "jshint *.js"
    echo "skipping validations for $runtime"
  } else if (runtime.indexOf("java") > -1) {
    sh "java -cp ${configLoader.CODE_QUALITY.SONAR.CHECKSTYLE_LIB} com.puppycrawl.tools.checkstyle.Main -c sun_checks.xml src"
  } else if (runtime.indexOf("python") > -1) {
    // placeholder for adding runtime specific validations
  } else if (runtime.indexOf("go") > -1) {
    // placeholder for adding runtime specific validations
  }
}

/** 
* Get list of paths for functions. They are expected in functions/ directory
*/
def getFunctionPaths() {
  sh "ls -al"
  def targetPaths = null
  try {
    targetPaths = sh(returnStdout: true, script: 'ls -d functions/*').split("\n")
    echo "completed : $targetPaths"
  } catch (ex) {
      echo "Error occured while getting the functions list. Please make sure that your functions are available in functions/ directory"
  }
  return targetPaths
}


@NonCPS
def parseJson(jsonString) {
  def lazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
  def m = [:]
  m.putAll(lazyMap)
  return m
}
/*
 * Load build modules
 */
def loadBuildModules(buildModuleUrl) {
  dir('build_modules') {
    checkout([$class: 'GitSCM', branches: [
      [name: '*/master']
    ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
        [credentialsId: repo_credential_id, url: buildModuleUrl]
      ]])

    configModule = load "config-loader.groovy"
    configLoader = configModule.loadConfigData(aws_credential_id, region, instance_prefix)
    echo "config loader loaded successfully."

    scmModule = load "scm-module.groovy"
    scmModule.initialize(configLoader)
    echo "SCM module loaded successfully."

    events = load "events-module.groovy"
    echo "Event module loaded successfully."

    serviceMetadataLoader = load "service-metadata-loader.groovy"
    serviceMetadataLoader.initialize(configLoader)
    echo "Service metadata loader module loaded successfully."

    utilModule = load "utility-loader.groovy"
    utilModule.initialize(configLoader)
    echo "Util module loaded successfully."

    sonarModule = load "sonar-module.groovy"
    echo "Sonar module loaded successfully."

    whiteListModule = load "sls-app/whitelist-validator-module.groovy"
    whiteListModule.initialize()
    echo "whitelist-validator-module module loaded successfully"

    environmentDeploymentMetadata = load "environment-deployment-metadata-loader.groovy"
    echo "Environment deployment data loader module loaded successfully."

    slsBuildRules = load "sls-app/sbr.groovy"
    slsBuildRules.initialize(steps,whiteListModule)
    echo "sls-app/sbr.groovy has been loaded"

    awsAPIGatewayModule = load "aws-apigateway-module.groovy"
    awsAPIGatewayModule.initialize()
    echo "aws-apigateway-module has been loaded"

    if (configLoader.TVAULT && configLoader.TVAULT.IS_ENABLED instanceof Boolean && configLoader.TVAULT.IS_ENABLED) {
      vaultUtilityModule = load "vault-utility-module.groovy"      
      echo "Vault utility module loaded successfully."
    }
  }
}

def getBuildModuleUrl() {
  if (scm_type && scm_type != "bitbucket") {
    // right now only bitbucket has this additional tag scm in its git clone path
    return "http://${repo_base}/${repo_core}/jazz-build-module.git"
  } else {
    return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
  }
}
