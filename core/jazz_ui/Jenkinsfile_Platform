#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" except for config_loader. instance_prefix, jazz_bucket_web to be taken from the config_loader.
@Field def repo_credential_id
@Field def aws_credential_id
@Field def region
@Field def instance_prefix
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def config_loader
@Field def scmModule
@Field def utilModule

@Field def credsId
@Field def environment
@Field def accountDetails

/*
* Get CloudFront DistID
*/
def getCloudfrontDistributionId() {
  def distributionId
  try {
    def cf_dists = getCloudFrontDetails()
    distributionId = (cf_dists) ? cf_dists[0].Id : null
    return distributionId
  }catch(ex) {
    echo "No distribution defined for ${environment}" + ex
    return null;
  }
}

def getCloudFrontDetails() {
  try {
    def cf_list_dists = sh (script: "aws  cloudfront list-distributions --query \"DistributionList.Items[?Origins.Items[?Id=='${config_loader.INSTANCE_PREFIX}-${environment}-static-website-origin-jazz_ui']].{Distribution:DomainName,Id: Id}\" --output json --profile ${credsId}" , returnStdout: true).trim()
    echo "cf_list_dists is: $cf_list_dists"
    def config_parser = new groovy.json.JsonSlurper()
    def cf_dists = config_parser.parseText(cf_list_dists)
    return cf_dists
  }catch(ex) {
    echo "No distribution defined for ${environment}" + ex
    return null;
  }
}

def getOrCreateCloudfrontDistribution() {
  echo "Fetching distribution list"
  def distributionId = getCloudfrontDistributionId()
  echo "distributionId...$distributionId"
  if (distributionId == null || distributionId == "") {
    echo "No Distribution present for ${environment}. So creating new distribution."
    loadDistributionConfig()
    echo "Generating distribution configuration."
    generateDistributionConfig()
    createCloudfrontDistribution()
    distributionId = getCloudfrontDistributionId()
  }
  return distributionId
}

def createCloudfrontDistribution() {
  try {
    sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json  file://distribution_config_with_tags.json --profile ${credsId}"
  } catch(ex) {
    error "Exception occured while creating the cloudfront distribution for ${environment}" + ex
  }
}

def loadDistributionConfig() {
  checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url:  scmModule.getCoreRepoCloneUrl("website-distribution-pack")]]])
}

def generateDistributionConfig() {
  def originAccessIdentity = accountDetails.CLOUDFRONT.CLOUDFRONT_ORIGIN_ID.split("/");
      originAccessIdentity = originAccessIdentity[originAccessIdentity.length - 1];
  def cloudFrontOriginAccessIdentity = "origin-access-identity/cloudfront/"+originAccessIdentity
  sh "sed -i -- 's/{service_name}/jazz_ui/g' distribution_config_with_tags.json"
  sh "sed -i -- 's/{env}/${environment}/g' distribution_config_with_tags.json"
  sh "sed -i -- 's/{conf_s3bucketname}/${config_loader.JAZZ.PLATFORM.AWS.S3.BUCKET_WEB}/g' distribution_config_with_tags.json"
  sh "sed -i -- 's/{conf_stack_prefix}/${configLoader.INSTANCE_PREFIX}/g' distribution_config_with_tags.json"
  sh "sed -i -- 's:{conf_origin_id}:${cloudFrontOriginAccessIdentity}:g' distribution_config_with_tags.json"
  sh "sed -i -- 's/{origin_path}/${environment}/g' distribution_config_with_tags.json"
  sh "sed -i -- 's/{owner}/serverless@t-mobile.com/g' distribution_config_with_tags.json"
  sh "sed -i -- 's/{domain_name}/jazz/g' distribution_config_with_tags.json"
  def distribution_config_with_tags = readFile('distribution_config_with_tags.json').trim()
  echo(distribution_config_with_tags)
}

/*
* Invalidate CloudFront
*/
def invalidate_cloudfront(cf_id) {
  try {
  //Using Jenkins build ID to form a unique callerReference
    def caller_reference = "JazzWeb_"+ env.BUILD_ID
    def invalidate_config= "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$caller_reference\"}"
    def invalidate_status = sh (script: "aws cloudfront create-invalidation --distribution-id $cf_id --invalidation-batch '$invalidate_config' --output json --profile ${credsId}" , returnStdout: true).trim()
    echo "Invalidated Cloud Front Cache:$invalidate_status"
  }catch(ex) {
    error "Failed while invalidate_cloudfront " + ex.toString()
  }
}

/*
* Configure AWS CLI
*/
def aws_configure() {
  withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: config_loader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
    try {
      def randomString = utilModule.generateRequestId();
      credsId = "jazz-${randomString}";
      sh "aws configure set profile.${credsId}.region ${config_loader.AWS.DEFAULTS.REGION}"
      sh "aws configure set profile.${credsId}.aws_access_key_id $AWS_ACCESS_KEY_ID"
      sh "aws configure set profile.${credsId}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
    } catch(ex) {
      error "Failed while configuring AWS CLI " + ex.toString()
    }
  }
}
/*
* Start the Pipeline stages
*/

node ()  {
  try {
    stage('Loading Config-Loader') {
      def jazzBuildModuleURL = getBuildModuleUrl()
      loadBuildModules(jazzBuildModuleURL)
      echo "Build triggered via branch: " + params.scm_branch

      def branch = params.scm_branch
      environment = (branch == 'master') ? 'prod' : 'dev'
      accountDetails = utilModule.getAccountInfoPrimary();
    }
    stage('Configure AWS CLI') {
      aws_configure()
    }

    stage('Checking out Jazz_UI repo') {
      dir('jazz_ui') {

        checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: config_loader.REPOSITORY.CREDENTIAL_ID, url: scmModule.getCoreRepoCloneUrl("jazz_ui")]]])
        def jazz_prod_api_id = getApiGatewayCore()

        if(config_loader.UI_CONFIG.service_tabs.overview)   sh "sed -i 's/{overview}/overview/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.service_tabs.access_control)   sh "sed -i 's/{access control}/access control/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.service_tabs.metrics)   sh "sed -i 's/{metrics}/metrics/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.service_tabs.cost)   sh "sed -i 's/{cost}/cost/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.service_tabs.logs)       sh "sed -i 's/{logs}/logs/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.environment_tabs.overview) sh "sed -i 's/{env_overview}/overview/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.environment_tabs.deployments)  sh "sed -i 's/{deployments}/deployments/g' ./src/environments/environment.oss.ts";
        if( config_loader.UI_CONFIG.environment_tabs.code_quality == "true" )  sh "sed -i 's/{code quality}/code quality/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.environment_tabs.assets)  sh "sed -i 's/{assets}/assets/g' ./src/environments/environment.oss.ts";
        if(config_loader.UI_CONFIG.environment_tabs.logs)  sh "sed -i 's/{env_logs}/logs/g' ./src/environments/environment.oss.ts";

        sh "sed -i 's/{api_doc_name}/${config_loader.JAZZ.PLATFORM.AWS.S3.API_DOC}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{account_number}/${config_loader.AWS.DEFAULTS.ACCOUNTID}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{region}/${config_loader.AWS.DEFAULTS.REGION}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{API_GATEWAY_KEY_PROD}/${jazz_prod_api_id}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{inst_region}/${config_loader.AWS.DEFAULTS.REGION}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{multi_env}/${config_loader.UI_CONFIG.feature.multi_env}/g' ./src/environments/environment.oss.ts"

        if(config_loader.SLACK.ENABLE_SLACK == "true") sh "sed -i 's/{slack_support}/true/g' ./src/environments/environment.oss.ts";
        else sh "sed -i 's/{slack_support}/false/g' ./src/environments/environment.oss.ts";

        sh "sed -i s!{swagger_editor}!${config_loader.JAZZ.SWAGGER.EDITOR_URL}!g ./src/environments/environment.oss.ts"

        /* If Azure extension is present, then UI will support azure related components*/
        if(config_loader.AZURE && config_loader.AZURE.IS_ENABLED instanceof Boolean && config_loader.AZURE.IS_ENABLED){
          sh "sed -i 's/{azure_enabled}/${config_loader.AZURE.IS_ENABLED}/g' ./src/environments/environment.oss.ts"
          sh "sed -i 's/{azure_account_number}/${config_loader.AZURE.DEFAULTS.ACCOUNTID}/g' ./src/environments/environment.oss.ts"
          sh "sed -i 's/{azure_region}/${config_loader.AZURE.DEFAULTS.REGION}/g' ./src/environments/environment.oss.ts"
        } else {
          sh "sed -i 's/{azure_enabled}/false/g' ./src/environments/environment.oss.ts"
        }

        /* Getting the accounts and regions */
        def accountMap = [:];
        def eachAccountMap = [];
        def regions = [];
        for (item in config_loader.AWS.ACCOUNTS) {
            regions = [];
            for(data in item.REGIONS){
                regions.push(data.REGION)
            }
            accountMap = [:]
            if(item.PRIMARY){
                accountMap.put('primary', true)
            } else {
                accountMap.put('primary', false)
            }
            accountMap.put('account', item.ACCOUNTID);
            accountMap.put('regions', regions);
            accountMap.put('accountName', item.ACCOUNTNAME);
            eachAccountMap.push(accountMap);
        }
        def uiAccountMap = JsonOutput.toJson(eachAccountMap)
        sh "sed -i 's/{accountMap}/${uiAccountMap}/g' ./src/environments/environment.oss.ts"

        sh "sed -i 's/{default_region}/${config_loader.AWS.DEFAULTS.REGION}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{default_account}/${config_loader.AWS.DEFAULTS.ACCOUNTID}/g' ./src/environments/environment.oss.ts"

        /* Getting the deployment targets */
        sh "sed -i 's/{api_deployment_targets}/${config_loader.UI_CONFIG.CREATE_SERVICE.DEPLOYMENT_TARGETS.API}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{function_deployment_targets}/${config_loader.UI_CONFIG.CREATE_SERVICE.DEPLOYMENT_TARGETS.FUNCTION}/g' ./src/environments/environment.oss.ts"
        sh "sed -i 's/{website_deployment_targets}/${config_loader.UI_CONFIG.CREATE_SERVICE.DEPLOYMENT_TARGETS.WEBSITE}/g' ./src/environments/environment.oss.ts"

        def uiConfig = JsonOutput.toJson(config_loader.UI_CONFIG)
        def importUICommand = "sed -i 's/{INSTALLER_VARS}/$uiConfig/g' ./src/environments/environment.oss.ts"
        sh importUICommand

        if (config_loader.APIGEE.ENABLE_APIGEE && config_loader.APIGEE.ENABLE_APIGEE.toString() == "true") sh "sed -i 's/{apigee_support}/true/g' ./src/environments/environment.oss.ts"
        else sh "sed -i 's/{apigee_support}/false/g' ./src/environments/environment.oss.ts"

        def envFile = readFile("./src/environments/environment.oss.ts");
        echo "displaying env file : ${envFile}"
      }
    }
    stage('Building the UI - NPM build') {
      sh """
      #Generate build file from jazz_ui
      npm update
      cd jazz_ui
      rm -rf node_modules
      npm install
      ng set --global warnings.versionMismatch=false
      ng build --env=oss --${environment} --aot=false
      cd ..
      """
    }
    stage('Getting CloudFront DistID') {
      //Since cloudfront already created for prod environment, we just getting its id only.
      cf_id = (environment == 'prod') ? getCloudfrontDistributionId() : getOrCreateCloudfrontDistribution()
      echo "$cf_id"
    }
    stage('Copying generated NPM build files to Jazz-Web S3 bucket') {
      sh """
      aws s3 ls ${config_loader.JAZZ.PLATFORM.AWS.S3.BUCKET_WEB} --profile ${credsId}
      aws s3 cp jazz_ui/dist s3://${config_loader.JAZZ.PLATFORM.AWS.S3.BUCKET_WEB}/${environment} --recursive --include "*" --profile ${credsId}
      aws s3 ls ${config_loader.JAZZ.PLATFORM.AWS.S3.BUCKET_WEB}/${environment} --profile ${credsId}
      """
    }
    stage('Invalidating CloudFront') {
      invalidate_cloudfront(cf_id)
      def cloudFrontDistributionDetails = getCloudFrontDetails()
      if(cloudFrontDistributionDetails ) {
        def cloudfrontName = cloudFrontDistributionDetails[0].Distribution
        def url = "http://${cloudfrontName}"
        echo "Please find the cloudfront created : ${url}"
      }
    }
  } catch (err) {
    throw err
  } finally {
    resetCredentials()
    deleteDir()
  }
}

def resetCredentials() {
  echo "resetting AWS credentials"
  def credPath = System.getenv().HOME + "/.aws/credentials"
  def confPath = System.getenv().HOME + "/.aws/config"
  sh "sed -i '/${credsId}/,+2d' ${credPath}"
  sh "sed -i '/${credsId}/,+1d' ${confPath}"
}

def getApiGatewayCore(){
  def gatewayValue
  for (item in config_loader.AWS.ACCOUNTS) {
    if(item.PRIMARY){
      for (data in item.REGIONS) {
        if(data.PRIMARY){
          gatewayValue = data.API_GATEWAY
        }
      }
    }
  }
  return getAPIIdNameMapping(gatewayValue.PROD, 'jazz')
}

def getAPIIdNameMapping(apiIdMapping, namespace) {
  if (!apiIdMapping) {
    error "No mapping document provided to lookup API !"
  }

  if (apiIdMapping["${namespace}"]) {
    return apiIdMapping["${namespace}"];
  } else if (apiIdMapping["${namespace}_*"]) {
    return apiIdMapping["${namespace}_*"];
  } else {
    apiIdMapping["*"];
  }
}

/*
load build modules
*/
def loadBuildModules(buildModuleUrl){

  try {
    dir('scm-loader') {
      checkout([$class: 'GitSCM', branches: [
        [name: '*/master']
      ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
        [credentialsId: repo_credential_id, url: buildModuleUrl]
      ]])

      configModule = load "config-loader.groovy"
      configLoader = configModule.loadConfigData(aws_credential_id, region, instance_prefix)
      echo "config loader loaded successfully."

      scmModule = load "scm-module.groovy"
      scmModule.initialize(configLoader)

      utilModule = load "utility-loader.groovy"
    }
  } catch(ex) {
    error "loadBuildModules failed: " + ex.toString()
  }
}

def getBuildModuleUrl() {
  if (scm_type && scm_type != "bitbucket") {
    // right now only bitbucket has this additional tag scm in its git clone path
    return "http://${repo_base}/${repo_core}/jazz-build-module.git"
  } else {
    return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
  }
}
