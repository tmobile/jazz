{
  "swagger": "2.0",
  "info": {
    "version": "2017-01-30T23:30:18Z",
    "title": "{api_deployment_node_title}",
    "description": "API specification for delete serverless service"
  },
  "host": "{api_host_name}",
  "basePath": "/{domain}",
  "schemes": [
    "https"
  ],
  "paths": {
    "/{service_name}": {
      "options": {
        "description": "CORS Support",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "CORS"
        ],
        "x-amazon-apigateway-integration": {
          "type": "mock",
          "requestTemplates": {
            "application/json": "{\"statusCode\" : 200}"
          },
          "responses": {
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "$input.json('$')"
              },
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default response for CORS method",
            "headers": {
              "Access-Control-Allow-Headers": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/400ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/404ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/500ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "POST http method for triggering a delete serverless service workflow",
        "parameters": [
          {
            "name": "param",
            "in": "body",
            "description": "post body parameter.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteServerlessServiceInput"
            }
          },
          {
            "name": "Jazz-Service-ID",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "Successful Execution",
            "schema": {
              "$ref": "#/definitions/200SuccessResponse"
            },
            "headers": {
              "Access-Control-Allow-Headers": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/400ErrorResponse"
            },
            "headers": {
              "Access-Control-Allow-Headers": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/404ErrorResponse"
            },
            "headers": {
              "Access-Control-Allow-Headers": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/500ErrorResponse"
            },
            "headers": {
              "Access-Control-Allow-Headers": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "{envPrefix}-{domain}-cognito-authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "type": "aws",
          "uri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:{lambda_function_name}/invocations",
          "httpMethod": "POST",
          "credentials": "{conf-role}",
          "requestTemplates": {
            "application/json": "\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $input.json(\"$\"),\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}",
            "application/x-www-form-urlencoded": "\n#define( $body )\n  {\n  #foreach( $token in $input.path('$').split('&') )\n    #set( $keyVal = $token.split('=') )\n    #set( $keyValSize = $keyVal.size() )\n    #if( $keyValSize >= 1 )\n      #set( $key = $util.urlDecode($keyVal[0]) )\n      #if( $keyValSize >= 2 )\n        #set( $val = $util.urlDecode($keyVal[1]) )\n      #else\n        #set( $val = '' )\n      #end\n      \"$key\": \"$val\"#if($foreach.hasNext),#end\n    #end\n  #end\n  }\n#end\n\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $body,\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}"
          },
          "responses": {
            ".*\"InternalServerError\".*": {
              "statusCode": "500",
              "responseTemplates": {
                "application/json": "$input.path('$.errorMessage')"
              },
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            },
            ".*\"BadRequest\".*": {
              "statusCode": "400",
              "responseTemplates": {
                "application/json": "$input.path('$.errorMessage')"
              },
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            },
            "default": {
              "statusCode": "200",
              "responseTemplates": {
                "application/json": "{\"data\" : $input.json('$.data'),\"input\" : $input.json('$.input')}"
              },
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            },
            ".*\"NotFound\".*": {
              "statusCode": "404",
              "responseTemplates": {
                "application/json": "$input.path('$.errorMessage')"
              },
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "{envPrefix}-{domain}-cognito-authorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "custom",
      "x-amazon-apigateway-authorizer": {
        "authorizerCredentials": "{conf-role}",
        "authorizerResultTtlInSeconds": 0,
        "authorizerUri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:{envPrefix}-{domain}-cognito-authorizer-{envmnt}/invocations",
        "type": "request"
      }
    }
  },
  "definitions": {
    "200SuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/SuccessDataFormat"
        },
        "input": {
          "$ref": "#/definitions/DeleteServerlessServiceInput"
        }
      }
    },
    "400ErrorResponse": {
      "type": "object",
      "properties": {
        "error_type": {
          "type": "string",
          "default": "Bad Request format"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "404ErrorResponse": {
      "type": "object",
      "properties": {
        "error_type": {
          "type": "string",
          "default": "Resource Not Found"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "500ErrorResponse": {
      "type": "object",
      "properties": {
        "error_type": {
          "type": "string",
          "default": "Internal Server Error"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SuccessDataFormat": {
      "description": "The response data format",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The status of the service call"
        },
        "request_id": {
          "type": "string",
          "description": "The uuid to track the status of the clean up service"
        }
      }
    },
    "DeleteServerlessServiceInput": {
      "type": "object",
      "description": "Service input payload format",
      "required": [
        "service_name"
      ],
      "properties": {
        "service_name": {
          "type": "string",
          "default": "The name of the service to be cleaned up"
        },
        "domain": {
          "type": "string",
          "default": "The domain of the service which it belongs to"
        },
        "version": {
          "type": "string",
          "default": "The optional field which specifies the version number of the service to be cleaned up"
        }
      }
    }
  }
}