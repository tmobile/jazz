#!groovy
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core

//jenkins-build-pack-api
//definitions
def Event_Name =[
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'CALL_ONBOARDING_WORKFLOW':'CALL_ONBOARDING_WORKFLOW',
	'RAISE_PR':'RAISE_PR',
	'VALIDATE_INPUT':'VALIDATE_INPUT',
	'CALL_ONBOARDING_SERVICE':'CALL_ONBOARDING_SERVICE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'CREATE_SERVICE':'CREATE_SERVICE',
	'BUILD':'BUILD',
	'CODE_QUALITY_CHECK':'CODE_QUALITY_CHECK',
	'UNIT_TEST':'UNIT_TEST',
	'COMMIT_CODE':'COMMIT_CODE',
	'APPROVE_PR':'APPROVE_PR',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'DEPLOY_TO_AWS':'DEPLOY_TO_AWS',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE',
	'CREATE_ASSET':'CREATE_ASSET',
	'UPDATE_ASSET':'UPDATE_ASSET'
]

def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]

@Field def configModule
@Field def configLoader
@Field def var_api_key
@Field def var_api_id_dev
@Field def var_aws_credential_id
@Field def var_env_name_prefix
@Field def var_repo_core
@Field def var_repo_loc
@Field def var_credentialsId
@Field def var_bitbucket_base
@Field def var_bitbucket_email

@Field def g_login_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def service_id = ''

@Field def preserveEnvKey = ''
@Field def preserveEnvValue = ''
@Field def created_by = ''
@Field def api_doc_s3_bucket = ''
@Field def role = ''

@Field def current_environment = ''
@Field def g_base_url_for_swagger = ''
@Field def region = ''
@Field def jq = '/usr/local/bin/jq'
@Field def aws_api_import = '/var/lib/aws-apigateway-importer/aws-api-import.sh'

node() {
	jazzBuildModuleURL = "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
	loadConfigModule(jazzBuildModuleURL)
	var_api_key 				= configLoader.API.API_KEY
	var_api_id_dev = configLoader.API.API_ID_DEV
	var_aws_credential_id = configLoader.AWS_CREDENTIAL_ID
	var_env_name_prefix = configLoader.env_name_prefix
	var_repo_core = configLoader.REPOSITORY.REPO_CORE
	var_repo_loc = configLoader.REPOSITORY.REPO_LOC
	var_credentialsId 			= configLoader.REPOSITORY.REPO_CREDENTIAL_ID
	var_bitbucket_base			= configLoader.REPOSITORY.REPO_BASE
	var_bitbucket_email 		= configLoader.REPOSITORY.REPO_EMAIL
	region = configLoader.JAZZ.jazz_region
	g_base_url = "https://${configLoader.API.API_KEY}.execute-api.${region}.amazonaws.com/prod"
	role = configLoader.JAZZ.jazz_roleId
	api_doc_s3_bucket = configLoader.JAZZ_S3.jazz_s3_api_doc
	g_base_url_for_swagger = "http://editor.swagger.io/?url=http://${api_doc_s3_bucket}.s3-website-${region}.amazonaws.com/"

    echo "Build triggered via branch: " + params.scm_branch
    //checkout scm
    echo "start"

    def serviceName = params.service_name
    def cfStackName = params.service_name
	def branch = params.scm_branch

    def bitbucket_name = params.service_name
	def var_bitbucket_framework_url = "http://" + var_bitbucket_base + "/scm/" + var_repo_loc + "/"


	def configPackBBURL = "http://" + var_bitbucket_base + "/scm/" + var_repo_core + "/serverless-config-pack.git"
	def jazzBuildModuleURL = "http://${var_bitbucket_base}/scm/"+ var_repo_core +"/jazz-build-module.git"

	def config
	
	if (params.scm_branch == 'master') {
		current_environment = 'prod'
	}else {
		current_environment = 'dev'
	}

    stage('Checkout code base') {

		if (domain  && domain.trim()!="") {
			bitbucket_name = params.domain + "-" + params.service_name
		 }else{
			domain = ""
		}

		sh 'rm -rf ' + bitbucket_name
		sh 'mkdir ' + bitbucket_name

		dir(bitbucket_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: var_credentialsId, url: var_bitbucket_framework_url + bitbucket_name + '.git']]])
		}

		sh 'cd ' + bitbucket_name

		// @TODO: dir can be removed, needs to be refactored
		def configObj = dir(bitbucket_name)
		{
			return LoadConfiguration()
		}
		
		if(configObj.service_id){	
			def url = "$g_base_url/platform/services/"+configObj.service_id
			serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL)
			serviceMetadata.setUrl(url)
			def serviceData = serviceMetadata.loadServiceMetaData()
			if(serviceData && serviceData.data){	
				config = serviceData.data['metadata']
			}else{
				error "Error while fetching service metadata"
			}
		}else{
			error "Service Id is not available."
		}

	}
	
	
	def domain = config['domain']
    def runtime = config['providerRuntime']
    def service = config['service']

	def internalAccess = config['require_internal_access']

	def roleARN = role.replaceAll("/", "\\\\/")
	def var_api_host_name = "${var_api_key}.execute-api.${region}.amazonaws.com"

	// @TODO: the below statement will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

  	def logStreamer = "arn:aws:lambda:" + region + ":" + roleId + ":function:" + var_env_name_prefix + "-cloud-logs-streamer-prod"

    echo "Role:: " + role

    if (domain  && domain.trim()!="") {
        serviceName = domain.trim() + "-" + serviceName
        cfStackName = cfStackName + "-" + domain.trim() //sets CF Stack name as service--domain-env
	 }else{
        domain = ""
    }

	serviceName = var_env_name_prefix + "-" + serviceName
	cfStackName = serviceName

	sh 'cd ' + bitbucket_name

	dir(bitbucket_name)
	{

		echo "loadServerlessConfig......."
		loadServerlessConfig(runtime, configPackBBURL)

		sh "cp serverless.yml serverless-prod.yml"
		sh "cp swagger/swagger.json swagger/swagger-prod.json"

		stage('Pre-Build Validation') {
			def currentendpointKey = ''
			if (params.scm_branch == 'master') {
				currentendpointKey = 'prod'
			}else {
				currentendpointKey = 'dev'
			}

			loadServiceInfo(params.service_name, domain, g_base_url + '/platform/services', currentendpointKey)

			send_status_email(created_by, 'STARTED', params.service_name, '')
			sendEvent(service, branch, runtime, "NA", region, domain, role, Event_Name.VALIDATE_INPUT, Event_Status.STARTED, "")

			validateDeploymentConfigurations(config)
			validateSwaggerSpec();

			sendEvent(service, branch, runtime, "NA", region, domain, role, Event_Name.VALIDATE_INPUT, Event_Status.COMPLETED, "")
		}

		stage('Build') {
		   // @TODO : Send Event feature coming soon
			sendEvent(service, branch, runtime, "NA", region, domain, role, Event_Name.BUILD, Event_Status.STARTED, "")
			buildLambda(runtime)
			sendEvent(service, branch, runtime, "NA", region, domain, role, Event_Name.BUILD, Event_Status.COMPLETED, "")
		}

		if (params.scm_branch == 'master') {
			stage('Deployment to Production Env') {

				sendEvent(service, branch, runtime, "PRODUCTION", region, domain, role, Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "starting")
				echo "starts Deployment to Production Env"

				sh "cp serverless-prod.yml serverless.yml"
				sh "cp swagger/swagger-prod.json swagger/swagger.json"
				sh "rm -rf .serverless"


				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: var_aws_credential_id, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					echo "AWS Configure ......."
					sh "aws configure set profile.cloud-api.region "+region
					sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
					sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

					//sh "serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY"

					// Generate serverless yml file with domain added in function name
					echo "Generate deployment env with domain for PRODUCTION"
					
					writeServerlessFile(config)
					
					generateServerlessYml(service, current_environment, serviceName, cfStackName)
					echo "setting lambda execution role as $role";
					setLambdaExecutionRole(role);

					echo "serverless deploy......."
					sh "serverless deploy --stage prod -v --bucket " + configLoader.JAZZ_S3.jazz_bucket_prod
					createSubscriptionFilters(serviceName, current_environment, region, logStreamer);
					def svc_status = ''
					if (fileExists('swagger/swagger.json')) {
						// Generate swagger file based on environment
						echo "Generating the swagger file for each environment"

						var_api_key = configLoader.API.API_ID_PROD;
						def apiHostName = var_api_key+".execute-api."+region+".amazonaws.com" //Staging environment

						generateSwaggerEnv(service, current_environment, service, apiHostName, domain, serviceName, var_api_key, config)
						//validateSwaggerFile( service, domain, apiHostName )
						// import swagger api spec
						echo "Deploying to staging API Gateway environment.."

						sh "${aws_api_import} --region ${region}  --update ${var_api_key} --deploy prod swagger/swagger.json "

						def endpointUrl = "https://" + var_api_key + ".execute-api." + region + ".amazonaws.com/prod/" + domain + "/" + params.service_name

						updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, endpointUrl)

						updateApiDocUrl(current_environment)

						sh "aws s3 cp swagger/ s3://${api_doc_s3_bucket}/${domain}/${params.service_name}/${current_environment} --recursive "

						svc_status  = "Your service endpoint for ${current_environment} environment: ${endpointUrl} \n\nView and test your API here: ${g_base_url_for_swagger}${domain}/${service}/${current_environment}/swagger.json"
					}

					send_status_email(created_by, 'COMPLETED', params.service_name, svc_status)
					updateServiceInDB(params.service_name, domain, g_base_url + '/platform/services', "active")
					// resetCredentials()
					sendEvent(service, branch, runtime, "PRODUCTION", region, domain, role, Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}
			}//stage to prod ends here


		} else {
			stage('Deployment to Dev Env') {
				sendEvent(service, branch, runtime, "DEVELOPMENT", region, domain, role, Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "starting")
				echo "starts Deployment to Development Env"

				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: var_aws_credential_id, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
				echo "AWS Configure ......."
				sh "aws configure set profile.cloud-api.region ${region}"
				sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
				sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

				echo "loadServerlessConfig......."
                loadServerlessConfig(runtime, configPackBBURL)

				// Generate serverless yml file with domain added in function name
				echo "Generate deployment env with domain"

				
				writeServerlessFile(config)
				
				generateServerlessYml(service, current_environment, serviceName, cfStackName)
				echo "setting lambda execution role as $role";
				setLambdaExecutionRole(role);

				echo "serverless deploy......."
				sh "serverless deploy --stage dev -v --bucket " + configLoader.JAZZ_S3.jazz_bucket_dev
				createSubscriptionFilters(serviceName, current_environment, region, logStreamer);
				def svc_status = ''
				if (fileExists('swagger/swagger.json')) {
					// Generate swagger file based on environment
					echo "Generating the swagger file for each environment"
					var_api_key = configLoader.API.API_ID_DEV;
					def apiHostName = var_api_key+".execute-api."+region+".amazonaws.com" //Staging environment

					generateSwaggerEnv(service, current_environment, service, apiHostName, domain, serviceName, var_api_key, config)
					//validateSwaggerFile( service, domain, apiHostName )
					// import swagger api spec
					echo "Deploying to staging API Gateway environment.."

					sh "$aws_api_import --region "+region+" --update "+var_api_key+" --deploy dev swagger/swagger.json"

					def endpointUrl = "https://" + var_api_key + ".execute-api." + region + ".amazonaws.com/dev/" + domain + "/" + params.service_name
					updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, endpointUrl)

          			updateApiDocUrl(current_environment)

					sh "aws s3 cp swagger/ s3://${api_doc_s3_bucket}/${domain}/${params.service_name}/${current_environment} --recursive "

					svc_status  = "Your service endpoint for production environment: $endpointUrl \n\nView and test your API here: $g_base_url_for_swagger$domain/$service/dev/swagger.json"
				}

				// @TODO : Resetting the credentials needs to be introduced. (Re-use of same profile on Async calls needs to be considered)
				// resetCredentials()

				send_status_email(created_by, 'COMPLETED', params.service_name, svc_status)
				updateServiceInDB(params.service_name, domain, g_base_url + '/platform/services', "active")
				// @TODO : Send Event feature coming soon
				sendEvent(service, branch, runtime, "DEVELOPMENT", region, domain, role, Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
			  }
			} //Stage to deploy ends here

		}//if branch name ends here
	}//dir ends here
}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}

def addVpnDetails() {
	echo "addVpndetails to serverless.yml file"
	sh "sed -i -- 's/vpcDisabled/vpc/g' ./serverless.yml"
}

def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
		}
		def newItem = ["subnetIds", ""]
	for (item in cleanedList) {

		// Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");

		def eachItemList = item.tokenize("#")
		//handle empty values
		def value = "";
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}
		if(eachItemList[0].trim() == "securityGroupIds")
		{

			if(value.indexOf('"') == -1)
				value = "\"" + value + "\""

			echo value
		}

		if(eachItemList[0].trim() == "subnetIds1" || eachItemList[0].trim()  == "subnetIds2" || eachItemList[0].trim()  == "subnetIds3")
		{
			if(newItem[1].trim()  == "")
				newItem[1] = "\""  + eachItemList[1].trim()

			else
				newItem[1] =  newItem[1].trim()  + "," + eachItemList[1].trim()

		}
		else if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}

	}
	if(newItem[1] != "")
	{
	 newItem[1] =  newItem[1].trim()  + "\""
		prop.put(newItem[0].trim(),  newItem[1].trim())
		def key = newItem[0].trim()
		def val = newItem[1].trim()



	}
	echo "Loaded configurations...$prop"

	return prop
}

/**
 Run validation based on runtime
*/
def runValidation(String runtime) {
    if (runtime.indexOf("nodejs") > -1) {
        echo "running validations for $runtime"
        sh "jshint *.js"
    } else if (runtime.indexOf("java") > -1) {
        echo "running validations for $runtime"

        dir('_java') {
            sh 'wget -q $CHECKSTYLE_LIB'
        }

        sh 'java -cp _java/checkstyle-7.6-all.jar com.puppycrawl.tools.checkstyle.Main -c sun_checks.xml src'

    } else if (runtime.indexOf("python") > -1) {
        echo "running validations for $runtime"
        sh "pip install pep8"
        sh "pep8 . --exclude=\"library/*\""
        echo "validations for $runtime succeeded"
    }

}

/**
	Build project based on runtime
*/
def buildLambda(String runtime) {
    echo "installing dependencies for $runtime"
    if (runtime.indexOf("nodejs") > -1) {
        sh "npm install --save"
    } else if (runtime.indexOf("java") > -1) {
        sh "mvn package"
    } else if (runtime.indexOf("python") > -1) {
        // install requirements.txt in library folder, these python modules
        // will be a part of deployment package
        sh "pip install -r requirements.txt -t library"

        // create virtual environment and install dev-requirements
        sh """
        pip install virtualenv
        virtualenv venv
        . venv/bin/activate
        pip install -r requirements-dev.txt
        """
    }

}

/**
	Run Test cases based on runtime
*/
def runTestCases(String runtime) {
    echo "Run test cases for $runtime"
    if (runtime.indexOf("nodejs") > -1) {
        sh "npm test"
    } else if (runtime.indexOf("java") > -1) {
        sh "mvn test"
    } else if (runtime.indexOf("python") > -1) {
        sh """
        . venv/bin/activate
        pip install pytest
		pytest test
        """
    }

}

/**
	Parse Yml file and validate for
	invalid configurations
*/
def validateUserConfigurationYml() {
    echo "Validating serverless.yml configuration file"
    def prop = [: ]
    def result = readFile('serverless.yml').trim()
    def resultList = result.tokenize("\n")

    // delete commented lines
    def cleanedList = []
    for (i in resultList) {
        if (i.toLowerCase().startsWith("#")) {} else {
            cleanedList.add(i)
        }
    }

    // echo "result of yaml parsing after clean up....$cleanedList"

    for (item in cleanedList) {
        // Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
        // def eachItemList = item.tokenize(":")
        echo "result of yaml parsing eachItemList....$eachItemList"

        //handle empty values
        def value = null;
        if (eachItemList[1]) {
            value = eachItemList[1].trim();
        }

        if (eachItemList[0]) {
            prop.put(eachItemList[0].trim(), value)
        }

    }


    // validate for invalid configurations
    if (prop.containsKey("events")) {
        error "Wrong configuration. Key $prop['events'] is not allowed"
    }
}

/**
	Generate the swagger file specific to each environment
*/
def generateSwaggerEnv(service, env, deploymentNode, apiHostName, domain, serviceName, var_api_key, config) {
    sh "sed -i -- 's/{lambda_function_name}/" + serviceName + "-" + env + "/g' swagger/swagger.json"
    sh "sed -i -- 's/{api_deployment_node_title}/" + deploymentNode + "/g' swagger/swagger.json" // {api_deployment_node_title}
    sh "sed -i -- 's/{service_name}/" + service + "/g' swagger/swagger.json" // {service_name}
    sh "sed -i -- 's/{api_host_name}/" + apiHostName + "/g' swagger/swagger.json" // {api_host_name}
    sh "sed -i -- 's/{domain}/" + domain + "/g' swagger/swagger.json" // {domain}


	def roleARN = role.replaceAll("/", "\\\\/")
	def var_api_host_name = var_api_key+".execute-api."+region+".amazonaws.com"

	// TODO: the below couple of statements will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

	sh "sed -i -- 's/{conf-role}/" + roleARN + "/g' ./swagger/swagger.json"
	sh "sed -i -- 's/{conf-region}/" + region + "/g' ./swagger/swagger.json"
	sh "sed -i -- 's/{conf-accId}/" + roleId + "/g' ./swagger/swagger.json"
}

/**
	Generate the serverless yml file with domain name in lambda name
*/
def generateServerlessYml(service, env, serviceName, cfStackName) {
    sh "sed -i -- 's/name: \${self:service}-\${self:custom.myStage}/name: " + serviceName + "-" + env + "/g' serverless.yml"
    sh "sed -i -- 's/service: \${file(deployment-env.yml):service}/service: " + cfStackName + "/g' serverless.yml"
	sh "sed -i -- 's/{env-stage}/" + env + "/g' serverless.yml"
}

def writeServerlessFile(config){
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/" + config['region'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/" + config['domain'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/" + config['owner'] + "/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|" + config['iamRoleARN'] + "|g' serverless.yml" 	
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/" + config['providerRuntime'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/" + config['providerMemorySize'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/" + config['providerTimeout'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleRate}/" + config['eventScheduleRate'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleEnable}/" + config['eventScheduleEnable'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/" + config['securityGroupIds'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/" + config['subnetIds'] + "/g' serverless.yml"
	
	if(config['artifact']){
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/" + config['artifact'] + "/g' serverless.yml"
	}
	if(config['mainClass']){
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/" + config['mainClass'] + "/g' serverless.yml"
	}
	
}

/**
	Set the Lambda execution role. If user provided a custom role override the default.
*/
def setLambdaExecutionRole(role) {
	sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#"+role+"#g' serverless.yml"
}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {

    if (prop.containsKey("service")) {
        if (prop['service'] == "") {
            error "Wrong configuration. Value for Key 'service' is missing in the configuration"
        }

    } else {
        error "Wrong configuration. Key 'service' is missing in the configuration"
    }

    if (prop.containsKey("providerRuntime")) {
        def _runtime = prop['providerRuntime']
        if (_runtime == "") {
            error "Wrong configuration. Value for Key 'providerRuntime' is missing in the configuration"

        } else {
            def validRuntimes = ["nodejs4.3", "python2.7", "java8"] //@TODO. Add more runtime supports. DSundar3
            def flag = false
            for (int i = 0; i < validRuntimes.size(); i++) {
                if (_runtime == validRuntimes[i]) {
                    flag = true
                }
            }

            if (!flag) {
                echo "$flag"
                error "Runtime given in the configuration is not valid."
            }
        }

    } else {
        error "Wrong configuration. Key 'providerRuntime' is missing in the configuration"
    }

    if (prop.containsKey("providerTimeout")) {
        if (prop['providerTimeout'] == "") {
            error "Wrong configuration. Value for Key 'providerTimeout' is missing in the configuration"
        } else if (Integer.parseInt(prop['providerTimeout']) > 300) { // Should not be a high
            error "Wrong configuration. Value for Key 'providerTimeout' should be a less than 160"
        }

    } else {
        error "Wrong configuration. Key 'providerTimeout' is missing in the configuration"
    }


    def runtime = prop['providerRuntime']
    if (runtime.indexOf("java") > -1) {

        if (prop.containsKey("artifact")) {
            if (prop['artifact'] == "") {
                error "Wrong configuration. Value for Key 'artifact' is missing in the configuration"
            }

        } else {
            error "Wrong configuration. Key 'artifact' is missing in the configuration"
        }

        if (prop.containsKey("mainClass")) {
            if (prop['mainClass'] == "") {
                error "Wrong configuration. Value for Key 'mainClass' is missing in the configuration"
            }
        } else {
            error "Wrong configuration. Key 'mainClass' is missing in the configuration"
        }
    }

}

def loadServerlessConfig(String runtime, String configPackBBURL) {

	def config = LoadConfiguration()
	def subnetIds = config['subnetIds']
	def securityGroupIds = config['securityGroupIds']
	def internalAccess = config['require_internal_access']
    dir('_config') {
        checkout([$class: 'GitSCM', branches: [
            [name: '*/master']
        ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
            [credentialsId: var_credentialsId, url: configPackBBURL]
        ]])
    }

    if (runtime.indexOf("nodejs") > -1) {
        sh "cp _config/serverless-nodejs.yml ./serverless.yml"
    } else if (runtime.indexOf("java") > -1) {
        sh "cp _config/serverless-java.yml ./serverless.yml"
    } else if (runtime.indexOf("python") > -1) {
        sh "cp _config/serverless-python.yml ./serverless.yml"
    }


	// sh "sed -i -- 's/securityGroupIds/securityGroupIdsOld/g' deployment-env.yml"
	// sh "sed -i -- 's/subnetIds/subnetIdsOld/g' deployment-env.yml"
	// sh "echo '\nsubnetIds : $subnetIds\nsecurityGroupIds : $securityGroupIds\n' >> deployment-env.yml"

	echoServerlessFile()

}

/**
	Pre-build validation of swagger api specifications
**/
def validateSwaggerSpec() {
    echo "================================ validating swagger spec ================================"
        // generating swagger with dummy values for validation
    //generateSwaggerEnv("test-service-for-validation", "test", "test-cloud-api", apiHostName, "domain", "test-service-for-validation")
    //sh "swagger-tools validate swagger/swagger.json"
    echo "================================ validating swagger spec ================================"
}

def validateSwaggerFile( service, domain, apiHostName ){
    echo "================================ validating swagger before deployement ================================"
    if (fileExists('swagger/swagger.json')) {
        def swaggerFile = readFile('swagger/swagger.json').trim()
        echo "after reading swagger file/....."
        def slurper = new groovy.json.JsonSlurper()
        def inputJSON = slurper.parseText(swaggerFile)
        def swagger_host = inputJSON.host
        def swagger_service = inputJSON.paths.keySet() as List
        def swagger_domain = inputJSON.basePath
        assert swagger_domain ==~ "/" + domain
        assert swagger_service[0] == "/" + service

    }
    sh "sed -i -- 's/host\": \"[^\"]*\"/host\": \"" + apiHostName +   "\"/g' swagger/swagger.json"
    echo "================================ validating swagger before deployment ================================"
}

/**
	Update the Api doc host url to include env in the path
**/
def updateApiDocUrl(String env) {
    sh "sed -i -- 's#basePath\": \"/#basePath\": \"/$env/#g' swagger/swagger.json"
    sh "sed -i -- 's#basePath\": \"/$env/\"#basePath\": \"/$env\"#g' swagger/swagger.json"
}

/**
	Create the subscription filters and loggroup if not existing
**/
def createSubscriptionFilters(String service, String env, String region, String logStreamer) {
	def lambda = "/aws/lambda/"+service+"-"+env
	def cloudLogsStreamer = logStreamer
	try {
		sh "aws logs create-log-group --log-group-name "+lambda+" --region "+region
	}catch(Exception ex) {}// ignore if already existing

	try {
		filter_json = sh (
			script: "aws logs describe-subscription-filters --output json --log-group-name \""+lambda+"\" --region "+region ,
			returnStdout: true
		).trim()
		echo "${filter_json}"
		def describeJson = new groovy.json.JsonSlurper()
		def resultJson = describeJson.parseText(filter_json)
        filtername = resultJson.subscriptionFilters[0].filterName
		echo "removing existing filter... $filtername"
		if(filtername != "" && !filtername.equals(lambda)) {
			sh "aws logs delete-subscription-filter --output json --log-group-name \""+lambda+"\" --filter-name \""+filtername+"\" --region "+region
		}
	}catch(Exception ex) {}// ignore error if not created yet
	sh "aws logs put-subscription-filter --output json --log-group-name \""+lambda+"\" --filter-name \""+lambda+"\" --filter-pattern \"\" --destination-arn \""+cloudLogsStreamer+"\" --region "+region
}

/**
    Read basepath from swagger
*/
def getBasePath() {

    def propValue = "/"

    if (fileExists('swagger/swagger.json')) {
        def swaggerFile = readFile('swagger/swagger.json').trim()
        def slurper = new groovy.json.JsonSlurper()
        def result = slurper.parseText(swaggerFile)

        propValue = result.basePath
    }
    def propVal = propValue.replace( /{domain}/, '' ).trim()
    if (propVal.startsWith('/')) {
        propVal = propVal.substring(1)
    }
    echo "getBasePath : $propValue -> $propVal"
    return propVal
}
//Remove caching by default
def removeResourceCaching(apiID, stage, basePath){
    if (fileExists('swagger/swagger.json')) {
        def json = createPathMethodList() //Returns a list maps of path and methods
        //Loop through the list for each map entry
        for (i = 0; i < json.size(); i++) {
            def item = (Map)json.get(i)
            def entries = get_map_entries(item) //Gets key value pair for path and methods
            //Loop through each map entries
            for (int j=0; j<entries.size(); j++){
              String key = entries[j][0]
              String value =  entries[j][1]

              def pathVal = basePath.replaceFirst(/^(api)/,"") + key //Adds basepath to get the complete resource path and removes stage - api
              def methodVal = value.toUpperCase()

              def modifiedBasePath = pathVal.replaceAll("/", "~1")
              sh "aws apigateway update-stage --rest-api-id $apiID --stage-name --output json $stage --patch-operations op=replace,path=/$modifiedBasePath/$methodVal/caching/enabled,value=false --region us-west-2"

            }
        }
    }
}
//Creates a list consisting of all path-method combination from the swagger which is serializable.
def createPathMethodList() { //Creates a list consisting of all path-method combination from the swagger
    def swaggerFile = readFile('swagger/swagger.json').trim()
    def lazyMap = new groovy.json.JsonSlurper().parseText(swaggerFile)
    def jsonMap = [:]
    jsonMap.putAll(lazyMap.paths)
    def composedList = []

    for (path in jsonMap){
        def pathKey = path.key
        def pathVal = [:]
        pathVal.putAll(path.value)

        //loop through all methods in path
        for (method in pathVal){
            def methodVal = method.key.toUpperCase()
            def pathMap = [:]
            pathMap[pathKey] = methodVal
            composedList.add(pathMap)
        }
    }
    return composedList;
}
@NonCPS
List<List<Object>> get_map_entries(map) {
    map.collect {k, v -> [k, v]}
}

/**
*   Clear Virtualenvironment
**/
def clearVirtualEnv() {
    // sh "virtualenv --clear venv" // to uninstall all the packages installed in venv
    sh "rm -rf venv" // just delete the venv folder
}

def sendEvent(service_name, branch, runtime, environment, region, domain, iam_role, event_name, event_status, error){
	echo "Event on:" + service_name + " error:" + error
}

def loadServiceInfo(service, domain, serviceUrl, endpointKey) {

	def token = setCredentials()

	def url = "$serviceUrl?domain=$domain&service=$service&isAdmin=true"

	if (endpointKey == 'dev') {
		preserveEnvKey = 'prod'
	}else if (endpointKey == 'prod') {
		preserveEnvKey = 'dev'
	}

	def curlOutput = sh (script: "curl -H \"Content-Type: application/json\" \
			-H \"Authorization: $token\" \"$url\" | $jq -r '.data[0] | [.id, .endpoints[\"$preserveEnvKey\"], .created_by] | join(\",\")'", returnStdout: true)

	def values = curlOutput.split(',')

	if (values[0]) {
		service_id = values[0].replaceAll("[\n\r]", "")
	}

	if (values[1]) {
		preserveEnvValue = values[1].replaceAll("[\n\r]", "")
	}

	if (values[2]) {
		created_by = values[2].replaceAll("[\n\r]", "")
	}
}

def updateServiceWithEndpointInfo(service, domain, serviceUrl, endpointKey, endpointVal) {

	def updateJson = ''

	if(preserveEnvValue) {
		updateJson = "{ \"endpoints\": { \"$endpointKey\" : \"$endpointVal\", \"$preserveEnvKey\": \"$preserveEnvValue\"} }"
	}else {
		updateJson = "{ \"endpoints\": { \"$endpointKey\" : \"$endpointVal\"} }"
	}

	echo "new json $updateJson"

	def serviceUpdateUrl = "$serviceUrl/$service_id"

	def serviceUpdateOutput = sh (script: "curl --silent -X PUT $serviceUpdateUrl \
		        -H \"accept: application/json\" \
				-H \"Content-Type: application/json\" \
				-H \"Authorization: $g_login_token\"  \
				  -d \'${updateJson}\'", returnStdout:true)

	echo "service update result: $serviceUpdateOutput"
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def loginUrl = g_base_url + '/platform/login'
	def token
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]

		def payload = JsonOutput.toJson(login_json)

		try {
			token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
				 $loginUrl \
				-d \'${payload}\' | $jq -r '.data.token'", returnStdout:true)

			token = token.replaceAll("[\n\r]", "")
			return token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
 	

 }

 /**
 * Set Service
 * @return
 */
def setAuthToken(token) {
	g_login_token = token
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (email_id, build_status, service, email_content) {
   	echo "Sending build notification to " + email_id
	def body_subject = ''
	def body_text = ''
	def cc_email = ''
	def body_html = ''
   	if (build_status == 'STARTED') {
		echo "email status started"
		body_subject = 'Jazz Build Notification: Deployment STARTED for service: ' + service
   	} else if (build_status == 'FAILED') {
		echo "email status failed"
		def build_url = env.BUILD_URL + 'console'
		body_subject = 'Jazz Build Notification: Deployment FAILED for service: ' + service
		body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
   	} else if (build_status == 'COMPLETED'){
		body_subject = 'Jazz Build Notification: Deployment COMPLETED successfully for service: ' + service
   	} else {
		echo "Unsupported build status, nothing to email.."
		return
   	}
   	if (email_content != ''){
		body_text = body_text + '\n\n' + email_content
	}
	def fromStr = 'JAZZ ADMIN <' + configLoader.JAZZ.JAZZ_ADMIN + '>'
	body = JsonOutput.toJson([
					from : fromStr,
					to : email_id,
					subject : body_subject,
					text : body_text,
					cc : cc_email,
					html : body_html
			    ])

   	try{
				def sendMail = sh (script: "curl -X POST \
						${g_base_url}/platform/email \
						-k -v -H \"Authorization: $g_login_token\" \
						-H \"Content-Type: application/json\" \
						-d \'${body}\'", returnStdout: true).trim()
				def responseJSON = parseJson(sendMail)
				if(responseJSON.data){
					echo "successfully sent e-mail to $email_id"
				} else {
					echo "exception occured while sending e-mail: $responseJSON"
				}
   	} catch (e){
       echo "Failed while sending build status notification"
   	}
}

def updateServiceInDB(service, domain, serviceUrl,status) {

	def updateJson = ''

	if(status) {
		updateJson = "{ \"status\": \"$status\" }"

		echo "new json $updateJson"

		def serviceUpdateUrl = "$serviceUrl/$service_id?isAdmin=true"

		def serviceUpdateOutput = sh (script: "curl --silent -X PUT $serviceUpdateUrl \
					-H \"accept: application/json\" \
					-H \"Content-Type: application/json\" \
					-H \"Authorization: $g_login_token\"  \
					-d \'${updateJson}\'", returnStdout:true)

		echo "service update result: $serviceUpdateOutput"
	}
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/*
* Load environment variables from build module
*/
def loadConfigModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
	}
}

/**
 * Load metadata module groovy file
 *
 */
def loadServiceMetadataModule(buildURL) {
		try {						
			echo "loading serviceMetaData, checking repos"

			dir('service-metadata') {
				checkout([$class: 'GitSCM', branches: [
					[name: '*/master']
				], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
					[credentialsId: env.REPO_CREDENTIAL_ID, url: buildURL]
				]])
				serviceMetadata = load "service-metadata-loader.groovy"			
				serviceMetadata.setAuthToken(setCredentials())

				// Load and set dependent utility module.
				echo "loading util module"
				Util = load "utility-loader.groovy"
				serviceMetadata.setUtil(Util)
				return serviceMetadata 
			}
		
		}catch(ex) {
			error "loadServiceMetadataModule Failed. "+ex.getMessage()
		}
}