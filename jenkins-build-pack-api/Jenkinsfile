#!groovy
import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core

@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def apigeeModule
@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def serviceConfigdata
@Field def events
@Field def serviceMetadataLoader
@Field def utilModule
@Field def awsAPIGatewayModule
@Field def awsLambdaModule
@Field def environmentDeploymentMetadata

@Field def auth_token = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def g_base_url = ''
@Field def environment_logical_id = ''
@Field def g_base_url_for_swagger = ''
@Field def current_environment

node() {
	def jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModules(jazzBuildModuleURL)

	def jazz_prod_api_id = utilModule.getAPIIdForCore(configLoader.AWS.API["PROD"])
	g_base_url = "https://${jazz_prod_api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	g_base_url_for_swagger = "http://editor.swagger.io/?url=http://${configLoader.AWS.S3.API_DOC}.s3-website-${configLoader.AWS.REGION}.amazonaws.com/"

    echo "Build triggered via branch: " + params.scm_branch

   	def branch = params.scm_branch
	def repo_name = params.service_name
	def gitCommitOwner
	def gitCommitHash
	def context_map


	if (domain && domain != "") {
		repo_name = params.domain + "_" + params.service_name
	}

	def config
	def domain = params.domain

    stage('Checkout code base') {
		sh 'rm -rf ' + repo_name
		sh 'mkdir ' + repo_name

		def repocloneUrl
		if (domain && domain == "jazz") {
			repocloneUrl = scmModule.getCoreRepoCloneUrl(repo_name)
		} else {
			auth_token = setCredentials()
			repocloneUrl = scmModule.getRepoCloneUrl(repo_name)
		}

		dir(repo_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: repocloneUrl]]])
		}

		// @TODO: dir can be removed, needs to be refactored
		def configObj = dir(repo_name)
		{
			return LoadConfiguration()
		}

		if (configObj.service_id) {
			config = serviceMetadataLoader.loadServiceMetadata(configObj.service_id)
		} else {
			error "Service Id is not available."
		}
	}

	if(!config){
		error "Failed to fetch service metadata from catalog"
	}

	dir(repo_name)
	{
		scmModule.setServiceConfig(config)
		def envApi = "${g_base_url}/jazz/environments"
		environmentDeploymentMetadata.initialize(config, configLoader, scmModule, branch, env.BUILD_URL, env.BUILD_ID, envApi, auth_token)
		gitCommitHash = scmModule.getRepoCommitHash()
		gitCommitOwner = scmModule.getRepoCommitterInfo(gitCommitHash)
		context_map = [created_by : config['created_by'], deployed_by: gitCommitOwner]


		if (branch == 'master') {
			environment_logical_id = 'prod'
			current_environment = 'prod'
		} else {
			environment_logical_id = environmentDeploymentMetadata.getEnvironmentLogicalId();
			current_environment = 'dev'
		}

		if (!environment_logical_id && config['domain'] != 'jazz') {
			error "The environment has not been created yet and its missing the environment id"
		}

		if (!events) { error "Can't load events module"	} //Fail here
		def eventsApi = "${g_base_url}/jazz/events"
		events.initialize(configLoader, config, "SERVICE_DEPLOYMENT", branch, environment_logical_id, eventsApi)

		domain = config['domain']
		def runtime = config['providerRuntime']
		def service = config['service']

		def stackName = "${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}-${environment_logical_id}"

		def internalAccess = config['require_internal_access']
		def roleARN = configLoader.AWS.ROLEID.replaceAll("/", "\\\\/")

		// @TODO: the below statement will be replaced with regular expression in very near future;
		def roleId = roleARN.substring(roleARN.indexOf("::") + 2, roleARN.lastIndexOf(":"))



		loadServerlessConfig(config)

		if (domain && domain == "jazz") {
			stage('Update Service Template'){
				echo "Inside Update service template"
				try {
					updatePlatformServiceTemplate(config, roleARN, roleId, current_environment, repo_name)
				}
				catch (error) {
					error "Error occured while updating service template."
				}
			}
		}



		def requestId = utilModule.generateRequestId()
		if (requestId != null) {
			events.setRequestId(requestId)
			environmentDeploymentMetadata.setRequestId(requestId)
		} else {
			error "Request Id Generation failed"
		}
		events.sendStartedEvent('CREATE_DEPLOYMENT', 'Service deployment workflow started', environmentDeploymentMetadata.generateDeploymentMap("started", environment_logical_id, gitCommitHash), environment_logical_id)

		stage('Pre-Build Validation') {
			try {
				events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation started', context_map, environment_logical_id)
				send_status_email(config, 'STARTED', "")
				validateDeploymentConfigurations(config)
				validateSwaggerSpec();
			} catch (ex) {
				events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage(), context_map, environment_logical_id)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), context_map, environment_logical_id)
				error ex.getMessage()
			}
			events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation completed', context_map, environment_logical_id)
		}

		stage('Build') {
			try {
				events.sendStartedEvent('BUILD', 'build starts', context_map, environment_logical_id)
				buildLambda(runtime)
			} catch (ex) {
				events.sendFailureEvent('BUILD', ex.getMessage(), context_map, environment_logical_id)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), context_map, environment_logical_id)
				error ex.getMessage()
			}
			events.sendCompletedEvent('BUILD', 'build completed', context_map, environment_logical_id)
		}

		def env_key
		if (branch == "master") {
			env_key = "PROD"
		} else {
			env_key = "DEV"
		}
		stage("Deployment to ${env_key} environment") {
			events.sendStartedEvent('DEPLOY_TO_AWS', 'Deployment started to staging AWS environment', context_map, environment_logical_id)
			events.sendStartedEvent('UPDATE_ENVIRONMENT', 'Environment status update event for staging deployment', environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment_logical_id), environment_logical_id)

			echo "starts Deployment to ${env_key} Env"
			def endpointUrl = null
			def api_deployment_target
			try {

				// resetting env endpoint url
				environmentDeploymentMetadata.setEnvironmentEndpoint(endpointUrl)
				events.sendStartedEvent('UPDATE_ENVIRONMENT', 'Environment status update event for staging deployment', environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment_logical_id), environment_logical_id)
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					echo "AWS Configure ......."
					sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
					sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
					sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

					// Generate serverless yml file with domain added in function name
					echo "Generate deployment env with domain for ${env_key}"

					writeServerlessFile(config, environment_logical_id)

					setLambdaExecutionRole(configLoader.AWS.ROLEID);

					echo "serverless deploy......."
					def envBucketKey = "${env_key}${configLoader.JAZZ.S3_BUCKET_NAME_SUFFIX}"
					sh "serverless deploy --stage ${environment_logical_id} -v --bucket ${configLoader.AWS.S3[envBucketKey]}"

					if (fileExists('swagger/swagger.json')) {
						echo "Generating swagger file for environment: ${env_key}"

						addOperationId('swagger/swagger.json');

						api_deployment_target = config.deployment_targets.api;

						echo "Deploying to API Gateway environment.."
						def apiHostName

						switch (api_deployment_target) {
							case 'aws_apigateway':
								events.sendStartedEvent('DEPLOY_TO_AWS_APIGATEWAY', 'Deployment started for API Gateway', context_map, environment_logical_id)
								def api_id = utilModule.getAPIId(configLoader.AWS.API[env_key], config)
								echo "API ID: $api_id"
								apiHostName ="${api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com"
								awsAPIGatewayModule.addApigatewayLambdaIntegration('swagger/swagger.json');
								updateSwagger(apiHostName, environment_logical_id, current_environment, env_key, config)

								sh "aws apigateway put-rest-api --rest-api-id ${api_id} --mode merge --parameters basepath=prepend --body 'file://swagger/swagger.json'"+ " --profile cloud-api"
								sh "aws apigateway create-deployment --rest-api-id ${api_id} --stage-name ${current_environment} --profile cloud-api"
								sh "aws apigateway tag-resource --resource-arn arn:aws:apigateway:${configLoader.AWS.REGION}::/restapis/${api_id}/stages/${current_environment} --tags Application=Jazz,JazzInstance=${configLoader.INSTANCE_PREFIX}  --profile cloud-api"
								if (current_environment == 'prod' || config['domain'] == 'jazz') {
									endpointUrl = "https://${apiHostName}/${current_environment}/${config['domain']}/${config['service']}"
								} else {
									endpointUrl = "https://${apiHostName}/${current_environment}/${environment_logical_id}/${config['domain']}/${config['service']}"
								}
								events.sendCompletedEvent('DEPLOY_TO_AWS_APIGATEWAY', 'Deployment completed for API Gateway', context_map, environment_logical_id)
								break;

							case 'gcp_apigee':
								events.sendStartedEvent('DEPLOY_TO_GCP_APIGEE', 'Deployment started for APIGEE', context_map, environment_logical_id)
								def arn = awsLambdaModule.getLambdaARN(stackName)
								apiHostName ="${configLoader.APIGEE.API_ENDPOINTS[env_key].service_hostname}"
								updateSwagger(apiHostName, environment_logical_id, current_environment, env_key, config)
								endpointUrl = apigeeModule.deploy("${pwd()}/swagger/swagger.json", arn, env_key, environment_logical_id, config, context_map)
								echo "API Proxy created at: ${endpointUrl}"
								events.sendCompletedEvent('DEPLOY_TO_GCP_APIGEE', 'Deployment complete for APIGEE', context_map, environment_logical_id)
								break;
							default:
								error "Deployment targets are not defined"
						}

						if (domain != "jazz") {
							createSubscriptionFilters(stackName, configLoader.AWS.REGION, roleId);
						}

						updateApiDocUrl(current_environment)
						sh "aws s3 cp swagger/ s3://${configLoader.AWS.S3.API_DOC}/${domain}/${config['service']}/${environment_logical_id} --recursive "
						echo "completed deployment........."

						def svc_status  = "Your service endpoint for ${current_environment} environment: ${endpointUrl} \n\nView and test your API here: ${g_base_url_for_swagger}${domain}/${service}/${environment_logical_id}/swagger.json"

						send_status_email(config, 'COMPLETED', svc_status)
					}

					if (domain && domain == "jazz") {
						serviceConfigdata.setLogStreamPermission(config)
					}
                }
			} catch (ex) {
				if(api_deployment_target == 'aws_apigateway') {
					events.sendFailureEvent('DEPLOY_TO_AWS_APIGATEWAY', ex.getMessage(), context_map, environment_logical_id)
				} else if(api_deployment_target == 'gcp_apigee') {
					events.sendFailureEvent('DEPLOY_TO_GCP_APIGEE', ex.getMessage(), context_map, environment_logical_id)
				}
				events.sendFailureEvent('UPDATE_ENVIRONMENT', ex.getMessage(), environmentDeploymentMetadata.generateEnvironmentMap("deployment_failed", environment_logical_id), environment_logical_id)
				events.sendFailureEvent('UPDATE_DEPLOYMENT', ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment_logical_id, gitCommitHash), environment_logical_id)
				events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map, environment_logical_id)
				error ex.getMessage()
			}
			environmentDeploymentMetadata.setEnvironmentEndpoint(endpointUrl)
			def serviceContext = [created_by : config['created_by'], deployed_by: gitCommitOwner]
			events.sendCompletedEvent('UPDATE_ENVIRONMENT', 'Environment Update event for deployment completion', environmentDeploymentMetadata.generateEnvironmentMap("deployment_completed", environment_logical_id), environment_logical_id)
			events.sendCompletedEvent('UPDATE_DEPLOYMENT', 'Deployment completion Event for stage deployment', environmentDeploymentMetadata.generateDeploymentMap("successful", environment_logical_id, gitCommitHash), environment_logical_id)
			events.sendCompletedEvent('DEPLOY_TO_AWS', 'successfully deployed services to AWS', serviceContext, environment_logical_id)
		}//stage to prod ends here

	}//dir ends here
}

def updateSwagger(apiHostName, environment_logical_id, current_environment, env_key, config) {
	echo "API Host Name: $apiHostName"
	generateSwaggerEnv(environment_logical_id, "${configLoader.INSTANCE_PREFIX}-${current_environment}", apiHostName, config)
	if (env_key.equals("DEV") && config['domain'] != 'jazz') {
		updateStageForDev(environment_logical_id)
	}
}

/**
	Update context stage to use the dev properties file.
*/
def updateStageForDev(environment) {
	sh "sed -i -- 's#basePath\": \"/#basePath\": \"/$environment/#g' swagger/swagger.json"
}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}

def LoadConfiguration() {
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def prop = [: ]
	def resultList = result.tokenize("\n")

    // delete commented lines
    def cleanedList = []
    for (i in resultList) {
        if (i.toLowerCase().startsWith("#")) { } else {
            cleanedList.add(i)
        }
    }
    // echo "result of yaml parsing after clean up....$cleanedList"
    for (item in cleanedList) {
        // Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
        //handle empty values
        def value = null;
        if (eachItemList[1]) {
            value = eachItemList[1].trim();
        }

        if (eachItemList[0]) {
            prop.put(eachItemList[0].trim(), value)
        }

    }
	echo "Loaded configurations....$prop"
	return prop
}


/**
	Build project based on runtime
*/
def buildLambda(runtime) {
    echo "installing dependencies for $runtime"
    if (runtime.indexOf("nodejs") > -1) {
        sh "npm install --save"
    } else if (runtime.indexOf("java") > -1) {
        sh "mvn package"
    } else if (runtime.indexOf("python") > -1) {
        // install requirements.txt in library folder, these python modules
        // will be a part of deployment package
        sh "pip install -r requirements.txt -t library"

        // create virtual environment and install dev-requirements
        sh """
        pip install virtualenv
        virtualenv venv
		. venv/bin/activate
        pip install pytest
        """
    }
}


/**
	Generate the swagger file specific to each environment
*/
def generateSwaggerEnv(env, deploymentNode, apiHostName, config) {
    sh "sed -i -- 's/{lambdaFunctionName}/${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}-${env}/g' swagger/swagger.json"
    sh "sed -i -- 's/{apiDeploymentNodeTitle}/${deploymentNode}/g' swagger/swagger.json" // {api_deployment_node_title}
    sh "sed -i -- 's/{serviceName}/${config['service']}/g' swagger/swagger.json" // {service_name}
    sh "sed -i -- 's/{apiHostName}/${apiHostName}/g' swagger/swagger.json" // {api_host_name}
    sh "sed -i -- 's/{domain}/${config['domain']}/g' swagger/swagger.json" // {domain}
	sh "sed -i -- 's/{envPrefix}/${configLoader.INSTANCE_PREFIX}/g' swagger/swagger.json" // {domain}
	sh "sed -i -- 's/{envmnt}/${current_environment}/g' swagger/swagger.json" // {environment}
	def roleARN = configLoader.AWS.ROLEID.replaceAll("/", "\\\\/")

	// TODO: the below couple of statements will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::") + 2, roleARN.lastIndexOf(":"))

	sh "sed -i -- 's/{confRole}/${roleARN}/g' ./swagger/swagger.json"
	sh "sed -i -- 's/{confRegion}/${configLoader.AWS.REGION}/g' ./swagger/swagger.json"
	sh "sed -i -- 's/{confAccId}/${roleId}/g' ./swagger/swagger.json"
}

/* method to read the file and add operation id */
def addOperationId(filePath) {
	try {
		def swaggerFileContent = readFile(filePath).trim()
		def swaggerJson = updateOperationId(swaggerFileContent)
		writeFile file: filePath, text: swaggerJson
	} catch(ex) {
		echo "Error adding operation id"
		error "Error occured " + ex.getMessage()
	}
}

/* method to add operation id */
def updateOperationId(swaggerFileContent) {
	echo "Parsing the swagger file"
	def httpVerbs = ['get', 'post', 'delete', 'put', 'connect', 'head', 'options', 'patch', 'trace'];
	def slurper = new groovy.json.JsonSlurper()
	def inputJSON = slurper.parseText(swaggerFileContent)
	def pathKeys = inputJSON.paths.keySet()

	for (key in pathKeys) {
		def pathMethods = inputJSON.paths[key].keySet()
		for (method in pathMethods) {
			def path = inputJSON.paths[key]

			def foundMethod = httpVerbs.find { element -> element == method }
			if (foundMethod != null) {
				echo "Adding operation id for method $foundMethod"
				if (path[foundMethod].operationId) {
					if (path[foundMethod].operationId == "{operationId}") {
						path[foundMethod].operationId = key.substring(1) + "_" + foundMethod
					}
				} else {
					path[foundMethod] << [operationId: key.substring(1) + "_" + foundMethod]
				}
			}
		}
	}

	def builder = new groovy.json.JsonBuilder(inputJSON)
	def swaggerJson = builder.toPrettyString()

	return swaggerJson
}

def writeServerlessFile(config, environment_logical_id){
	sh "sed -i -- 's/\${file(deployment-env.yml):service}/${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}/g' serverless.yml"
	sh "sed -i -- 's/{env-stage}/${environment_logical_id}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/${config['region']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/${config['domain']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/${config['created_by']}/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|${config['iamRoleARN']}|g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/${config['providerRuntime']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/${config['providerMemorySize']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/${config['providerTimeout']}/g' serverless.yml"
	sh "sed -i -- 's|\${file(deployment-env.yml):eventScheduleRate}|${config['eventScheduleRate']}|g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleEnable}/${config['eventScheduleEnable']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/${config['securityGroupIds']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/${config['subnetIds'] }/g' serverless.yml"

	if (config['artifact']) {
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/${config['artifact']}/g' serverless.yml"
	}
	if (config['mainClass']) {
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/${config['mainClass']}/g' serverless.yml"
	}

}

/**
	Set the Lambda execution role. If user provided a custom role override the default.
*/
def setLambdaExecutionRole(role) {
	sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#${role}#g' serverless.yml"
}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {

    if (prop.containsKey("service")) {
        if (prop['service'] == "") {
            error "Wrong configuration. Value for Key 'service' is missing in the configuration"
        }

    } else {
        error "Wrong configuration. Key 'service' is missing in the configuration"
    }

    if (prop.containsKey("providerRuntime")) {
        def _runtime = prop['providerRuntime']
        if (_runtime == "") {
            error "Wrong configuration. Value for Key 'providerRuntime' is missing in the configuration"

        } else {
            def validRuntimes = ["nodejs4.3", "nodejs6.10", "python2.7", "java8"] //@TODO. Add more runtime supports. DSundar3
            def flag = false
            for (int i = 0; i < validRuntimes.size(); i++) {
                if (_runtime == validRuntimes[i]) {
                    flag = true
                }
            }

            if (!flag) {
                echo "$flag"
                error "Runtime given in the configuration is not valid."
            }
        }

    } else {
        error "Wrong configuration. Key 'providerRuntime' is missing in the configuration"
    }

    if (prop.containsKey("providerTimeout")) {
        if (prop['providerTimeout'] == "") {
            error "Wrong configuration. Value for Key 'providerTimeout' is missing in the configuration"
        } else if (Integer.parseInt(prop['providerTimeout']) > 300) { // Should not be a high
            error "Wrong configuration. Value for Key 'providerTimeout' should be a less than 160"
        }

    } else {
        error "Wrong configuration. Key 'providerTimeout' is missing in the configuration"
    }


    def runtime = prop['providerRuntime']
    if (runtime.indexOf("java") > -1) {

        if (prop.containsKey("artifact")) {
            if (prop['artifact'] == "") {
                error "Wrong configuration. Value for Key 'artifact' is missing in the configuration"
            }

        } else {
            error "Wrong configuration. Key 'artifact' is missing in the configuration"
        }

        if (prop.containsKey("mainClass")) {
            if (prop['mainClass'] == "") {
                error "Wrong configuration. Value for Key 'mainClass' is missing in the configuration"
            }
        } else {
            error "Wrong configuration. Key 'mainClass' is missing in the configuration"
        }
    }

}

def addVpcDetails() {
    echo "addVpcdetails to serverless.yml file"
    sh "sed -i -- 's/vpcDisabled/vpc/g' ./serverless.yml"
}

def loadServerlessConfig(config) {
    dir('_config') {
		def configPackURL = scmModule.getCoreRepoCloneUrl("serverless-config-pack")

		checkout([$class: 'GitSCM', branches: [
            [name: '*/master']
        ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: configPackURL]

			]])
    }

    if (config['providerRuntime'].indexOf("nodejs") > -1) {
        sh "cp _config/serverless-nodejs.yml ./serverless.yml"
    } else if (config['providerRuntime'].indexOf("java") > -1) {
        sh "cp _config/serverless-java.yml ./serverless.yml"
    } else if (config['providerRuntime'].indexOf("python") > -1) {
        sh "cp _config/serverless-python.yml ./serverless.yml"
    }

	if ((config['service'] == 'cloud-logs-streamer' || config['service'] == 'logs') && config['domain'] == 'jazz') {
		//addVpcDetails()
	}


	echoServerlessFile()
}

/**
	Pre-build validation of swagger api specifications
**/
def validateSwaggerSpec() {

}

def validateSwaggerFile(service, domain, apiHostName){
    if (fileExists('swagger/swagger.json')) {
        def swaggerFile = readFile('swagger/swagger.json').trim()
        echo "after reading swagger file/....."
        def slurper = new groovy.json.JsonSlurper()
        def inputJSON = slurper.parseText(swaggerFile)
        def swagger_host = inputJSON.host
        def swagger_service = inputJSON.paths.keySet() as List
        def swagger_domain = inputJSON.basePath
        assert swagger_domain == ~ "/" + domain
        assert swagger_service[0] == "/" + service

    }
    sh "sed -i -- 's/host\": \"[^\"]*\"/host\": \"" + apiHostName + "\"/g' swagger/swagger.json"
}

/**
	Update the Api doc host url to include env in the path
**/
def updateApiDocUrl(String env) {
	sh "sed -i -- 's#basePath\": \"/#basePath\": \"/$env/#g' swagger/swagger.json"
	sh "sed -i -- 's#basePath\": \"/$env/\"#basePath\": \"/$env\"#g' swagger/swagger.json"
}

/**
	Create the subscription filters and loggroup if not existing
**/
def createSubscriptionFilters(stackName, region, roleId) {
	def lambda = "/aws/lambda/${stackName}"
	def logStreamer = "arn:aws:lambda:${configLoader.AWS.REGION}:${roleId}:function:${configLoader.INSTANCE_PREFIX}-jazz-cloud-logs-streamer-prod"
	try {
		sh "aws logs create-log-group --log-group-name ${lambda} --region ${region}"
	} catch (Exception ex) { }// ignore if already existing

	try {
		filter_json = sh(
			script: "aws logs describe-subscription-filters --output json --log-group-name \"${lambda}\" --region ${region}",
			returnStdout: true
		).trim()
		echo "${filter_json}"
		def resultJson = parseJson(filter_json)
        filtername = resultJson.subscriptionFilters[0].filterName
		echo "removing existing filter... $filtername"
		if (filtername != "" && !filtername.equals(lambda)) {
			sh "aws logs delete-subscription-filter --output json --log-group-name \"${lambda}\"  --filter-name \"${filtername}\" --region ${region}"
		}
	} catch (Exception ex) { }// ignore error if not created yet

	try {
		sh "aws logs put-subscription-filter --output json --log-group-name \"${lambda}\" --filter-name \"${lambda}\" --filter-pattern \"\" --destination-arn \"${logStreamer}\" --region ${region}"
	} catch (Exception ex) {
		echo "error occured: " + ex.getMessage()
	}
}



/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
def setCredentials() {
	def loginUrl = g_base_url + '/jazz/login'
	def token
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			token = sh(script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = parseJson(token)
			tokenJson_token = tokenJson.data.token

			return tokenJson_token
		}
		catch (e) {
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (config, build_status, email_content) {
	if (domain != "jazz") {
		echo "Sending build notification to ${config['created_by']}"
		def body_subject = ''
		def body_text = ''
		def cc_email = ''
		def body_html = ''
		if (build_status == 'STARTED') {
			echo "email status started"
			body_subject = 'Jazz Build Notification: Deployment STARTED for service: ' + config['service']
		} else if (build_status == 'FAILED') {
			echo "email status failed"
			def build_url = env.BUILD_URL + 'console'
			body_subject = 'Jazz Build Notification: Deployment FAILED for service: ' + config['service']
			body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
		} else if (build_status == 'COMPLETED') {
			body_subject = 'Jazz Build Notification: Deployment COMPLETED successfully for service: ' + config['service']
		} else {
			echo "Unsupported build status, nothing to email.."
			return
		}
		if (email_content != '') {
			body_text = body_text + '\n\n' + email_content
		}
		def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
		body = JsonOutput.toJson([
			from : fromStr,
			to : config['created_by'],
			subject : body_subject,
			text : body_text,
			cc : cc_email,
			html : body_html
		])

		try {
			def sendMail = sh(script: "curl -X POST \
					${g_base_url}/jazz/email \
					-k -v -H \"Authorization: $auth_token\" \
					-H \"Content-Type: application/json\" \
					-d \'${body}\'", returnStdout: true).trim()
			def responseJSON = parseJson(sendMail)
			if (responseJSON.data) {
				echo "successfully sent e-mail to ${config['created_by']}"
			} else {
				echo "exception occured while sending e-mail: $responseJSON"
			}
		} catch (e) {
			echo "Failed while sending build status notification"
		}
	}
}

def updatePlatformServiceTemplate(config, roleARN, roleId, environment_logical_id, repo_name)	{
	echo "loadServerlessConfig......."
	def jenkinsURL = JenkinsLocationConfiguration.get().getUrl().replaceAll("/", "\\\\/")
	serviceConfigdata.initialize(configLoader, roleARN, config['region'], roleId, jenkinsURL, environment_logical_id, repo_name, utilModule)
	serviceConfigdata.loadServiceConfigurationData()
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
		// right now only bitbucket has this additional tag scm in its git clone path
		return "http://${repo_base}/${repo_core}/jazz-build-module.git"
    } else {
		return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    }
}

/*
* Load build modules
*/

def loadBuildModules(buildModuleUrl){

	dir('build_modules') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		echo "config loader loaded successfully."

		awsAPIGatewayModule = load "aws-apigateway-module.groovy"
		awsAPIGatewayModule.initialize()
		echo "AWS APIGateway module loaded successfully."

		awsLambdaModule = load "aws-lambda-module.groovy"
		echo "AWS Lambda module loaded successfully."

		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)
		echo "SCM module loaded successfully."

		serviceConfigdata = load "service-configuration-data-loader.groovy"
		echo "Service configuration module loaded successfully."

		events = load "events-module.groovy"
		echo "Event module loaded successfully."

		serviceMetadataLoader = load "service-metadata-loader.groovy"
		serviceMetadataLoader.initialize(configLoader)
		echo "Service metadata loader module loaded successfully."

		utilModule = load "utility-loader.groovy"
		echo "Util module loaded successfully."

		environmentDeploymentMetadata = load "environment-deployment-metadata-loader.groovy"
		echo "Environment deployment data loader module loaded successfully."

		if (configLoader.APIGEE && configLoader.APIGEE.ENABLED) {			
			apigeeModule = load "apigee-module.groovy"
			apigeeModule.initialize(configLoader.APIGEE, events)
			echo "Apigee module loaded successfully."
		}
	}
}
