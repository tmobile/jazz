#!groovy.
import groovy.json.JsonOutput
import java.text.SimpleDateFormat
import groovy.transform.Field

/**Process** of service-onboarding-build-pack
-identify service type
-identify runtime
-checkout template
-make change to service-name in deployment-env.yml
-create repo
-add remote to git
-git push template to git
*/

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

//definitions
def Event_Name = [
	'VALIDATE_INPUT': 'VALIDATE_INPUT',
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'BUILD_MASTER_BRANCH':'BUILD_MASTER_BRANCH',
	'COMMIT_CODE':'COMMIT_CODE',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE'
]
def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]
@Field def configModule
@Field def configLoader
@Field def scmModule

@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def auth_token = ''
@Field def g_base_url = ''

node  {
	jazzBuildModuleURL = getBuildModuleUrl()
	loadConfigModule(jazzBuildModuleURL)
	loadSCMModule(jazzBuildModuleURL)

	g_base_url = "https://${configLoader.AWS.API.PROD_ID}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	
	auth_token = getAuthToken()

	def service_type =  params.service_type
	def runtime = params.runtime
	def service_name = params.service_name
	def admin_group = "admin_group"
	def repo_name = params.service_name
	def rateExpression
	def enableEventSchedule
	if (params.rateExpression){
		rateExpression = params.rateExpression
	}
	if (params.enableEventSchedule){
		enableEventSchedule = params.enableEventSchedule
	}

	def service_template
	def service_username
	def service_password
	def domain = params.domain
	def owner = ""
	if (params.username) {
		owner = params.username
	}	

	echo "Starting new service on-boarding .. with params : $params"

	if(params.domain && params.domain.trim() != ""){
		repo_name = params.domain.trim() + "_" + service_name
		domain = params.domain.trim()
	}

	stage('Input Validation')
	{
		sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.STARTED, "")

		if(service_name == "" ) {
			send_status_email (owner, "FAILED", service_name, domain)
			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid Service Name")
			error "Invalid Service Name"
		}

		if(admin_group == "" ) {
			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid Admin Group")
			//error "Invalid Admin Group"
		}

		if(service_type == "api" || service_type == "lambda" || service_type == "function" || service_type == "website" ) {
			if(runtime == "nodejs" || runtime  == "python" || runtime == "java" || runtime == "" ) {

				switch (service_type) {

					case "api":
						if(runtime == "nodejs" )
						{
							service_template = "api-template-nodejs"
						}
						else if (runtime == "python")
						{
							service_template = 'api-template-python'
						}
						else if (runtime == "java")
						{
							service_template = 'api-template-java'
						}
						break

					case "lambda":
					case "function":
						if(runtime == "nodejs" )
						{
							service_template = "lambda-template-nodejs"
						}
						else if (runtime == "python")
						{
							service_template = 'lambda-template-python'
						}
						else if (runtime == "java")
						{
							service_template = 'lambda-template-java'
						}
						break

					case "website":
						service_template = 'static-website-template'
						runtime = 'n/a'
						break

				}
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.COMPLETED, "")

			}else {
				send_status_email (owner, "FAILED", service_name, domain)
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid runtime")
				error "Invalid runtime"
			}

		}else {
			send_status_email (owner, "FAILED", service_name, domain)
			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid Service Type")
			error "Invalid Service Type"
		}
	}

	def service_id_in_db = "";

	stage ('Get Service Template')
	{
		try{
			sh 'rm -rf *'
			sh 'rm -rf .*'
		}
		catch(error){
			//do nothing
		}

		try{
			sh 'mkdir ' + service_template
			dir(service_template)
			{
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getTemplateUrl(service_template)]]])

				config = LoadConfiguration()

				echo "Calling add row in db ###################################################"

				def description = ' ';

				if (params.description) {
					description = params.description;
				}

				def serviceMetadataJson = [
											"runtime":runtime,
											"type":service_type]
				for(item in config){					
					serviceMetadataJson[item.key] = item.value					
				}
				
				serviceMetadataJson["service"] = service_name
				serviceMetadataJson["domain"] = domain
				serviceMetadataJson["owner"] = owner
				serviceMetadataJson["securityGroupIds"] = configLoader.AWS.SECURITY_GROUP_IDS
				serviceMetadataJson["subnetIds"] = configLoader.AWS.SUBNET_IDS
				serviceMetadataJson["region"] = configLoader.AWS.REGION 
				serviceMetadataJson["iamRoleARN"] = configLoader.AWS.ROLEID
								
				def slack_channelName = params.slack_channel
				if(slack_channelName && slack_channelName.trim() != ""){
					serviceMetadataJson["slack_channel"] = slack_channelName
				}

				if(service_type == 'website') {
					def create_cloudfront_url = 'true'
					if(create_cloudfront_url){
						serviceMetadataJson["create_cloudfront_url"] = create_cloudfront_url
					}
				}

				if(service_type == 'lambda'|| service_type == 'function') {
					def rate_expression = rateExpression//params.rateExpression
					def enable_eventschedule = enableEventSchedule//params.enableEventSchedule
					def event_source_ec2 =  params.event_source_ec2
					def event_source_s3 =  params.event_source_s3
					def event_source_dynamodb =  params.event_source_dynamodb
					def event_source_stream =  params.event_source_stream
					def event_action_ec2 =  params.event_action_ec2
					def event_action_s3 =  params.event_action_s3
					def event_action_dynamodb =  params.event_action_dynamodb
					def event_action_stream =  params.event_action_stream

					if(rate_expression && rate_expression.trim() != ""){
						serviceMetadataJson["eventScheduleRate"] = cron(rate_expression)
					}
					if(enable_eventschedule && enable_eventschedule != ""){
						serviceMetadataJson["eventScheduleEnable"] = enable_eventschedule
					}
					if(event_source_ec2 && event_action_ec2){
						serviceMetadataJson["event_action_ec2"] = event_source_ec2
						serviceMetadataJson["event_action_ec2"] = event_action_ec2
					}
					if(event_source_s3 && event_action_s3){
						serviceMetadataJson["event_source_s3"] = event_source_s3
						serviceMetadataJson["event_action_s3"] = event_action_s3
					}
					if(event_source_dynamodb && event_action_dynamodb){
						serviceMetadataJson["event_source_dynamodb"] = event_source_dynamodb
						serviceMetadataJson["event_action_dynamodb"] = event_action_dynamodb
					}
					if(event_source_stream && event_action_stream){
						serviceMetadataJson["event_source_stream"] = event_source_stream
						serviceMetadataJson["event_action_stream"] = event_action_stream
					}
				}

				def repo_url = scmModule.getRepoUrl(repo_name)

				service_id_in_db = createServiceInDB(service_name, domain, owner, runtime, repo_url, description, admin_group, service_type, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION,serviceMetadataJson);
				
				updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_started");
			}
		}
		catch(error){
			updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");
			//do nothing
		}
	}

	stage ('Update Service Template')
	{
		sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")
		try{

			dir(service_template)
			{
				//Clearing depoyment-env.yml
				sh "echo -n > ./deployment-env.yml"
				// Add service_id  in deployment-env.yml
				sh "echo 'service_id: $service_id_in_db' >> ./deployment-env.yml"
				
				sh "sed -i -- 's/{service_name}/" + service_name + "/g' ./Jenkinsfile"
				sh "sed -i -- 's/{domain}/" + domain + "/g' ./Jenkinsfile"
				
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.COMPLETED, "")
			}
		}
		catch(error){
			updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");

			send_status_email (owner, "FAILED", service_name, domain)

			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.FAILED, error.getMessage())
			echo error
		}
	}

	stage ('Uploading templates to code repository')
	{
		sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.CREATE_SERVICE_REPO, Event_Status.STARTED,"")
		dir(service_template)
		{
			try{
				scmModule.createProject(owner, repo_name)
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.CREATE_SERVICE_REPO, Event_Status.COMPLETED,"")
			}
			catch (error)
			{
				updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");

				send_status_email (owner, "FAILED", service_name, domain)

				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.CREATE_SERVICE_REPO, Event_Status.FAILED, error.getMessage())
				echo error
			}
		}

		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: repo_credential_id, passwordVariable: 'PWD1', usernameVariable: 'UNAME']]) {
			def encoded_password = URLEncoder.encode(PWD1, "utf-8")
			
			def repo_clone_base_url = scmModule.getRepoCloneBaseUrl(repo_name)
			def repo_protocol = scmModule.getRepoProtocol()
          
			sh "git config --global user.email \"" + configLoader.JAZZ.ADMIN + "\""
			sh "git config --global user.name $UNAME"
         	sh "git clone ${repo_protocol}$UNAME:$encoded_password@${repo_clone_base_url}"
		}
		try{
			sh "mv -nf " + service_template + "/* " + repo_name + "/"
			sh "mv -nf " + service_template + "/.* " + repo_name + "/"
		}
		catch (error)
		{
			//do nothing
		}


		dir (repo_name)
		{
			sh "ls -lart"

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: repo_credential_id, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WEBHOOK, Event_Status.STARTED, "")
				try{
					def scm_webhook_target_url
					if(configLoader.SCM.TYPE == "gitlab"){
						scm_webhook_target_url 	= "http://${configLoader.JENKINS.USERNAME}:${configLoader.JENKINS.JENKINS_PASSWORD}@${JenkinsLocationConfiguration.get().getUrl().split('/')[2]}/project/Gitlab-Trigger-Job"
					}else if(configLoader.SCM.TYPE == "bitbucket"){
						scm_webhook_target_url 	= JenkinsLocationConfiguration.get().getUrl()+"/bitbucket-scmsource-hook/notify"
					}
					scmModule.addWebhook(repo_name, "notify-jenkins",scm_webhook_target_url)
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WEBHOOK, Event_Status.COMPLETED, "")
				}
				catch(error){
					updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");
					send_status_email (owner, "FAILED", service_name, domain)

					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WEBHOOK, Event_Status.FAILED, error.getMessage())
					echo error
				}
				
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.PUSH_TEMPLATE_TO_SERVICE_REPO, Event_Status.STARTED, "")
				try{
					sh "git add --all"
					sh "git commit -m 'Code from the standard template'"
					sh "git remote -v"
					sh "git push -u origin master "

					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.PUSH_TEMPLATE_TO_SERVICE_REPO, Event_Status.COMPLETED, "")
				}
				catch (error)
				{
					updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");
					send_status_email (owner, "FAILED", service_name, domain)

					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.PUSH_TEMPLATE_TO_SERVICE_REPO, Event_Status.FAILED, error.getMessage())
					echo error
				}

				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO, Event_Status.STARTED, "")
				try{
					scmModule.setRepoPermissions(owner, repo_name, admin_group)
					
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO, Event_Status.COMPLETED, "")
				}
				catch(error){
					updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO, Event_Status.FAILED, error.getMessage())
					echo error
				}

				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.LOCK_MASTER_BRANCH, Event_Status.STARTED, "")
				try{
					scmModule.setBranchPermissions(repo_name)
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.LOCK_MASTER_BRANCH, Event_Status.COMPLETED, "")
				}
				catch(error){
					updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_failed");

					send_status_email (owner, "FAILED", service_name, domain)

					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.LOCK_MASTER_BRANCH, Event_Status.FAILED, error.getMessage())
					echo error
				}				

				echo "Calling update row in db ###################################################"
				updateServiceInDB(service_id_in_db, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "creation_completed");
			}
		}
	}
}
/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def getAuthToken() {

	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {

		def loginUrl = g_base_url + "/jazz/login"
		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			def token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = jsonParse(token)
			tokenJson_token = tokenJson.data.token

			return tokenJson_token
		}
		catch(e){
			error "error occured: " + e.getMessage()
		}
	}

 }

def sendEvent(service_type, service_name, domain, runtime, admin_group, event_name, event_status, error){
	echo "send event" + error
}

def updateServiceInDB(service_id_in_db, apiId, region, statusval) {
  sh "curl -H \"Content-Type: application/json\" -H \"Authorization: ${auth_token}\" -X PUT -k -v -d '{ \"status\": \"${statusval}\"}' https://${apiId}.execute-api.${region}.amazonaws.com/prod/jazz/services/${service_id_in_db}/"
}

def createServiceInDB(service_name, domain, created_by, runtime, repo_url, desc, approver, servicetype, apiID, region,serviceMetadataJson) {

	try {
		
		def body = JsonOutput.toJson([
			service:service_name,
			status:"creation_started",
			domain:domain,
			type:servicetype,
			created_by:created_by,
			runtime:runtime,
			repository:repo_url,
			description:desc,
			metadata:serviceMetadataJson
		])
		
		def outputStr = sh (
			script: "curl -H \"Content-Type: application/json\" -H \"Authorization: ${auth_token} \" -X POST -k -v -d '$body' https://${apiID}.execute-api.${region}.amazonaws.com/prod/jazz/services/",
			returnStdout: true
		).trim()
		echo "outputStr===============" + outputStr
		def jsonParser = new groovy.json.JsonSlurper()
		def resultJson = jsonParser.parseText(outputStr)
		if(resultJson == null || resultJson.data == null || resultJson.data.service_id == null) {
			error "jazz/services/ Insert failed"
		}
		return resultJson.data.service_id;
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			//events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage())
			error "createServiceInDB Failed. "+ex.getMessage()
		} else {
			//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
		}
	}

}

def LoadConfiguration() {
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def prop = [: ]
	def resultList = result.tokenize("\n")

    // delete commented lines
    def cleanedList = []
    for (i in resultList) {
        if (i.toLowerCase().startsWith("#")) {} else {
            cleanedList.add(i)
        }
    }
    // echo "result of yaml parsing after clean up....$cleanedList"
    for (item in cleanedList) {
        // Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
        //handle empty values
        def value = null;
        if (eachItemList[1]) {
            value = eachItemList[1].trim();
        }

        if (eachItemList[0]) {
            prop.put(eachItemList[0].trim(), value)
        }

    }
	echo "Loaded configurations....$prop"
	return prop	
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (email_id, build_status, service, domain) {
   	echo "Sending build notification to " + email_id
	def body_subject = ''
	def body_text = ''
	def cc_email = ''
	def body_html = ''
   	
	if (build_status == 'STARTED') {
		echo "email status started"
		body_subject = 'Jazz Build Notification: Creation STARTED for service: ' + service
   	} else if (build_status == 'FAILED') {
		echo "email status failed"
		def build_url = env.BUILD_URL + 'console'
		body_subject = 'Jazz Build Notification: Creation FAILED for service: ' + service
		body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
   	} else if (build_status == 'COMPLETED'){
        	body_subject = 'Jazz Build Notification: Creation COMPLETED successfully for service: ' + service
   	} else {
        	echo "Unsupported build status, nothing to email.."
        	return
   	}
   	
	if (domain != ''){
		domain = 'For Service: ' + service + ' in Domain: ' + domain
        	body_text = body_text + '\n\n' + domain
	}
	
	def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
	body = JsonOutput.toJson([
					from : fromStr,
					to : email_id,
					subject : body_subject,
					text : body_text,
					cc : cc_email,
					html : body_html
			    ])

   	try{
		def sendMail = sh (script: "curl -X POST \
						${g_base_url}/jazz/email \
						-k -v -H \"Authorization: $g_login_token\" \
						-H \"Content-Type: application/json\" \
						-d \'${body}\'", returnStdout: true).trim()
		def responseJSON = parseJson(sendMail)

		if(responseJSON.data){
			echo "successfully sent e-mail to $email_id"
		} else {
			echo "exception occured while sending e-mail: $responseJSON"
		}
   	} catch (e){
       	echo "Failed while sending build status notification"
   	}
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/*
* Load environment variables from build module
*/
def loadConfigModule(buildModuleUrl){
	echo "loading env variables, checking repos..."

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		echo "loading installer variables..."

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		echo "finished loading env module"
	}
}

/*
load scm module
*/
def loadSCMModule(buildModuleUrl){

	try {	
		dir('scm-loader') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

			scmModule = load "scm-module.groovy"
			scmModule.initialize(configLoader)
		}
	}catch(ex) {
		error "loadSCMModule failed " + ex.toString()
	}
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
      // right now only bitbucket has this additional tag scm in its git clone path
      return "http://${repo_base}/${repo_core}/jazz-build-module.git" 
    }else {
      return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    } 
} 
@NonCPS
def jsonParse(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}