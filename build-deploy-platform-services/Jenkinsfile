#!groovy
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def configModule
@Field def configLoader
@Field def var_api_key
@Field def var_api_id_dev
@Field def var_aws_credential_id
@Field def var_env_name_prefix
@Field def var_repo_core
@Field def var_repo_loc
@Field def var_credentialsId
@Field def var_bitbucket_base
@Field def var_bitbucket_email
@Field def var_bitbucket_username
@Field def var_bitbucket_password
@Field def var_user_pool_id
@Field def var_client_id

//build-deploy-platform-services jenkinsfile

def Event_Name =[
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'CALL_ONBOARDING_WORKFLOW':'CALL_ONBOARDING_WORKFLOW',
	'RAISE_PR':'RAISE_PR',
	'VALIDATE_INPUT':'VALIDATE_INPUT',
	'CALL_ONBOARDING_SERVICE':'CALL_ONBOARDING_SERVICE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'CREATE_SERVICE':'CREATE_SERVICE',
	'BUILD':'BUILD',
	'CODE_QUALITY_CHECK':'CODE_QUALITY_CHECK',
	'UNIT_TEST':'UNIT_TEST',
	'COMMIT_CODE':'COMMIT_CODE',
	'APPROVE_PR':'APPROVE_PR',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'DEPLOY_TO_AWS':'DEPLOY_TO_AWS',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE',
	'CREATE_ASSET':'CREATE_ASSET',
	'UPDATE_ASSET':'UPDATE_ASSET'
]

def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]

node {

	echo "params : $params"
	def jazzBuildModuleURL = "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
	loadConfigModule(jazzBuildModuleURL)
	var_api_key 				= configLoader.API.API_KEY
	var_api_id_dev = configLoader.API.API_ID_DEV
	var_aws_credential_id = configLoader.AWS_CREDENTIAL_ID
	var_env_name_prefix = configLoader.env_name_prefix
	var_repo_core = configLoader.REPOSITORY.REPO_CORE
	var_repo_loc = configLoader.REPOSITORY.REPO_LOC
	var_credentialsId 			= configLoader.REPOSITORY.REPO_CREDENTIAL_ID
	var_bitbucket_base			= configLoader.REPOSITORY.REPO_BASE
	var_bitbucket_email 		= configLoader.REPOSITORY.REPO_EMAIL
	var_bitbucket_username = configLoader.BITBUCKET.BITBUCKET_USERNAME
	var_bitbucket_password = configLoader.BITBUCKET.BITBUCKET_PASSWORD
	var_user_pool_id = configLoader.COGNITO.USER_POOL_ID
	var_client_id = configLoader.COGNITO.CLIENT_ID

	def service_template = ""
	def service_type =  "api"
	def runtime = "nodejs"
	def service_name = ""
	def admin_group = ""
	def bitbucket_name = ""
	def domain = "platform"
	def region = ""
	def envmnt = 'prod'
	def var_bitbucket_framework_url = "http://" + var_bitbucket_base + "/scm/" + var_repo_core + "/"
	def configPackBBURL = "http://" + var_bitbucket_base + "/scm/" + var_repo_core + "/serverless-config-pack.git"
	def es_hostname = configLoader.JAZZ.jazz_es_hostname

	if(params.service_name){
		service_template = params.service_name
		service_name = params.service_name
		bitbucket_name = service_template
	}
	if(params.admin_group){
		admin_group = params.admin_group
	}

	if(params.region){
		region = params.region
	}

	if(params.domain && params.domain.trim() != ""){
		bitbucket_name = params.domain.trim() + "-" + service_name
		domain = params.domain.trim()
	}

	if(params.scm_branch){
		if (params.scm_branch == 'master') {
			envmnt = 'prod'
			var_api_key = configLoader.API.API_ID_PROD
		}else {
			envmnt = 'dev'
			var_api_key = configLoader.API.API_ID_DEV
		}
	}

	stage ('Get Serverless Service')
	{
		try{
			sh 'rm -rf ' + bitbucket_name + '*'
		}
		catch(error){
			//do nothing
		}

		try{
			sh 'mkdir ' + bitbucket_name
			dir(bitbucket_name)
			{
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: var_credentialsId, url: var_bitbucket_framework_url + service_template + '.git']]])
			}
		}
		catch(error){
			//do nothing
		}

	}

	// Need to be refactored
	def config = dir(bitbucket_name)
	{
	    return LoadConfiguration()
	}

	def roleARN						= config['iamRoleARN'].replaceAll("/", "\\\\/")
    service_name					= config['service']

	// @TODO : the below couple of statements will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

	stage ('Update Service Template')
	{
	    // @TODO : Send Event feature coming soon
		//sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")
		sendEvent(service_type, service_name, runtime, "NA", region, domain, roleARN, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")
		echo "Inside Update service template"

		try{

			dir(bitbucket_name)
			{
				echo "loadServerlessConfig......."
				loadServerlessConfig(runtime, configPackBBURL)

				def jenkinsURL = JenkinsLocationConfiguration.get().getUrl().replaceAll("/", "\\\\/")

				region = config['region']

				def var_api_host_name			= var_api_key+".execute-api."+region+".amazonaws.com"

				serviceConfigdata = loadServiceConfigurationDataModule(jazzBuildModuleURL,configLoader,roleARN, region, roleId, jenkinsURL, envmnt,es_hostname, var_bitbucket_base,service_template)
				serviceConfigdata.loadServiceConfigurationData()


			}
		}
		catch(error){
		    // @TODO : Send Event feature coming soon
			//sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.FAILED, error.getMessage())
			// @TODO : Send Event feature coming soon
			sendEvent(service_type, service_name, runtime, "NA", region, domain, roleARN, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, error.getMessage())
			echo(error)
		}
	}


	stage('Deployment to ' + envmnt + '  Env') {
		// @TODO : Send Event feature coming soon
		sendEvent(service_type, service_name, runtime, "NA", region, domain, roleARN, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")

		// Generate serverless yml file with domain added in function name
		echo "Generate deployment env with domain"


		withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
		sh "aws configure set profile.cloud-api.region "+region
		sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
		sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

		sh "serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY"

		dir(bitbucket_name)
		{
			echo "NPM Build initiated"
			sh "npm install --save"
			echo "NPM Build completed"

			//Change lambda service name to add stack prefix name
			sh "sed -i -- 's/" + service_name + "/" + var_env_name_prefix + "-" + service_name + "/g' ./deployment-env.yml"

			echo "Deploying lambda service"

			def envBucketKey = configLoader.JAZZ_S3.jazz_bucket_name_prefix + envmnt

			sh "serverless deploy --stage " + envmnt + " -v --bucket "  + env[envBucketKey]
			echo "Deployed lambda service"

			// Generate swagger file based on environment
			if (fileExists('swagger/swagger.json')) {
				echo "Generating the swagger file for each environment"
				def apiHostName	= var_api_key+".execute-api."+region+".amazonaws.com" //Development environment

				generateSwaggerEnv(service_name, envmnt, var_env_name_prefix+"-"+envmnt, apiHostName, domain, service_name, var_env_name_prefix)

				// import swagger api spec
				echo "Deploying API gateway Endpoints"
				sh "aws apigateway put-rest-api --rest-api-id "+var_api_key+" --mode merge --body 'file://swagger/swagger.json'"+" --profile cloud-api"
				sh "aws apigateway create-deployment --rest-api-id "+var_api_key+" --stage-name "+envmnt+" --profile cloud-api"

			}

			echo "completed deployment........."
			if (service_template.trim() == "cloud-logs-streamer") {
				echo "set permission for cloud-logs-streamer"
				try {
					def rd = sh(script: "openssl rand -hex 4", returnStdout:true).trim()

					 sh "aws lambda add-permission --function-name arn:aws:lambda:" + region + ":" + roleId + ":function:" + var_env_name_prefix + "-cloud-logs-streamer-" + envmnt + " --statement-id lambdaFxnPermission${rd} --action lambda:* --principal logs." + region + ".amazonaws.com --region " + region
					 echo "set permission for cloud-logs-streamer - success"
				 }catch(ss) {
					//ignore if already registered permissions
					echo(ss)
					 echo "set permission for cloud-logs-streamer - ok np"
				 }
			}

			if ( (service_template.trim() == "platform-services-handler") ) {
				def function_name =  var_env_name_prefix + "-hndlr-"+ envmnt
				def event_source_list = sh (
					script: "aws lambda list-event-source-mappings --query \"EventSourceMappings[?contains(FunctionArn, '$function_name')]\" --region \"$region\"" ,
					returnStdout: true
				).trim()
				echo "$event_source_list"
				if (event_source_list == "[]"){
					sh "aws lambda  create-event-source-mapping --event-source-arn arn:aws:kinesis:$region:$roleId:stream/" + var_env_name_prefix + "-events-hub-" + envmnt + " --function-name arn:aws:lambda:$region:$roleId:function:$function_name --starting-position LATEST --region " + region
				}
			}


			// @TODO : Resetting the credentials needs to be introduced. (Re-use of same profile on Async calls needs to be considered)
			// resetCredentials();

			// @TODO : Send Event feature coming soon
			sendEvent(service_type, service_name, runtime, "NA", region, domain, roleARN, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")
		}
	    }

    }

}

def generateSwaggerEnv(service, env, deploymentNode, apiHostName, domain, serviceName, env_name_prefix) {
    sh "sed -i -- 's/{lambda_function_name}/" +env_name_prefix + "-" + serviceName + "-" + env + "/g' swagger/swagger.json"
    sh "sed -i -- 's/{api_deployment_node_title}/" + deploymentNode + "/g' swagger/swagger.json" // {api_deployment_node_title}
    sh "sed -i -- 's/{service_name}/" + service + "/g' swagger/swagger.json" // {service_name}
    sh "sed -i -- 's/{api_host_name}/" + apiHostName + "/g' swagger/swagger.json" // {api_host_name}
    sh "sed -i -- 's/{domain}/" + domain + "/g' swagger/swagger.json" // {domain}
    sh "sed -i -- 's/{envPrefix}/" + env_name_prefix + "/g' swagger/swagger.json" // {domain}
	sh "sed -i -- 's/{envmnt}/" + env + "/g' swagger/swagger.json" // {environment}
}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}


/**
	Reads deployment-env.yml.
    Returns Property Map
*/
def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
		}
		def newItem = ["subnetIds", ""]
	for (item in cleanedList) {

		// Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");

		def eachItemList = item.tokenize("#")
		//handle empty values
		def value = "";
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}
		if(eachItemList[0].trim() == "securityGroupIds")
		{

			if(value.indexOf('"') == -1)
				value = "\"" + value + "\""

			echo value
		}

		if(eachItemList[0].trim() == "subnetIds1" || eachItemList[0].trim()  == "subnetIds2" || eachItemList[0].trim()  == "subnetIds3")
		{
			if(newItem[1].trim()  == "")
				newItem[1] = "\""  + eachItemList[1].trim()

			else
				newItem[1] =  newItem[1].trim()  + "," + eachItemList[1].trim()

		}
		else if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}

	}
	if(newItem[1] != "")
	{
	 newItem[1] =  newItem[1].trim()  + "\""
		prop.put(newItem[0].trim(),  newItem[1].trim())
		def key = newItem[0].trim()
		def val = newItem[1].trim()
	}
	echo "Loaded configurations...$prop"
	return prop
}

def loadServerlessConfig(String runtime, String configPackBBURL) {

    dir('_config') {
        checkout([$class: 'GitSCM', branches: [
            [name: '*/master']
        ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
            [credentialsId: var_credentialsId, url: configPackBBURL]
        ]])
    }

    if (runtime.indexOf("nodejs") > -1) {
        sh "cp _config/serverless-nodejs.yml ./serverless.yml"
    } else if (runtime.indexOf("java") > -1) {
        sh "cp _config/serverless-java.yml ./serverless.yml"
    } else if (runtime.indexOf("python") > -1) {
        sh "cp _config/serverless-python.yml ./serverless.yml"
    }

}


def sendEvent(service_name, branch, runtime, environment, region, domain, iam_role, event_name, event_status, error){

	echo "Send Event Called: "+error
}

/*
* Load environment variables from build module
*/
def loadConfigModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
	}
}


/**
 * Load service config data module groovy file
 *
 */
def loadServiceConfigurationDataModule(buildURL,configLoader,role_arn, region, role_id, jenkins_url, envmnt, es_hostname, bitbucket_base, service_name){
		try {

			def api_id_dev = configLoader.API.API_ID_DEV
			def api_id_stg = configLoader.API.API_ID_STG
			def api_id_prod = configLoader.API.API_ID_PROD
			def user_pool_id = configLoader.COGNITO.USER_POOL_ID
			def client_id = configLoader.COGNITO.CLIENT_ID
			def env_name_prefix = configLoader.env_name_prefix
			def repo_base = configLoader.REPOSITORY.REPO_BASE
			def bitbucket_username = configLoader.BITBUCKET.BITBUCKET_USERNAME
			def bitbucket_password = configLoader.BITBUCKET.BITBUCKET_PASSWORD


			echo "loading Service Config Data, checking repos"

			dir('_service_configdata') {
				checkout([$class: 'GitSCM', branches: [
					[name: '*/master']
				], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
					[credentialsId: repo_credential_id, url: buildURL]
				]])
				serviceConfigdata = load "service-configuration-data-loader.groovy"
				serviceConfigdata.initialize(role_arn, region, role_id, jenkins_url, api_id_dev, api_id_stg, api_id_prod, envmnt,user_pool_id,
												env_name_prefix, client_id, repo_base, es_hostname, bitbucket_base, bitbucket_username, bitbucket_password,service_name)


			}

			return serviceConfigdata

		}catch(ex) {
			error "loadServiceConfigurationDataModule Failed. "+ex.getMessage()
		}
}
