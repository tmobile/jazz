#!groovy
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" except for config_loader
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def config_loader

/*
* Load environment variables from build module
*/
def loadConfigModule(build_module_url){
  dir('config-loader') {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: build_module_url]]])
    def result_json_string = readFile("jazz-installer-vars.json")
    config_module = load "config-loader.groovy"
    config_loader = config_module.initialize(result_json_string)
  }
}

/*
* Start the Pipeline stages
*/
node {
  stage('Loading Config-Loader') {
    loadConfigModule(getBuildModuleUrl())
  }

  stage('Triggering the Jenkins build') {
    build job: "${config_loader.JENKINS.BUILD_URI.API}", parameters: [string(name: 'service_name', value: 'usermanagement'), string(name: 'domain', value: 'jazz'), string(name: 'scm_branch', value: "${env.BRANCH_NAME}")], wait: false
  }
}

def getBuildModuleUrl() {
  if (scm_type && scm_type != "bitbucket") {
    // right now only bitbucket has this additional tag scm in its git clone path
    return "http://${repo_base}/${repo_core}/jazz-build-module.git"
  } else {
    return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
  }
} 