#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" except for config_loader. env_name_prefix, jazz_bucket_web to be taken from the config_loader.
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def config_loader
@Field def env_name_prefix
@Field def jazz_bucket_web

/*
* Load environment variables from build module
*/
def load_config_module(build_module_url){
  echo "loading environment variables, checking repos..."

  dir('config-loader') {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: build_module_url]]])
    echo "loading installer variables..."
    def result_json_string = readFile("jazz-installer-vars.json")
    config_module = load "config-loader.groovy"
    config_loader = config_module.initialize(result_json_string)
    echo "Finished loading environment module"
  }
}

/*
* Get CloudFront DistID
*/
def get_cloudfront_ID(env_name_prefix) {
  try {
    def cf_list_dists = sh (script: "aws  cloudfront list-distributions --query \"DistributionList.Items[?Origins.Items[?Id=='$env_name_prefix-originid']].{Id: Id}\" --output json" , returnStdout: true).trim()
    echo "cf_list_dists is: $cf_list_dists"
    def config_parser = new groovy.json.JsonSlurper()
    def cf_dists = config_parser.parseText(cf_list_dists)
    return cf_dists[0].Id
  }catch(ex) {
    error "Failed while get_cloudfront_ID " + ex.toString()
    return null;
  }
}

/*
* Invalidate CloudFront
*/
def invalidate_cloudfront(cf_id) {
  try {
  //Using Jenkins build ID to form a unique callerReference
    def caller_reference = "JazzWeb_"+ env.BUILD_ID
    def invalidate_config= "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$caller_reference\"}"
    def invalidate_status = sh (script: "aws cloudfront create-invalidation --distribution-id $cf_id --invalidation-batch '$invalidate_config' --output json" , returnStdout: true).trim()
    echo "Invalidated Cloud Front Cache:$invalidate_status"
  }catch(ex) {
    error "Failed while invalidate_cloudfront " + ex.toString()
  }
}

/*
* Start the Pipeline stages
*/
node ()  {
  stage('Loading Config-Loader') {
    build_module_url = "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    load_config_module(build_module_url)
  }
  stage('Assigning variables for this build') {
    env_name_prefix = config_loader.env_name_prefix
    jazz_bucket_web = config_loader.JAZZ_S3.jazz_bucket_web
    credentials_id = config_loader.REPOSITORY.REPO_CREDENTIAL_ID
    scm_base_url = config_loader.REPOSITORY.REPO_BASE
    jazz_ui_repourl = 'http://' + scm_base_url + '/scm/slf/jazz-ui.git'
  }
  stage('Checking out Jazz-UI repo') {
    dir('jazz-ui') {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentials_id, url: jazz_ui_repourl]]])
    }
  }
  stage('Building the UI - NPM build') {
    sh '''
    #Generate build file from jazz-ui
    npm update
    cd jazz-ui
    rm -rf node_modules
    npm install
    ng set --global warnings.versionMismatch=false
    ng build --prod --aot=false
    cd ..
    '''
  }
  stage('Getting CloudFront DistID') {
    cf_id = get_cloudfront_ID(env_name_prefix)
    echo "$cf_id"
  }
  stage('Copying generated NPM build files to Jazz-Web S3 bucket') {
    sh '''
    aws s3 ls ${jazz_bucket_web}
    aws s3 cp jazz-ui/dist s3://${jazz_bucket_web} --recursive --include "*"
    aws s3 ls ${jazz_bucket_web}
    '''
  }
  stage('Invalidating CloudFront') {
    invalidate_cloudfront(cf_id)
  }
}
