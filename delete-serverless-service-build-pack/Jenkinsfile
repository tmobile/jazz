#!groovy.
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

/**
 * The Service delete workflow for service types: API, function & website
*/
@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def events
@Field def utilModule
@Field def serviceMetadataLoader
@Field def environmentMetadataLoader

@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def auth_token = ''
@Field def service_config
@Field def context_map = [:]

node {
	echo "Starting delete service job with params : $params"

	jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModules(jazzBuildModuleURL)

	def jazz_prod_api_id = utilModule.getAPIIdForCore(configLoader.AWS.API["PROD"])
	g_base_url = "https://${jazz_prod_api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"


	
	def version
	def repo_name
	def tracking_id
	def cloudfrontEnabled
	def flowType	
	def service_id = params.db_service_id
	def environmentIds = []
	def is_service_deletion = true;
	
	
	if(params.version){
		version = params.version.trim()
	}

	if(params.tracking_id){
		tracking_id = params.tracking_id.trim()
	}

	if(params.environment_id){
		environment_id = params.environment_id 
		environmentIds.push(environment_id.trim())
		is_service_deletion = false
	}	

	auth_token = setCredentials()

	stage("Initialization") {

		if(service_id){	
			service_config = serviceMetadataLoader.loadServiceMetadata(service_id)
		}else{
			error "Service Id is not available."
		}

		environmentMetadataLoader.initialize(service_config['service'],  service_config['domain'], null, null, null,  g_base_url)
		environmentMetadataLoader.setAuthToken(auth_token)
	
		if(!events) { error "Can't load events module"	} //Fail here
		events.initialize(configLoader,service_config,"SERVICE_DELETION","","",g_base_url + "/jazz/events")

		repo_name = service_config['domain'] + "_" + service_config['service']
		context_map = [created_by : service_config['created_by']]

		checkoutSCM(repo_name)
		events.sendStartedEvent("CALL_DELETE_WORKFLOW", 'deletion starts', context_map)

		dir(repo_name){
			echo "loadServerlessConfig......."

			if (fileExists('build.api')) {
				flowType = "API"				
				loadServerlessConfig()				
				updateSwaggerConfig()
			} else if(fileExists('build.lambda')) {
				flowType = "LAMBDA"				
				loadServerlessConfig()
			} else if(fileExists('build.website')) {
				flowType = "WEBSITE"				
				if(service_config['create_cloudfront_url']) {
					cloudfrontEnabled = service_config['create_cloudfront_url'].trim()
				}else {
					cloudfrontEnabled = "false"
				}
			} else {
				error "Invalid project configuration"
			}
		}
	}


	dir(repo_name){
		switch (flowType) {
			case "API":
				stage('Undeploy Service') {
					updateServiceNameConfig()
					def path = getResourcePath()
					for (_envId in environmentIds){
						try{
							def endpoint_type = ServiceMetadata.getEndpointType()
							echo "Endpoint Type: $endpoint_type"
							def branch = environmentMetadataLoader.getEnvironmentBranchName(_envId)
							if(branch && branch != 'NA'){
								events.setBranch(branch)
								branch = 'NA'
							}
							events.sendStartedEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" started", null, _envId)
							echo 'undeploying service for environment: ' + _envId
							
							cleanUpApiGatewayResources(_envId, path)
							cleanUpApiDocs(_envId)
							unDeployService(_envId)
							events.sendCompletedEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" completed", null, _envId)
						} catch (ex){
							echo "Environment Deletion failed for envId: $_envId . Error Details:" + ex
							events.sendFailureEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" failed! "+ ex.getMessage(), null, _envId)
						}
					}
				}
				break

			case "LAMBDA":
				stage('Undeploy Service') {
					updateServiceNameConfig()

					for (_envId in environmentIds){
						try{
							def branch = environmentMetadataLoader.getEnvironmentBranchName(_envId)
							if(branch && branch != 'NA'){
								events.setBranch(branch)
								branch = 'NA'
							}
							events.sendStartedEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" started", null, _envId)
							echo 'undeploying function for environment: '+ _envId
							unDeployService(_envId)
							events.sendCompletedEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" completed", null, _envId)
						} catch (ex){
							events.sendFailureEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" failed! "+ ex.getMessage(), null, _envId)
						}
				}	
				}
				break

			case "WEBSITE":
				stage('Undeploy Website') {
					for (_envId in environmentIds){
						try {
							def branch = environmentMetadataLoader.getEnvironmentBranchName(_envId)
							if(branch && branch != 'NA'){
								events.setBranch(branch)
								branch = 'NA'
							}
							events.sendStartedEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" started", null, _envId)
							if (cloudfrontEnabled == "true") {
								cleanupCloudFrontDistribution(service_name, domain, _envId)
							}
							unDeployWebsite( _envId)
							events.sendCompletedEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" completed", null, _envId)
						} catch (ex){
							echo "error occured when Deleting  Environment: " + ex
							events.sendFailureEvent('DELETE_ENVIRONMENT', "Environment cleanup for "+ _envId +" failed! "+ ex.getMessage(), null, _envId)
						}
					}

				}
				break
		}
	}

	if(is_service_deletion){
		stage('Cleanup SCM') {
			cleanup(repo_name)
			events.sendCompletedEvent('DELETE_PROJECT', 'deletion completed', context_map)
		}
	}
	
}

/**
 * Calls the serverless remove to undeploy the lambda service
 * @param  stage
 * @return
 */
def unDeployService(stage) {
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			if(getStage(environment).equals('dev')){
				//Resetting the S3 bucket name to 'dev' if it has logicalId
				setDeploymentBucketName('\${opt:stage}', getStage(environment))
				sh "serverless remove --stage "+ environment +" --verbose"
				//Resetting the S3 bucket name back to default 
				setDeploymentBucketName(getStage(environment), '\${opt:stage}')
			} else {
				sh "serverless remove --stage "+ environment +" --verbose"
			}
			//sh "serverless remove --stage ${stage} --verbose --bucket " + getServiceBucket(stage)
			echo "Service undeployed"
		}catch(ex) {
			events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
			send_status_email ("FAILED")
			error ex.getMessage()
		}
	}
}

/**
 * Checkout Code
 * @param  repo_name
 * @return
 */
def checkoutSCM(repo_name) {
	dir(repo_name)
	{
		def repo_url = scmModule.getRepoCloneUrl(repo_name)
		try {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: repo_url]
			]])
		}catch(ex) {
			send_status_email ("FAILED")
			events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
			error "checkoutSCM Failed. "+ex.getMessage()
		}
	}
}

/**
 * Update the service name in serverless service_config file
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateServiceNameConfig() {
	sh "rm serverless.yml"
	sh "cp serverless-temp.yml serverless.yml"	
	try {
		sh "sed -i -- 's/\${file(deployment-env.yml):service}/${configLoader.INSTANCE_PREFIX}-${service_config['domain']}-${service_config['service']}/g' serverless.yml"
		sh "sed -i -- 's/name: \${self:service}/name: ${configLoader.INSTANCE_PREFIX}-${service_config['domain']}-${service_config['service']}/g' serverless.yml"
		writeServerlessFile()
	}catch(ex) {
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		send_status_email ("FAILED")
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

def writeServerlessFile(){
	sh "pwd"
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/${configLoader.AWS.REGION}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/${service_config['domain']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/${service_config['created_by']}/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|${service_config['iamRoleARN']}|g' serverless.yml" 	
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/${service_config['providerRuntime']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/${service_config['providerMemorySize']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/${service_config['providerTimeout']}/g' serverless.yml"
	sh "sed -i -- 's|\${file(deployment-env.yml):eventScheduleRate}|${service_config['eventScheduleRate']}|g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleEnable}/${service_config['eventScheduleEnable']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/${service_config['securityGroupIds']}/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/${service_config['subnetIds']}/g' serverless.yml"
	
	if(service_config['artifact']){
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/${service_config['artifact']}/g' serverless.yml"
	}
	if(service_config['mainClass']){
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/${service_config['mainClass']}/g' serverless.yml"
	}
}

/**
 * Replace the service name & Domain place holders in swagger file.
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateSwaggerConfig() {
	try {
		if (fileExists('swagger/swagger.json')) {
			sh "sed -i -- 's/{service_name}/${service_config['service']}/g' swagger/swagger.json"
			sh "sed -i -- 's/{domain}/${service_config['domain']}/g' swagger/swagger.json"

			def region = "${configLoader.AWS.REGION}"
			def role = "${configLoader.AWS.ROLEID}"
			def roleARN = role.replaceAll("/", "\\\\/")
			
			// TODO: the below couple of statements will be replaced with regular expression in very near future;
			def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

			sh "sed -i -- 's/{conf-role}/${roleARN}/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-region}/${region}/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-accId}/${roleId}/g' ./swagger/swagger.json"
		}
	}catch(ex) {
		send_status_email ("FAILED")
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}


/**
 * Cleans up the project repository from SCM as well as update the database and send corresponding status email
 * @param  repoName
 * @return
 */
def cleanup(repoName) {
	
	try {
		scmModule.deleteProject(repoName)
		send_status_email ("COMPLETED")
	} catch (ex) {
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		send_status_email ("FAILED")
		error "deleteProject failed. "+ex.getMessage()
	}
}

/**
 * Clean up the API gateway resource configurations specific to the service
 * @param  stage environment
 * @param  path the resource path
 * @return
 */
def cleanUpApiGatewayResources(stage, path) {
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			
			def resource_id = null
			try {
				def outputStr = sh (
					script: "aws apigateway get-resources --rest-api-id ${getApiId(stage)} --region ${configLoader.AWS.REGION} --output json" ,
					returnStdout: true
				).trim()

				def list = parseJson(outputStr)
				for (items in list["items"]) {
					if(items["path"] == path) {
						resource_id = items["id"]
					}
				}
			} catch(ex) {
				send_status_email ("FAILED")
				events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
				error "findResourceId Failed"+ex.getMessage()
			}
			if(resource_id != null && resource_id != ""){
				def status_json = sh (
					script: "aws apigateway delete-resource --rest-api-id ${getApiId(stage)}  --region ${configLoader.AWS.REGION} --resource-id ${resource_id} --output json" ,
					returnStdout: true
				).trim()
				def deployment_status_json = sh (
					script: "aws apigateway create-deployment --rest-api-id ${getApiId(stage)}  --region ${configLoader.AWS.REGION} --stage-name ${stage} --description 'API deployment after resource clean up' --output json" ,
					returnStdout: true
				).trim()
			} else {
				echo "Resource Id does not exists in API gateway."
			}
		} catch(ex) {
			send_status_email ("FAILED")
			events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
			error ex.getMessage()
		}
	}
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getServiceBucket(stage) {
	if(stage == 'dev') {
		return configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
	}else if (stage == 'stg') {
		return configLoader.JAZZ.S3.WEBSITE_STG_BUCKET;
	} else if (stage == 'prod') {
		return configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	}
}


/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getApiId(stage) {
    echo "stage: $stage"
  	if(stage == 'dev') {
		return utilModule.getAPIIdForCore(configLoader.AWS.API["DEV"])
	}else if (stage == 'stg') {
		return utilModule.getAPIIdForCore(configLoader.AWS.API["STG"])
	} else if (stage == 'prod') {
		return utilModule.getAPIIdForCore(configLoader.AWS.API["PROD"])
	}
}

/**
 * Clean up the API documentation folder from S3 corresponding to the environment
 * @param  stage the environment
 * @return  api Id
 */
def cleanUpApiDocs(stage) {
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			def apiRootFolder = getApiDocsFolder(stage)
			sh "aws s3 rm s3://${apiRootFolder}/${service_config['domain']}/${service_config['service']}/${stage} --recursive"
		} catch(ex) {
			send_status_email ("FAILED")
			events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
			error "cleanUpApiDocs Failed. "+ex.getMessage()
		}
	}
}

/**
 * Get the API docs folder for environment
 * @param stage environment
 * @return  folder name
 */
def getApiDocsFolder(stage) {
	return configLoader.AWS.S3.API_DOC
}

/**
 * Get the environment key
 * @param stage environment
 * @return  environment key to be represented in the event
 */
def getEnvKey(stage) {
	if(stage == 'dev') {
		return "DEV"
	}else if (stage == 'stg') {
		return "STG"
	} else if (stage == 'prod') {
		return "PROD"
	}
}

/**
 * Get the resource Path from domain and service name.
 * @return  formed resource path string
 */
def getResourcePath() {
	def basePath
	def pathInfo
	def resourcepath
	try {
		dir("swagger") {
			def swaggerStr = readFile('swagger.json').trim()
			def swaggerJsonObj = parseJson(swaggerStr)
			basePath = swaggerJsonObj.basePath
			def keys = swaggerJsonObj.paths.keySet()
			for (_p in keys) {
				pathInfo = _p
				break
			}
		}
		resourcepath = (basePath+"/"+pathInfo).replaceAll("//","/")
		return resourcepath
	} catch(ex) {
		send_status_email ("FAILED")
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		error "getResourcePath Failed. "+ex.getMessage()
	}
}

/**
 * Undeploy the website. Delete the web folder from S3 bucket
 * @param stage
 * @return
 */
 def unDeployWebsite(stage) {
 	echo "unDeployWebsite::${service_config['service']}::${['domain']} ${['stage']}"

 	withCredentials([
 		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
 	]) {
 		try {
 			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
 			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
 			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
 			sh "aws configure set preview.cloudfront true"
 			def bucketName = utilModule.getBucket(stage)
 			def bucketUrl = "${bucketName}/${service_config['domain']}-${service_config['service']}"
 			def _exists = checkIfWebsiteExists(bucketUrl)
 			if(_exists) {
 				sh "aws s3 rm s3://${bucketUrl} --recursive"
 				cleanupS3BucketPolicy(stage, bucketName)
 			}
 		} catch(ex) {
 			send_status_email ("FAILED")
			events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
 			error ex.getMessage()
 		}
	}
}

/**
 * Check if the website folder existing in the S3 buckets for each environments
 * @param stage
 * @return  true/false
 */
def checkIfWebsiteExists(bucketUrl) {
	def status = true;
	try {
		sh "aws s3 ls s3://${bucketUrl}"
	}catch(ex) {
		echo "Bucket does not exist"
		status = false
	}
	return status
}

/**
 * Delete the the bucket policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupS3BucketPolicy(stage, bucket) {
	echo "cleanupS3BucketPolicy called"

	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"
			def folderName = "${service_config['domain']}-${service_config['service']}" 
			def bucketPolicy = sh (
				script: "aws s3api get-bucket-policy --bucket ${bucket} --output json",
				returnStdout: true
			).trim()
			def policyObject = parseJson(parseJson(bucketPolicy).Policy)
			def policyObjectUpdated = [:]
			policyObjectUpdated.Version = policyObject.Version
			policyObjectUpdated.Id = policyObject.Id
			def statements = []
			def resourcePattern = "${bucket}/${folderName}/"
			for (items in policyObject.Statement) {
				if(items.Sid != folderName || !(items.Resource.indexOf(resourcePattern) > -1)) {
					def copy = [:]
					copy.putAll(items)
					statements.add(copy)
				}
			}
			policyObjectUpdated.Statement = statements
			def policy_json = JsonOutput.toJson(policyObjectUpdated)
			//def bucketName = bucket
			updateBucketPolicy(policy_json, bucket)
            resetCredentials()
		} catch(ex) {
            resetCredentials()
			if(ex.getMessage().indexOf("groovy.json.internal.LazyMap") < 0) {
				send_status_email ("FAILED")
				events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
				error "cleanupS3BucketPolicy Failed. "+ex.getMessage()
			}
		}
	}
}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}

@NonCPS
def updateBucketPolicy(policy_json, bucketName){
	try {
		sh "aws s3api put-bucket-policy \
				--output json \
				--bucket "+bucketName+" \
				--policy \'${policy_json}\'"
	} catch(e) {
		send_status_email ("FAILED")
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		error e.getMessage()
	}
}
/**
 * Delete the the cloud Front policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupCloudFrontDistribution(stage) {
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def distributionID
			def _Etag

			distributionID = getDistributionId(stage)

			if (distributionID && distributionID != "")
			{
				def distributionConfig = getDistributionConfig(distributionID)
				_Etag = generateDistributionConfigForDisable(distributionConfig)
				_Etag = disableCloudFrontDistribution(distributionID, _Etag, "disable-cf-distribution-config.json", stage)
			}
		} catch(ex) {
			if((ex.getMessage()).indexOf("getDistributionId Failed") > -1) {
				echo "Could not find a CloudFront distribution Id for service: ${service_config['service']} and environment $stage"
			} else {
				send_status_email ("FAILED")
				events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
				error "cleanupCloudFrontDistribution Failed. "+ex.getMessage()
			}
		}
	}

}

/**
 * Get the CloudFront distribution Id corresponding to the service
 * @param service
 * @param stage
 * @return
 */
def getDistributionId(stage) {
	def distributionID
	def outputStr
	try {
		outputStr = sh (
			script: "aws cloudfront list-distributions \
				--output json \
				--query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-$stage-static-website-origin-${service_config['domain']}-${service_config['service']}].{Distribution:domainName, Id:Id}\"",
			returnStdout: true
		)

		if(outputStr) {
			def outputObj = new JsonSlurper().parseText(outputStr)

			if (outputObj) {
				distributionID = outputObj[0].Id
			}
		}
	}catch (ex) {
		error "getDistributionId Failed: "+ ex.getMessage()
	}

	return distributionID
}

/**
 * Get and save the CloudFront distribution Config corresponding to the service
 * @param distributionID
 * @return
 */
def getDistributionConfig(distributionID) {
	def distributionConfig
	try {
		distributionConfig = sh (
			script: "aws cloudfront get-distribution-service_config \
						--output json --id "+distributionID,
			returnStdout: true
		)
		return distributionConfig
	}catch (ex) {
		send_status_email ("FAILED")
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		error "getDistributionConfig Failed."+ex.getMessage()
	}

}

/**
 * Generate Disable Distribution configuration
 * @param service
 * @param stage
 * @return
 */
def generateDistributionConfigForDisable(distributionConfig) {
	def distributionConfigObj
	def eTag
	try {
		if(distributionConfig) {
			distributionConfigObj = new JsonSlurper().parseText(distributionConfig)
		}
		eTag = distributionConfigObj.ETag
		distributionConfigObj.DistributionConfig.Enabled = false
		def updatedCfg = JsonOutput.toJson(distributionConfigObj.DistributionConfig)
		echo "updatedCfg... $updatedCfg"
		try {
			sh "echo \'$updatedCfg\' > disable-cf-distribution-service_config.json"
		}catch(ex) {}
		return eTag
	} catch(ex) {
		send_status_email ("FAILED")
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		error "generateDistributionConfigForDisable Failed."+ex.getMessage()
	}
}

/**
 * Disable Distribution configuration
 * @param distributionID
 * @param _Etag
 * @param configFile
 * @return
 */
def disableCloudFrontDistribution(distributionID, _Etag, configFile, stage) {
	def disableOutput
	def eTag
	try {
		disableOutput = sh(
			script: "aws cloudfront update-distribution \
						--output json \
						--id $distributionID \
						--distribution-service_config file://"+configFile+" \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "disableOutput... $disableOutput"
		if(disableOutput) {
			def disableConfigObj = new JsonSlurper().parseText(disableOutput)
			eTag = disableConfigObj.ETag
		}
		echo "disable eTag...$eTag"
		return eTag
	}catch(ex){
		events.sendFailureEvent('DELETE_PROJECT', ex.getMessage(), context_map)
		error "disableCloudFrontDistribution. "+ex.getMessage()
	}
}

def loadServerlessConfig() {

	def configPackURL = scmModule.getCoreRepoCloneUrl("serverless-config-pack")
	echo "loadServerlessConfig:: ${service_config['providerRuntime']}::" + configPackURL

	dir('_config') {
	    checkout([$class: 'GitSCM', branches: [
	        [name: '*/master']
	    ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
	        [credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: configPackURL]
	    ]])
	}
	if (service_config['providerRuntime'].indexOf("nodejs") > -1) {
	    sh "cp _config/serverless-nodejs.yml ./serverless.yml"
	} else if (service_config['providerRuntime'].indexOf("java") > -1) {
	    sh "cp _config/serverless-java.yml ./serverless.yml"
	} else if (service_config['providerRuntime'].indexOf("python") > -1) {
	    sh "cp _config/serverless-python.yml ./serverless.yml"
	}
	
	sh "cp serverless.yml serverless-temp.yml"
}


/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def url = g_base_url + '/jazz/login'
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"
		def login_json = []
		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)
		try {
			def token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
				 $url \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = jsonParse(token)
			tokenJson_token = tokenJson.data.token
			
			return tokenJson_token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
 }

 /**
 * Send email to the recipient with the build status and any additional text content
 * Supported build status values = STARTED, FAILED & COMPLETED
 * @return
 */
 def send_status_email (build_status) {
	 def email_id = ''

	 def email_content = ''
 	 def body_subject = ''
 	 def body_text = ''
 	 def cc_email = ''
 	 def body_html = ''
 	 if (build_status == 'STARTED') {
 		 echo "email status started"
 		 body_subject = "Jazz Build Notification: Deletion STARTED for service: ${service_config['service']}"
 	 } else if (build_status == 'FAILED') {
 		 echo "email status failed"
 		 def build_url = env.BUILD_URL + 'console'
 		 body_subject = "Jazz Build Notification: Deletion FAILED for service: ${service_config['service']}"
 		 body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
 	 } else if (build_status == 'COMPLETED'){
 				body_subject = "Jazz Build Notification: Deletion COMPLETED successfully for service: ${service_config['service']}"
 	 } else {
 				echo "Unsupported build status, nothing to email.."
 				return
 	 }
 	 if (email_content != ''){
 				body_text = body_text + '\n\n' + email_content
 	 }
 	 def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
 	 body = JsonOutput.toJson([
 						 from : fromStr,
 						 to : email_id,
 						 subject : body_subject,
 						 text : body_text,
 						 cc : cc_email,
 						 html : body_html
 					 ])
 		 try{
 			 def sendMail = sh (script: "curl -X POST \
					 ${g_base_url}/jazz/email \
					 -k -v -H \"Authorization: $g_login_token\" \
					 -H \"Content-Type: application/json\" \
					 -d \'${body}\'", returnStdout: true).trim()
 			 def responseJSON = parseJson(sendMail)
 			 if(responseJSON.data){
 				 echo "successfully sent e-mail to $email_id"
 			 } else {
 				 echo "exception occured while sending e-mail: $responseJSON"
 			 }
 		 } catch (e){
 			 echo "Failed while sending build status notification"
 		 }
 }

/*
* Load build modules
*/
def loadBuildModules(buildModuleUrl){
	dir('build_modules') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		echo "config loader loaded successfully."
		
		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)		
		echo "SCM module loaded successfully."

		events = load "events-module.groovy"
		echo "Event module loaded successfully."

		serviceMetadataLoader = load "service-metadata-loader.groovy"
		serviceMetadataLoader.initialize(configLoader)
		echo "Service metadata loader module loaded successfully."

		utilModule = load "utility-loader.groovy"
		utilModule.initialize(configLoader)
		echo "Util module loaded successfully."	

		environmentMetadataLoader = load "environment-deployment-metadata-loader.groovy"
		echo "Environment metadata loader module loaded successfully."

	}
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
      // right now only bitbucket has this additional tag scm in its git clone path
      return "http://${repo_base}/${repo_core}/jazz-build-module.git" 
    }else {
      return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    } 
}

def getStage(environment){
	if(environment.equals('dev') || environment.endsWith('-dev')){
		environment = 'dev'
	}
	return environment
}

def setDeploymentBucketName(stage, environment){
	sh "sed -i -- 's/oaf-apis-deployment-bucket-" + stage + "/oaf-apis-deployment-bucket-" + environment + "/g' serverless.yml"
}

@NonCPS
def jsonParse(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}