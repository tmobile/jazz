#!groovy.
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

/**
 * The Service delete workflow for service types: API, function & website
*/
@Field def configModule
@Field def configLoader
@Field def scmModule

@Field def Util
@Field def serviceMetadata
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def auth_token = ''
@Field def domain = ''
@Field def service = ''
@Field def owner = ''
@Field def var_db_service_id = ''
@Field def role = ''

node {
	echo "Starting delete service job with params : $params"

	jazzBuildModuleURL = getBuildModuleUrl()
	loadConfigModule(jazzBuildModuleURL)
	loadSCMModule(jazzBuildModuleURL)

	g_base_url = "https://${configLoader.AWS.API.PROD_ID}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	role = configLoader.AWS.ROLEID
	
	def service_name
	def version
	def repo_name
	def tracking_id
	def config
	def runtime
	def serviceConfig
	def domainConfig
	def cloudfrontEnabled
	def flowType
	
	var_db_service_id = params.db_service_id

	if (params.service_name) {
		service_name =  params.service_name.trim()
		service = service_name
	}
	if(params.domain){
		domain = params.domain.trim()
	} else { domain = "" }
	if(params.version){
		version = params.version.trim()
	}
	if(params.tracking_id){
		tracking_id = params.tracking_id.trim()
	}
	repo_name = service_name
	if(domain && domain != ""){
		repo_name = domain + "_" + service_name
	}

	auth_token = setCredentials()
	loadServiceInfo()

	sh 'rm -rf ' + repo_name
	sh 'mkdir ' + repo_name

	stage("Initialization") {

		checkoutSCM(repo_name)
		def configObj = dir(repo_name){
			return LoadConfiguration()
		}
		
		if(configObj.service_id){	
			def url = "$g_base_url/jazz/services/"+configObj.service_id
			serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL)
			serviceMetadata.setUrl(url)
			def serviceData = serviceMetadata.loadServiceMetaData()
			if(serviceData && serviceData.data){	
				config = serviceData.data['metadata']
			}else{
				error "Error while fetching service metadata"
			}
		}else{
			error "Service Id is not available."
		}
	
		runtime = config['providerRuntime']
		serviceConfig = config['service']
		domainConfig = config['domain']
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_started");
		dir(repo_name){
			echo "loadServerlessConfig......."

			if (fileExists('build.api')) {
				flowType = "API"
				
				loadServerlessConfig(runtime)
				
				updateSwaggerConfig(domain, params.service_name.trim(), configLoader.API.API_KEY, config)
			} else if(fileExists('build.lambda')) {
				flowType = "LAMBDA"
				
				loadServerlessConfig(runtime)
			} else if(fileExists('build.website')) {
				flowType = "WEBSITE"
				
				if(config['create_cloudfront_url']) {
					cloudfrontEnabled = config['create_cloudfront_url'].trim()
				}else {
					cloudfrontEnabled = "false"
				}
			} else {
				error "Invalid project configuration"
			}
		}
	}

	stage("Validation") {
		validateInput(service_name, domain, version)
		checkServiceExists(service_name, domain, configLoader.AWS.REGION)//is-service-available does not exist
	}

	dir(repo_name){
		switch (flowType) {
			case "API":
				stage('Undeploy Service') {
					updateServiceNameConfig( "dev",config)
					def path = getResourcePath()
					//sh "sed -i -- 's/{opt:stage}/dev/g' serverless.yml"
					cleanUpApiGatewayResources("dev", path, configLoader.AWS.REGION)
					cleanUpApiDocs("dev", service_name, domain)
					unDeployService('dev', configLoader.AWS.REGION)

					updateServiceNameConfig("stg",config)
					//sh "sed -i -- 's/{opt:stage}/stg/g' serverless.yml"
					cleanUpApiGatewayResources("stg", path, configLoader.AWS.REGION)
					cleanUpApiDocs("stg", service_name, domain)
					unDeployService('stg', configLoader.AWS.REGION)

					updateServiceNameConfig( "prod",config)
					//sh "sed -i -- 's/{opt:stage}/prod/g' serverless.yml"
					cleanUpApiGatewayResources("prod", path, configLoader.AWS.REGION)
					cleanUpApiDocs("prod", service_name, domain)
					unDeployService('prod', configLoader.AWS.REGION)
				}
				break

			case "LAMBDA":
				stage('Undeploy Service') {
					updateServiceNameConfig( "dev",config)
					unDeployService('dev', configLoader.AWS.REGION)
					updateServiceNameConfig( "stg",config)
					unDeployService('stg', configLoader.AWS.REGION)
					updateServiceNameConfig( "prod",config)
					unDeployService('prod', configLoader.AWS.REGION)
				}
				break

			case "WEBSITE":
				stage('Undeploy Service') {
					serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL)
					initialize(serviceMetadata, "website", service_name, domain)
					
					//if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "dev")
					//}
					unDeployWebsite(service_name, domain, "dev")

					//if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "stg")
					//}
					unDeployWebsite(service_name, domain, "stg")

					//if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "prod")
					//}
					unDeployWebsite(service_name, domain, "prod")
				}
				break
		}
	}

	stage('Cleanup SCM') {
		cleanup(repo_name)
	}
}

/**
 * Calls the serverless remove to undeploy the lambda service
 * @param  stage
 * @return
 */
def unDeployService(stage, region) {
	//events.sendStartedEvent('UNDEPLOY_LAMBDA', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "serverless remove --stage "+stage+" --verbose --bucket " + getServiceBucket(stage)
			echo "Service undeployed"
			//events.sendCompletedEvent('UNDEPLOY_LAMBDA', null, null, getEnvKey(stage))
		}catch(ex) {
			updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, region, "deletion_failed");
			//events.sendFailureEvent('UNDEPLOY_LAMBDA', ex.getMessage(), null, getEnvKey(stage))
			send_status_email ("FAILED")
			error ex.getMessage()
		}
	}
}

/**
 * Checkout Code
 * @param  repo_name
 * @return
 */
def checkoutSCM(repo_name) {
	dir(repo_name)
	{
		def repo_url = scmModule.getRepoCloneUrl(repo_name)
		//events.sendStartedEvent('GET_SERVICE_CODE')
		try {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: repo_url]
			]])
		}catch(ex) {
			updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
			send_status_email ("FAILED")
			error "checkoutSCM Failed. "+ex.getMessage()
		}
	}
}

/**
 * Update the service name in serverless config file
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateServiceNameConfig(envval,config) {
	sh "rm serverless.yml"
	sh "cp serverless-temp.yml serverless.yml"
	//events.sendStartedEvent('UPDATE_DEPLOYMENT_CONF')
	def fullServiceName = config['service']
	def cfStackName = config['service']
	if(config['domain'] && config['domain']!= ""){
		fullServiceName = config['domain']+ "-" + config['service']
		cfStackName = config['service'] + "-" + config['domain'] //sets CF Stack name as service--domain-env
	}
	fullServiceName = configLoader.INSTANCE_PREFIX + "-" + fullServiceName
	cfStackName = fullServiceName
	try {
		sh "sed -i -- 's/service: \${file(deployment-env.yml):service}/service: " + cfStackName + "/g' serverless.yml"
		sh "sed -i -- 's/name: \${self:service}/name: " + fullServiceName+"/g' serverless.yml"
		//events.sendCompletedEvent('UPDATE_DEPLOYMENT_CONF')
		writeServerlessFile(config)
	}catch(ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

def writeServerlessFile(config){
	sh "pwd"
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/" + config['region'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/" + config['domain'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/" + config['owner'] + "/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|" + config['iamRoleARN'] + "|g' serverless.yml" 	
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/" + config['providerRuntime'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/" + config['providerMemorySize'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/" + config['providerTimeout'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleRate}/" + config['eventScheduleRate'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleEnable}/" + config['eventScheduleEnable'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/" + config['securityGroupIds'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/" + config['subnetIds'] + "/g' serverless.yml"
	
	if(config['artifact']){
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/" + config['artifact'] + "/g' serverless.yml"
	}
	if(config['mainClass']){
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/" + config['mainClass'] + "/g' serverless.yml"
	}
}

/**
 * Replace the service name & Domain place holders in swagger file.
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateSwaggerConfig(domain, serviceName, api_key, config) {
	//events.sendStartedEvent('UPDATE_SWAGGER')
	try {
		if (fileExists('swagger/swagger.json')) {
			sh "sed -i -- 's/{service_name}/" + serviceName + "/g' swagger/swagger.json"
			sh "sed -i -- 's/{domain}/" + domain + "/g' swagger/swagger.json"

			def region = config['region']
			def roleARN = role.replaceAll("/", "\\\\/")
			
			// TODO: the below couple of statements will be replaced with regular expression in very near future;
			def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

			sh "sed -i -- 's/{conf-role}/" + roleARN + "/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-region}/" + region + "/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-accId}/" + roleId + "/g' ./swagger/swagger.json"
		}
		//events.sendCompletedEvent('UPDATE_SWAGGER')
	}catch(ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

/**
 * Load the deployment config file
 * @return
 */
def LoadConfiguration() {
	def prop = [:]
	//events.sendStartedEvent('GET_DEPLOYMENT_CONF')
	try {
		def result = readFile('deployment-env.yml').trim()
		def resultList = result.tokenize("\n")
		def cleanedList = []
		for (i in resultList) {
			if(i.toLowerCase().startsWith("#")) {
			}else {
				cleanedList.add(i)
			}
		}
		for (item in cleanedList) {
			item = item.replaceAll(" ", "").replaceFirst(":", "#");
			def eachItemList = item.tokenize("#")
			if(eachItemList[0].trim()) {
				if(eachItemList[1] == null) { eachItemList[1] = "" }
				prop.put(eachItemList[0].trim(), eachItemList[1].trim())
			}
		}
		echo "Loaded configurations...$prop"
		//events.sendCompletedEvent('GET_DEPLOYMENT_CONF')
		return prop
	}catch(ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "LoadConfiguration Failed. "+ex.getMessage()
	}
}

/**
 * Validate service inputs
 * @param  service_name
 * @param  domain
 * @param  version
 * @return
 */
def validateInput(service_name, domain, version) {
	
	if(service_name == null || service_name.equals("")) {
		error "Service Name is invalid"
	}
}

/**
 * Check if a service is valid or esists first before scheduling for deletion
 * @param  domain
 * @param  service_name
 * @throws error when service is invalid
 * @return
 */
def checkServiceExists(service_name, domain, region) {
	//events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', "Check if service exists")

	try {
		def outputStr = sh (
			script: "curl -H \"Authorization: ${auth_token}\" 'https://${configLoader.AWS.API.PROD_ID}.execute-api.${region}.amazonaws.com/prod/jazz/is-service-available?domain=${domain}&service=${service_name}'" ,
			returnStdout: true
		).trim()
		echo outputStr
		def jsonParser = new groovy.json.JsonSlurper()
		def resultJson = jsonParser.parseText(outputStr)
		if(resultJson == null || resultJson.data == null || resultJson.data.available == null) {
			error "Is-service-available lookup failed"
		} else if(resultJson.data.available == true) {
			error "No service exists with name "+service_name+" under domain "+domain
		}
		//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, region, "deletion_failed");
			send_status_email ("FAILED")
			error "checkServiceExists Failed. "+ex.getMessage()
		} else {
			//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
		}
	}
}

/**
 * Cleans up the project repository from SCM as well as update the database and send corresponding status email
 * @param  repoName
 * @return
 */
def cleanup(repoName) {
	
	try {
		scmModule.deleteProject(repoName)
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "inactive");
		send_status_email ("COMPLETED")
	} catch (ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "deleteProject failed. "+ex.getMessage()
	}
}

/**
 * Clean up the API gateway resource configurations specific to the service
 * @param  stage environment
 * @param  path the resource path
 * @return
 */
def cleanUpApiGatewayResources(stage, path, region) {
	//events.sendStartedEvent('DELETE_API_RESOURCE', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			
			def resource_id = null
			try {
				def outputStr = sh (
					script: "aws apigateway get-resources --rest-api-id "+getApiId(stage)+" --region " + region + " --output json" ,
					returnStdout: true
				).trim()

				def list = parseJson(outputStr)
				for (items in list["items"]) {
					if(items["path"] == path) {
						resource_id = items["id"]
					}
				}
			} catch(ex) {
				send_status_email ("FAILED")
				error "findResourceId Failed"+ex.getMessage()
			}
			if(resource_id != null && resource_id != ""){
				def status_json = sh (
					script: "aws apigateway delete-resource --rest-api-id "+getApiId(stage)+"  --region " + region + " --resource-id "+resource_id+" --output json" ,
					returnStdout: true
				).trim()
				def deployment_status_json = sh (
					script: "aws apigateway create-deployment --rest-api-id "+getApiId(stage) + "  --region " + region + " --stage-name "+stage+" --description 'API deployment after resource clean up' --output json" ,
					returnStdout: true
				).trim()
			} else {
				echo "Resource Id does not exists in API gateway."
				//events.sendCompletedEvent('DELETE_API_RESOURCE', "No Resource to be deleted", null, getEnvKey(stage))
			}
		} catch(ex) {
			updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, region, "deletion_failed");
			send_status_email ("FAILED")
			error ex.getMessage()
		}
	}
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getServiceBucket(stage) {
	if(stage == 'dev') {
		return configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
	}else if (stage == 'stg') {
		return configLoader.JAZZ.S3.WEBSITE_STG_BUCKET;
	} else if (stage == 'prod') {
		return configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	}
}


/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getApiId(stage) {
	if(stage == 'dev') {
		return configLoader.AWS.API.DEV_ID
	}else if (stage == 'stg') {
		return configLoader.AWS.API.STG_ID
	} else if (stage == 'prod') {
		return configLoader.AWS.API.PROD_ID
	}
}

/**
 * Clean up the API documentation folder from S3 corresponding to the environment
 * @param  stage the environment
 * @return  api Id
 */
def cleanUpApiDocs(stage, service, domain) {
	//events.sendStartedEvent('DELETE_API_DOC', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			def apiRootFolder = getApiDocsFolder(stage)
			sh "aws s3 rm s3://${apiRootFolder}/${domain}/${service}/${stage} --recursive"
			//events.sendCompletedEvent('DELETE_API_DOC', null, null, getEnvKey(stage))
		} catch(ex) {
			updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
			send_status_email ("FAILED")
			error "cleanUpApiDocs Failed. "+ex.getMessage()
		}
	}
}

/**
 * Get the API docs folder for environment
 * @param stage environment
 * @return  folder name
 */
def getApiDocsFolder(stage) {
	return configLoader.AWS.S3.API_DOC
}

/**
 * Get the environment key
 * @param stage environment
 * @return  environment key to be represented in the event
 */
def getEnvKey(stage) {
	if(stage == 'dev') {
		return "DEV"
	}else if (stage == 'stg') {
		return "STG"
	} else if (stage == 'prod') {
		return "PROD"
	}
}

/**
 * Get the resource Path from domain and service name.
 * @return  formed resource path string
 */
def getResourcePath() {
	def basePath
	def pathInfo
	def resourcepath
	try {
		dir("swagger") {
			def swaggerStr = readFile('swagger.json').trim()
			def swaggerJsonObj = parseJson(swaggerStr)
			basePath = swaggerJsonObj.basePath
			def keys = swaggerJsonObj.paths.keySet()
			for (_p in keys) {
				pathInfo = _p
				break
			}
		}
		resourcepath = (basePath+"/"+pathInfo).replaceAll("//","/")
		return resourcepath
	} catch(ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "getResourcePath Failed. "+ex.getMessage()
	}
}

/**
 * Undeploy the website. Delete the web folder from S3 bucket
 * @param stage
 * @return
 */
 def unDeployWebsite(service, domain, stage) {
 	echo "unDeployWebsite::" + service + "::" + domain + "::" + stage

 	withCredentials([
 		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
 	]) {
 		try {
 			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
 			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
 			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
 			sh "aws configure set preview.cloudfront true"
 			def bucketName = serviceMetadata.getBucket(stage)
 			def bucketUrl = "${bucketName}/${domain}-${service}"
 			def _exists = checkIfWebsiteExists(bucketUrl)
 			if(_exists) {
 				sh "aws s3 rm s3://${bucketUrl} --recursive"
 				cleanupS3BucketPolicy(service, domain, stage, bucketName)
 			}
 		} catch(ex) {
 			updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
 			send_status_email ("FAILED")
 			error ex.getMessage()
 		}
	}
}

/**
 * Check if the website folder existing in the S3 buckets for each environments
 * @param stage
 * @return  true/false
 */
def checkIfWebsiteExists(bucketUrl) {
	def status = true;
	try {
		sh "aws s3 ls s3://${bucketUrl}"
	}catch(ex) {
		echo "Bucket does not exist"
		status = false
	}
	return status
}

/**
 * Delete the the bucket policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupS3BucketPolicy(service, domain, stage, bucket) {
	echo "cleanupS3BucketPolicy called"

	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"
			def folderName = domain + "-" + service // temporary fix
			//def folderName = domain+"_"+service // @TODO: enable after bug fix CAPI 344
			def bucketPolicy = sh (
				script: "aws s3api get-bucket-policy --bucket ${bucket} --output json",
				returnStdout: true
			).trim()
			def policyObject = parseJson(parseJson(bucketPolicy).Policy)
			def policyObjectUpdated = [:]
			policyObjectUpdated.Version = policyObject.Version
			policyObjectUpdated.Id = policyObject.Id
			def statements = []
			def resourcePattern = "${bucket}/${folderName}/"
			for (items in policyObject.Statement) {
				if(items.Sid != folderName || !(items.Resource.indexOf(resourcePattern) > -1)) {
					def copy = [:]
					copy.putAll(items)
					statements.add(copy)
				}
			}
			policyObjectUpdated.Statement = statements
			def policy_json = JsonOutput.toJson(policyObjectUpdated)
			//def bucketName = bucket
			updateBucketPolicy(policy_json, bucket)
            resetCredentials()
		} catch(ex) {
            resetCredentials()
			if(ex.getMessage().indexOf("groovy.json.internal.LazyMap") < 0) {
				updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
				send_status_email ("FAILED")
				error "cleanupS3BucketPolicy Failed. "+ex.getMessage()
			}
		}
	}
}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}

@NonCPS
def updateBucketPolicy(policy_json, bucketName){
	try {
		sh "aws s3api put-bucket-policy \
				--output json \
				--bucket "+bucketName+" \
				--policy \'${policy_json}\'"
	} catch(e) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
			error e.getMessage()
	}
}
/**
 * Delete the the cloud Front policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupCloudFrontDistribution(service, domain, stage) {
	//events.sendStartedEvent('DELETE_CLOUDFRONT', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def distributionID
			def _Etag

			distributionID = getDistributionId(stage, domain, service)

			if (distributionID && distributionID != "")
			{
				def distributionConfig = getDistributionConfig(distributionID)
				_Etag = generateDistributionConfigForDisable(distributionConfig)
				_Etag = disableCloudFrontDistribution(distributionID, _Etag, "disable-cf-distribution-config.json", stage)
			}
			//events.sendCompletedEvent('DELETE_CLOUDFRONT', null, null, getEnvKey(stage))
		} catch(ex) {
			if((ex.getMessage()).indexOf("getDistributionId Failed") > -1) {
				echo "Could not find a CloudFront distribution Id for service: $service and environment $stage"
				//events.sendCompletedEvent('DELETE_CLOUDFRONT', "CF resource not available", null, getEnvKey(stage))
			} else {
				updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
				send_status_email ("FAILED")
				error "cleanupCloudFrontDistribution Failed. "+ex.getMessage()
			}
		}
	}

}

/**
 * Get the CloudFront distribution Id corresponding to the service
 * @param service
 * @param stage
 * @return
 */
def getDistributionId(stage, domain, service) {
	def distributionID
	def outputStr
	try {
		outputStr = sh (
			script: "aws cloudfront list-distributions \
				--output json \
				--query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-$stage-static-website-origin-$domain-$service']].{Distribution:DomainName, Id:Id}\"",
			returnStdout: true
		)

		if(outputStr) {
			def outputObj = new JsonSlurper().parseText(outputStr)

			if (outputObj) {
				distributionID = outputObj[0].Id
			}
		}
	}catch (ex) {
		error "getDistributionId Failed: "+ ex.getMessage()
	}

	return distributionID
}

/**
 * Get and save the CloudFront distribution Config corresponding to the service
 * @param distributionID
 * @return
 */
def getDistributionConfig(distributionID) {
	def distributionConfig
	try {
		distributionConfig = sh (
			script: "aws cloudfront get-distribution-config \
						--output json --id "+distributionID,
			returnStdout: true
		)
		return distributionConfig
	}catch (ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "getDistributionConfig Failed."+ex.getMessage()
	}

}

/**
 * Generate Disable Distribution configuration
 * @param service
 * @param stage
 * @return
 */
def generateDistributionConfigForDisable(distributionConfig) {
	def distributionConfigObj
	def eTag
	try {
		if(distributionConfig) {
			distributionConfigObj = new JsonSlurper().parseText(distributionConfig)
		}
		eTag = distributionConfigObj.ETag
		distributionConfigObj.DistributionConfig.Enabled = false
		def updatedCfg = JsonOutput.toJson(distributionConfigObj.DistributionConfig)
		echo "updatedCfg... $updatedCfg"
		try {
			sh "echo \'$updatedCfg\' > disable-cf-distribution-config.json"
		}catch(ex) {}
		return eTag
	} catch(ex) {
		updateServiceInDB(var_db_service_id, configLoader.AWS.API.PROD_ID, configLoader.AWS.REGION, "deletion_failed");
		send_status_email ("FAILED")
		error "generateDistributionConfigForDisable Failed."+ex.getMessage()
	}
}

/**
 * Disable Distribution configuration
 * @param distributionID
 * @param _Etag
 * @param configFile
 * @return
 */
def disableCloudFrontDistribution(distributionID, _Etag, configFile, stage) {
	//events.sendStartedEvent('DISABLE_CLOUDFRONT', "distributionID: "+distributionID, null, getEnvKey(stage))
	def disableOutput
	def eTag
	try {
		disableOutput = sh(
			script: "aws cloudfront update-distribution \
						--output json \
						--id $distributionID \
						--distribution-config file://"+configFile+" \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "disableOutput... $disableOutput"
		if(disableOutput) {
			def disableConfigObj = new JsonSlurper().parseText(disableOutput)
			eTag = disableConfigObj.ETag
		}
		echo "disable eTag...$eTag"
		//events.sendCompletedEvent('DISABLE_CLOUDFRONT', "distributionID: "+distributionID, null, getEnvKey(stage))
		return eTag
	}catch(ex){
		//events.sendFailureEvent('DISABLE_CLOUDFRONT', ex.getMessage(), null, getEnvKey(stage))
		error "disableCloudFrontDistribution. "+ex.getMessage()
	}
}

def loadServerlessConfig(String runtime) {

	def configPackURL = scmModule.getCoreRepoCloneUrl("serverless-config-pack")
	echo "loadServerlessConfig::" + runtime + "::" + configPackURL

	dir('_config') {
	    checkout([$class: 'GitSCM', branches: [
	        [name: '*/master']
	    ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
	        [credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: configPackURL]
	    ]])
	}
	if (runtime.indexOf("nodejs") > -1) {
	    sh "cp _config/serverless-nodejs.yml ./serverless.yml"
	} else if (runtime.indexOf("java") > -1) {
	    sh "cp _config/serverless-java.yml ./serverless.yml"
	} else if (runtime.indexOf("python") > -1) {
	    sh "cp _config/serverless-python.yml ./serverless.yml"
	}
	
	sh "cp serverless.yml serverless-temp.yml"
}

def updateServiceInDB(service_id_in_db, apiID, region, statusval) {
  sh "curl -H \"Content-Type: application/json\"  -H \"Authorization: "+auth_token+"\" -X PUT -k -v -d \
  		'{ \"status\": \"${statusval}\"}' https://${apiID}.execute-api.${region}.amazonaws.com/prod/jazz/services/${service_id_in_db}?isAdmin=true"
}


/**
 * Checkout event module code and load the module
 */
def loadEventsModule() {
}

def loadServiceInfo() {
	def token = setCredentials()
	def url = "$g_base_url/jazz/services?domain=$domain&service=$service&isAdmin=true"

	def curlOutput = sh (script: "curl -H \"Content-Type: application/json\" \
			-H \"Authorization: $token\" \"$url\"" ,returnStdout: true ).trim()
	
	def curlOutputJSON = jsonParse(curlOutput)

	if (curlOutputJSON.data[0].created_by) {
		created_by = curlOutputJSON.data[0].created_by
	}
}


/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def url = g_base_url + '/jazz/login'
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"
		def login_json = []
		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)
		try {
			def token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
				 $url \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = jsonParse(token)
			tokenJson_token = tokenJson.data.token
			
			return tokenJson_token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
 }

 /**
 * Send email to the recipient with the build status and any additional text content
 * Supported build status values = STARTED, FAILED & COMPLETED
 * @return
 */
 def send_status_email (build_status) {
	 def email_id = ''
	 def service = ''
	 if(owner != null && params.service_name != null && !owner.isEmpty() && !params.service_name.isEmpty()){
		 email_id = owner
		 service = params.service_name
	 }
	 def email_content = ''
 	 def body_subject = ''
 	 def body_text = ''
 	 def cc_email = ''
 	 def body_html = ''
 	 if (build_status == 'STARTED') {
 		 echo "email status started"
 		 body_subject = 'Jazz Build Notification: Deletion STARTED for service: ' + service
 	 } else if (build_status == 'FAILED') {
 		 echo "email status failed"
 		 def build_url = env.BUILD_URL + 'console'
 		 body_subject = 'Jazz Build Notification: Deletion FAILED for service: ' + service
 		 body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
 	 } else if (build_status == 'COMPLETED'){
 				body_subject = 'Jazz Build Notification: Deletion COMPLETED successfully for service: ' + service
 	 } else {
 				echo "Unsupported build status, nothing to email.."
 				return
 	 }
 	 if (email_content != ''){
 				body_text = body_text + '\n\n' + email_content
 	 }
 	 def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
 	 body = JsonOutput.toJson([
 						 from : fromStr,
 						 to : email_id,
 						 subject : body_subject,
 						 text : body_text,
 						 cc : cc_email,
 						 html : body_html
 					 ])
 		 try{
 			 def sendMail = sh (script: "curl -X POST \
					 ${g_base_url}/jazz/email \
					 -k -v -H \"Authorization: $g_login_token\" \
					 -H \"Content-Type: application/json\" \
					 -d \'${body}\'", returnStdout: true).trim()
 			 def responseJSON = parseJson(sendMail)
 			 if(responseJSON.data){
 				 echo "successfully sent e-mail to $email_id"
 			 } else {
 				 echo "exception occured while sending e-mail: $responseJSON"
 			 }
 		 } catch (e){
 			 echo "Failed while sending build status notification"
 		 }
 }

/*
* Load environment variables from build module
*/
def loadConfigModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
	}
}

/**
 * Load metadata module groovy file
 *
 */
def loadServiceMetadataModule(buildURL) {
		try {		

			echo "loading serviceMetaData, checking repos"

			dir('service-metadata') {
				checkout([$class: 'GitSCM', branches: [
					[name: '*/master']
				], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
					[credentialsId: configLoader.REPOSITORY.CREDENTIAL_ID, url: buildURL]
				]])
				serviceMetadata = load "service-metadata-loader.groovy"
				serviceMetadata.setAuthToken(setCredentials())

				// Load and set dependent utility module.
				echo "loading util module"
				Util = load "utility-loader.groovy"
				serviceMetadata.setUtil(Util)
			}
		return serviceMetadata
		}catch(ex) {
			error "loadServiceMetadataModule Failed. "+ex.getMessage()
		}
}

def initialize(serviceMetadata, serviceType, service, domain){
	def url = "$g_base_url/jazz/services?domain=$domain&service=$service"
	def dev = configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET
	def stg = configLoader.JAZZ.S3.WEBSITE_STG_BUCKET
	def prd = configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET
	
	serviceMetadata.initialize(serviceType, service, domain, url, dev, stg, prd)
	serviceMetadata.setUrl(url)
}

/*
load scm module
*/
def loadSCMModule(buildModuleUrl){

	try {	
		dir('scm-loader') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

			scmModule = load "scm-module.groovy"
			scmModule.initialize(configLoader)
		}
	}catch(ex) {
		error "loadSCMModule failed " + ex.toString()
	}
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
      // right now only bitbucket has this additional tag scm in its git clone path
      return "http://${repo_base}/${repo_core}/jazz-build-module.git" 
    }else {
      return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    } 
}

@NonCPS
def jsonParse(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}