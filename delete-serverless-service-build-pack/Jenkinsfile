#!groovy.
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.transform.Field

/**
 * The Service delete workflow for service types: API, function & website
*/
@Field def Util
@Field def serviceMetadata
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def domain = ''
@Field def service = ''
@Field def owner = ''
@Field def var_db_service_id = ''
@Field def region = ''
@Field def role = ''
@Field def api_doc_s3_bucket = ''

node {
	region = env.jazz_region
	g_base_url = "https://${env.API_KEY}.execute-api.${region}.amazonaws.com/dev"
	role = env.jazz_roleId
	api_doc_s3_bucket = env.jazz_s3_api_doc

	echo "Starting delete service job.."
	echo "params : $params"

	def service_name
	def version
	def bitbucket_repo_name
	def tracking_id
	def config
	def runtime
	def serviceConfig
	def domainConfig
	def cloudfrontEnabled
	def flowType
	def repo_protocol				= "http://"
	def var_credentialsId 			= env.REPO_CREDENTIAL_ID
	def var_bitbucket_base			= env.REPO_BASE
	def var_bitbucket_framework_url = repo_protocol + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/"
	def var_api_key 				= env.API_KEY
	def var_cas_rest_repo 			= repo_protocol + var_bitbucket_base  + "/rest/api/1.0/projects/" + env.REPO_LOC + "/repos"
	def var_bitbucket_email 		= env.REPO_EMAIL
	def var_cas_clone_url	 		= var_bitbucket_base + "/scm/" + env.REPO_LOC + "/"
	def configPackBBURL = "http://" + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/serverless-config-pack.git"
	def var_serviceonboarding_repo 	= repo_protocol + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/service-onboarding-build-pack.git"
	def var_bitbucket_branch_perm	= repo_protocol + var_bitbucket_base + "/rest/branch-permissions/2.0/projects/" + env.REPO_LOC + "/repos/"
	def var_bitbucket_webhook_api	= repo_protocol + var_bitbucket_base + "/rest/webhook/1.0/projects/" + env.REPO_LOC + "/repos/"
	def var_scm_source_hook 		= JenkinsLocationConfiguration.get().getUrl()+"/bitbucket-scmsource-hook/notify"
	def jazzBuildModuleURL = "http://${var_bitbucket_base}/scm/${env.REPO_CORE}/jazz-build-module.git"

	var_db_service_id = params.db_service_id

	if (params.service_name) {
		service_name =  params.service_name.trim()
		service = service_name
	}
	if(params.domain){
		domain = params.domain.trim()
	} else { domain = "" }
	if(params.version){
		version = params.version.trim()
	}
	if(params.tracking_id){
		tracking_id = params.tracking_id.trim()
	}
	bitbucket_repo_name = service_name
	if(domain && domain != ""){
		bitbucket_repo_name = domain + "-" + service_name
	}

	loadServiceInfo()

	sh 'rm -rf ' + bitbucket_repo_name
	sh 'mkdir ' + bitbucket_repo_name

	stage("Initialization") {

		checkoutSCM(bitbucket_repo_name, repo_protocol + var_cas_clone_url)
		config = dir(bitbucket_repo_name){
			return LoadConfiguration()
		}
		runtime = config['providerRuntime']
		serviceConfig = config['service']
		domainConfig = config['domain']
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_started");
		dir(bitbucket_repo_name){
			echo "loadServerlessConfig......."

			if (fileExists('build.api')) {
				flowType = "API"
				//events.setServiceType("API")
				loadServerlessConfig(runtime, configPackBBURL)
				//changeServerlessConfig(runtime)
				//updateServiceNameConfig(domain, service_name)
				updateSwaggerConfig(domain, params.service_name.trim(), env.API_KEY, config)
			} else if(fileExists('build.lambda')) {
				flowType = "LAMBDA"
				//events.setServiceType("LAMBDA")
				loadServerlessConfig(runtime, configPackBBURL)
				//changeServerlessConfig(runtime)
				//updateServiceNameConfig(domain, service_name)
			} else if(fileExists('build.website')) {
				flowType = "WEBSITE"
				//events.setServiceType("WEBSITE")
				if(config['create_cloudfront_url']) {
					cloudfrontEnabled = config['create_cloudfront_url'].trim()
				}else {
					cloudfrontEnabled = "false"
				}
			} else {
				error "Invalid project configuration"
			}
		}
	}

	stage("Validation") {
		validateInput(service_name, domain, version)
		checkServiceExists(service_name, domain, region)//is-service-available does not exist
	}

	dir(bitbucket_repo_name){
		switch (flowType) {
			case "API":
				stage('Undeploy Service') {
					updateServiceNameConfig(domain, service_name, "dev")
					def path = getResourcePath()
					//sh "sed -i -- 's/{opt:stage}/dev/g' serverless.yml"
					cleanUpApiGatewayResources("dev", path, region)
					cleanUpApiDocs("dev", service_name, domain)
					unDeployService('dev', region)

					updateServiceNameConfig(domain, service_name, "stg")
					//sh "sed -i -- 's/{opt:stage}/stg/g' serverless.yml"
					cleanUpApiGatewayResources("stg", path, region)
					cleanUpApiDocs("stg", service_name, domain)
					unDeployService('stg', region)

					updateServiceNameConfig(domain, service_name, "prod")
					//sh "sed -i -- 's/{opt:stage}/prod/g' serverless.yml"
					cleanUpApiGatewayResources("prod", path, region)
					cleanUpApiDocs("prod", service_name, domain)
					unDeployService('prod', region)
				}
				break

			case "LAMBDA":
				stage('Undeploy Service') {
					updateServiceNameConfig(domain, service_name, "dev")
					unDeployService('dev', region)
					updateServiceNameConfig(domain, service_name, "stg")
					unDeployService('stg', region)
					updateServiceNameConfig(domain, service_name, "prod")
					unDeployService('prod', region)
				}
				break

			case "WEBSITE":
				stage('Undeploy Service') {
					serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL, "website", service_name, domain)
					//if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "dev")
					//}
					unDeployWebsite(service_name, domain, "dev")

					//if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "stg")
					//}
					unDeployWebsite(service_name, domain, "stg")

					//if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "prod")
					//}
					unDeployWebsite(service_name, domain, "prod")
				}
				break
		}
	}

	stage('Cleanup BitBucket/Catalog') {
		deleteProject(bitbucket_repo_name)
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "inactive");
		//deleteserviceindb(region, var_db_service_id)
		send_status_email ("COMPLETED")
	}
}

/**
 * Calls the serverless remove to undeploy the lambda service
 * @param  stage
 * @return
 */
def unDeployService(stage, region) {
	//events.sendStartedEvent('UNDEPLOY_LAMBDA', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "serverless remove --stage "+stage+" --verbose --bucket " + getServiceBucket(stage)
			echo "Service undeployed"
			//events.sendCompletedEvent('UNDEPLOY_LAMBDA', null, null, getEnvKey(stage))
		}catch(ex) {
			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
			//events.sendFailureEvent('UNDEPLOY_LAMBDA', ex.getMessage(), null, getEnvKey(stage))
			send_status_email ("FAILED")
			error ex.getMessage()
		}
	}
}

/**
 * Checkout Code
 * @param  bitbucket_repo_name
 * @return
 */
def checkoutSCM(bitbucket_repo_name, var_cas_clone_url) {
	dir(bitbucket_repo_name)
	{
		def repo_url = var_cas_clone_url + bitbucket_repo_name+".git"
		//events.sendStartedEvent('GET_SERVICE_CODE')
		try {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: env.REPO_CREDENTIAL_ID, url: repo_url]
			]])
			//events.sendCompletedEvent('GET_SERVICE_CODE')

		}catch(ex) {
			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
			send_status_email ("FAILED")
			error "checkoutSCM Failed. "+ex.getMessage()
		}
	}
}

/**
 * Load the serverless configuration file from SCM based on the runtime.
 * @param  runtime
 * @return
 */
def loadServerlessConfig(runtime) {
	//events.sendStartedEvent('GET_SERVERLESS_CONF')
	echo "loadServerlessConfig::" + runtime
	try {
		dir('_config') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: env.REPO_CREDENTIAL_ID, url: env.GIT_CONFIG_URL]
			]])
		}
		if (runtime.indexOf("nodejs") > -1) {
			sh "cp _config/serverless-nodejs.yml ./serverless.yml"
		} else if (runtime.indexOf("java") > -1) {
			sh "cp _config/serverless-java.yml ./serverless.yml"
		} else if (runtime.indexOf("python") > -1) {
			sh "cp _config/serverless-python.yml ./serverless.yml"
		}
		//events.sendCompletedEvent('GET_SERVERLESS_CONF')
	}catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "loadServerlessConfig Failed. "+ex.getMessage()
	}
}

/**
 * Set the lambda execution role
 * @param  role
 * @return
 */
def setLambdaExecutionRole(role) {
	def lambdaRole = "";
	try {
		if (role != null && !role.equals("")) {
			lambdaRole = role;
		} else {
			lambdaRole = env.DEFAULT_LAMBDA_EXE_ROLE;
		}
		sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#"+lambdaRole+"#g' serverless.yml"
	}catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "setLambdaExecutionRole Failed. "+ex.getMessage()
	}
}

def changeServerlessConfig(String runtime) {
	def config = LoadConfiguration()
	//def subnetIds = config['subnetIds']
	//def securityGroupIds = config['securityGroupIds']
	//    def internalAccess = config['require_internal_access']
	//sh "sed -i -- 's/securityGroupIds/securityGroupIdsOld/g' deployment-env.yml"
	//sh "sed -i -- 's/subnetIds/subnetIdsOld/g' deployment-env.yml"
	//sh "echo '\nsubnetIds : $subnetIds\nsecurityGroupIds : $securityGroupIds\n' >> deployment-env.yml"

	echoServerlessFile()

}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}


/**
 * Update the service name in serverless config file
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateServiceNameConfig(domain, serviceName, envval) {
	sh "rm serverless.yml"
	sh "cp serverless-temp.yml serverless.yml"
	//events.sendStartedEvent('UPDATE_DEPLOYMENT_CONF')
	def fullServiceName = service_name
	def cfStackName = service_name
	if(domain && domain!= ""){
		fullServiceName = domain+ "-" + service_name
		cfStackName = serviceName + "-" + domain //sets CF Stack name as service--domain-env
	}
	fullServiceName = env.env_name_prefix + "-" + fullServiceName
	cfStackName = fullServiceName
	try {
		sh "sed -i -- 's/service: \${file(deployment-env.yml):service}/service: " + cfStackName + "/g' serverless.yml"
		sh "sed -i -- 's/name: \${self:service}/name: " + fullServiceName+"/g' serverless.yml"
		//events.sendCompletedEvent('UPDATE_DEPLOYMENT_CONF')
	}catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

/**
 * Replace the service name & Domain place holders in swagger file.
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateSwaggerConfig(domain, serviceName, api_key, config) {
	//events.sendStartedEvent('UPDATE_SWAGGER')
	try {
		if (fileExists('swagger/swagger.json')) {
			sh "sed -i -- 's/{service_name}/" + serviceName + "/g' swagger/swagger.json"
			sh "sed -i -- 's/{domain}/" + domain + "/g' swagger/swagger.json"

			def region = config['region']
			def roleARN = role.replaceAll("/", "\\\\/")
			def var_api_host_name = api_key +".execute-api."+region+".amazonaws.com"

			// TODO: the below couple of statements will be replaced with regular expression in very near future;
			def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

			sh "sed -i -- 's/{conf-role}/" + roleARN + "/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-region}/" + region + "/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-accId}/" + roleId + "/g' ./swagger/swagger.json"
		}
		//events.sendCompletedEvent('UPDATE_SWAGGER')
	}catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

/**
 * Load the deployment config file
 * @return
 */
def LoadConfiguration() {
	def prop = [:]
	//events.sendStartedEvent('GET_DEPLOYMENT_CONF')
	try {
		def result = readFile('deployment-env.yml').trim()
		def resultList = result.tokenize("\n")
		def cleanedList = []
		for (i in resultList) {
			if(i.toLowerCase().startsWith("#")) {
			}else {
				cleanedList.add(i)
			}
		}
		for (item in cleanedList) {
			item = item.replaceAll(" ", "").replaceFirst(":", "#");
			def eachItemList = item.tokenize("#")
			if(eachItemList[0].trim()) {
				if(eachItemList[1] == null) { eachItemList[1] = "" }
				prop.put(eachItemList[0].trim(), eachItemList[1].trim())
			}
		}
		echo "Loaded configurations...$prop"
		//events.sendCompletedEvent('GET_DEPLOYMENT_CONF')
		return prop
	}catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "LoadConfiguration Failed. "+ex.getMessage()
	}
}

/**
 * Validate service inputs
 * @param  service_name
 * @param  domain
 * @param  version
 * @return
 */
def validateInput(service_name, domain, version) {
	//events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', "Input validation")
	if(service_name == null || service_name.equals("")) {
		//events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', "Invalid service")
		error "Service Name is invalid"
	}
	//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Valid inputs")
}

/**
 * Check if a service is valid or esists first before scheduling for deletion
 * @param  domain
 * @param  service_name
 * @throws error when service is invalid
 * @return
 */
def checkServiceExists(service_name, domain, region) {
	//events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', "Check if service exists")
	try {
		def outputStr = sh (
			script: "curl -H \"Authorization: ${params.auth_token}\" 'https://${env.API_ID_DEV}.execute-api.${region}.amazonaws.com/dev/platform/is-service-available?domain=${domain}&service=${service_name}'" ,
			returnStdout: true
		).trim()
		echo outputStr
		def jsonParser = new groovy.json.JsonSlurper()
		def resultJson = jsonParser.parseText(outputStr)
		if(resultJson == null || resultJson.data == null || resultJson.data.available == null) {
			error "Is-service-available lookup failed"
		} else if(resultJson.data.available == true) {
			error "No service exists with name "+service_name+" under domain "+domain
		}
		//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
			send_status_email ("FAILED")
			error "checkServiceExists Failed. "+ex.getMessage()
		} else {
			//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
		}
	}
}


def deleteserviceindb(region, db_id) {
	//events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', "Check if service exists")
	try {
		sh "curl -X DELETE -k -v -H \"Authorization: ${params.auth_token}\" \
				'https://${env.API_ID_DEV}.execute-api.${region}.amazonaws.com/dev/platform/services/${db_id}'"
		//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
			send_status_email ("FAILED")
			error "deleteService Failed. "+ex.getMessage()
		} else {
			//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
		}
	}
}


/**
 * Delete the project repository from bitbucket
 * @param  repoName
 * @return
 */
def deleteProject(repoName) {
	//events.sendStartedEvent('DELETE_PROJECT')
	try {
		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.REPO_CREDENTIAL_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "deleting repository from bitbucket $repoName"
		def repourl = "http://" + env.REPO_BASE + "/rest/api/1.0/projects/CAS/repos/" + repoName;
		echo repourl
		def outputStr = sh (
			script: "curl -X DELETE -k -u \"$UNAME:$PWD\" '" + repourl +"'" ,
			returnStdout: true
		).trim()
		echo outputStr
		}
		//events.sendCompletedEvent('DELETE_PROJECT')
	} catch (ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "deleteProject failed. "+ex.getMessage()
	}
}

/**
 * Clean up the API gateway resource configurations specific to the service
 * @param  stage environment
 * @param  path the resource path
 * @return
 */
def cleanUpApiGatewayResources(stage, path, region) {
	//events.sendStartedEvent('DELETE_API_RESOURCE', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			//def resource_id = findResourceId(stage, path)
			def resource_id = null
			try {
				def outputStr = sh (
					script: "aws apigateway get-resources --rest-api-id "+getApiId(stage)+" --region " + region + " --output json" ,
					returnStdout: true
				).trim()

				def list = parseJson(outputStr)
				for (items in list["items"]) {
					if(items["path"] == path) {
						resource_id = items["id"]
					}
				}
			} catch(ex) {
				send_status_email ("FAILED")
				error "findResourceId Failed"+ex.getMessage()
			}
			if(resource_id != null && resource_id != ""){
				def status_json = sh (
					script: "aws apigateway delete-resource --rest-api-id "+getApiId(stage)+"  --region " + region + " --resource-id "+resource_id+" --output json" ,
					returnStdout: true
				).trim()
				def deployment_status_json = sh (
					script: "aws apigateway create-deployment --rest-api-id "+getApiId(stage) + "  --region " + region + " --stage-name "+stage+" --description 'API deployment after resource clean up' --output json" ,
					returnStdout: true
				).trim()
			} else {
				echo "Resource Id does not exists in API gateway."
				//events.sendCompletedEvent('DELETE_API_RESOURCE', "No Resource to be deleted", null, getEnvKey(stage))
			}
		} catch(ex) {
			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
			send_status_email ("FAILED")
			error ex.getMessage()
		}
	}
}

/**
 * Find the resource Id of the service deployed in API gateway
 * @param  stage string
 * @param  resourcepath string
 * @return  resource Id
 */
def findResourceId(stage, resourcePath) {
	def resource_id = null
	try {
		def outputStr = sh (
			script: "aws apigateway get-resources --rest-api-id "+getApiId(stage)+" --output json" ,
			returnStdout: true
		).trim()
		def list = parseJson(outputStr)
		for (items in list["items"]) {
			if(items["path"] == resourcePath) {
				resource_id = items["id"]
			}
		}
		return resource_id
	} catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "findResourceId Failed"+ex.getMessage()
	}
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getServiceBucket(stage) {
	if(stage == 'dev') {
		return env.WEBSITE_DEV_S3BUCKET;
	}else if (stage == 'stg') {
		return env.WEBSITE_STG_S3BUCKET;
	} else if (stage == 'prod') {
		return env.WEBSITE_PROD_S3BUCKET;
	}
}


/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getApiId(stage) {
	if(stage == 'dev') {
		return env.API_ID_DEV
	}else if (stage == 'stg') {
		return env.API_ID_STG
	} else if (stage == 'prod') {
		return env.API_ID_PROD
	}
}

/**
 * Clean up the API documentation folder from S3 corresponding to the environment
 * @param  stage the environment
 * @return  api Id
 */
def cleanUpApiDocs(stage, service, domain) {
	//events.sendStartedEvent('DELETE_API_DOC', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			def apiRootFolder = getApiDocsFolder(stage)
			sh "aws s3 rm s3://${apiRootFolder}/${domain}/${service}/${stage} --recursive"
			//events.sendCompletedEvent('DELETE_API_DOC', null, null, getEnvKey(stage))
		} catch(ex) {
			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
			send_status_email ("FAILED")
			error "cleanUpApiDocs Failed. "+ex.getMessage()
		}
	}
}

/**
 * Get the API docs folder for environment
 * @param stage environment
 * @return  folder name
 */
def getApiDocsFolder(stage) {
	return api_doc_s3_bucket
}

/**
 * Get the environment key
 * @param stage environment
 * @return  environment key to be represented in the event
 */
def getEnvKey(stage) {
	if(stage == 'dev') {
		return "DEV"
	}else if (stage == 'stg') {
		return "STG"
	} else if (stage == 'prod') {
		return "PROD"
	}
}

/**
 * Get the resource Path from domain and service name.
 * @return  formed resource path string
 */
def getResourcePath() {
	def basePath
	def pathInfo
	def resourcepath
	try {
		dir("swagger") {
			def swaggerStr = readFile('swagger.json').trim()
			def swaggerJsonObj = parseJson(swaggerStr)
			basePath = swaggerJsonObj.basePath
			def keys = swaggerJsonObj.paths.keySet()
			for (_p in keys) {
				pathInfo = _p
				break
			}
		}
		resourcepath = (basePath+"/"+pathInfo).replaceAll("//","/")
		return resourcepath
	} catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "getResourcePath Failed. "+ex.getMessage()
	}
}

/**
 * Undeploy the website. Delete the web folder from S3 bucket
 * @param stage
 * @return
 */
 def unDeployWebsite(service, domain, stage) {
 	echo "unDeployWebsite::" + service + "::" + domain + "::" + stage

 	withCredentials([
 		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
 	]) {
 		try {
 			sh "aws configure set profile.cloud-api.region ${region}"
 			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
 			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
 			sh "aws configure set preview.cloudfront true"
 			def bucketName = serviceMetadata.getBucket(stage)
 			def bucketUrl = "${bucketName}/${domain}-${service}"
 			def _exists = checkIfWebsiteExists(bucketUrl)
 			if(_exists) {
 				sh "aws s3 rm s3://${bucketUrl} --recursive"
 				cleanupS3BucketPolicy(service, domain, stage, bucketName)
 			}
 		} catch(ex) {
 			updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
 			send_status_email ("FAILED")
 			error ex.getMessage()
 		}
	}
}

/**
 * Check if the website folder existing in the S3 buckets for each environments
 * @param stage
 * @return  true/false
 */
def checkIfWebsiteExists(bucketUrl) {
	def status = true;
	try {
		sh "aws s3 ls s3://${bucketUrl}"
	}catch(ex) {
		echo "Bucket does not exist"
		status = false
	}
	return status
}

/**
 * Delete the the bucket policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupS3BucketPolicy(service, domain, stage, bucket) {
	echo "cleanupS3BucketPolicy called"

	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"
			def folderName = domain + "-" + service // temporary fix
			//def folderName = domain+"_"+service // @TODO: enable after bug fix CAPI 344
			def bucketPolicy = sh (
				script: "aws s3api get-bucket-policy --bucket ${bucket} --output json",
				returnStdout: true
			).trim()
			def policyObject = parseJson(parseJson(bucketPolicy).Policy)
			def policyObjectUpdated = [:]
			policyObjectUpdated.Version = policyObject.Version
			policyObjectUpdated.Id = policyObject.Id
			def statements = []
			def resourcePattern = "${bucket}/${folderName}/"
			for (items in policyObject.Statement) {
				if(items.Sid != folderName || !(items.Resource.indexOf(resourcePattern) > -1)) {
					def copy = [:]
					copy.putAll(items)
					statements.add(copy)
				}
			}
			policyObjectUpdated.Statement = statements
			def policy_json = JsonOutput.toJson(policyObjectUpdated)
			//def bucketName = bucket
			updateBucketPolicy(policy_json, bucket)
            resetCredentials()
		} catch(ex) {
            resetCredentials()
			if(ex.getMessage().indexOf("groovy.json.internal.LazyMap") < 0) {
				updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
				send_status_email ("FAILED")
				error "cleanupS3BucketPolicy Failed. "+ex.getMessage()
			}
		}
	}
}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}

@NonCPS
def updateBucketPolicy(policy_json, bucketName){
	try {
		sh "aws s3api put-bucket-policy \
				--output json \
				--bucket "+bucketName+" \
				--policy \'${policy_json}\'"
	} catch(e) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
			error e.getMessage()
	}
}
/**
 * Delete the the cloud Front policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupCloudFrontDistribution(service, domain, stage) {
	//events.sendStartedEvent('DELETE_CLOUDFRONT', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def distributionID
			def _Etag

			distributionID = getDistributionId(stage, domain, service)

			if (distributionID && distributionID != "")
			{
				def distributionConfig = getDistributionConfig(distributionID)
				_Etag = generateDistributionConfigForDisable(distributionConfig)
				_Etag = disableCloudFrontDistribution(distributionID, _Etag, "disable-cf-distribution-config.json", stage)
				deleteCloudFrontDistribution(distributionID, _Etag)
			}
			//events.sendCompletedEvent('DELETE_CLOUDFRONT', null, null, getEnvKey(stage))
		} catch(ex) {
				if((ex.getMessage()).indexOf("getDistributionId Failed") > -1) {
					echo "Could not find a CloudFront distribution Id for service: $service and environment $stage"
					//events.sendCompletedEvent('DELETE_CLOUDFRONT', "CF resource not available", null, getEnvKey(stage))
				} else {
					updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
					send_status_email ("FAILED")
					error "cleanupCloudFrontDistribution Failed. "+ex.getMessage()
				}
		}
	}

}

/**
 * Get the CloudFront distribution Id corresponding to the service
 * @param service
 * @param stage
 * @return
 */
def getDistributionId(stage, domain, service) {
	def distributionID
	def outputStr
	try {
		outputStr = sh (
			script: "aws cloudfront list-distributions \
				--output json \
				--query \"DistributionList.Items[?Origins.Items[?Id=='$env.env_name_prefix-$stage-static-website-origin-$domain-$service']].{Distribution:DomainName, Id:Id}\"",
			returnStdout: true
		)

		if(outputStr) {
			def outputObj = new JsonSlurper().parseText(outputStr)

			if (outputObj) {
				distributionID = outputObj[0].Id
			}
		}
	}catch (ex) {
		error "getDistributionId Failed: "+ ex.getMessage()
	}

	return distributionID
}

/**
 * Get and save the CloudFront distribution Config corresponding to the service
 * @param distributionID
 * @return
 */
def getDistributionConfig(distributionID) {
	def distributionConfig
	try {
		distributionConfig = sh (
			script: "aws cloudfront get-distribution-config \
						--output json --id "+distributionID,
			returnStdout: true
		)
		return distributionConfig
	}catch (ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "getDistributionConfig Failed."+ex.getMessage()
	}

}

/**
 * Generate Disable Distribution configuration
 * @param service
 * @param stage
 * @return
 */
def generateDistributionConfigForDisable(distributionConfig) {
	def distributionConfigObj
	def eTag
	try {
		if(distributionConfig) {
			distributionConfigObj = new JsonSlurper().parseText(distributionConfig)
		}
		eTag = distributionConfigObj.ETag
		distributionConfigObj.DistributionConfig.Enabled = false
		def updatedCfg = JsonOutput.toJson(distributionConfigObj.DistributionConfig)
		echo "updatedCfg... $updatedCfg"
		try {
			sh "echo \'$updatedCfg\' > disable-cf-distribution-config.json"
		}catch(ex) {}
		return eTag
	} catch(ex) {
		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "deletion_failed");
		send_status_email ("FAILED")
		error "generateDistributionConfigForDisable Failed."+ex.getMessage()
	}
}

/**
 * Disable Distribution configuration
 * @param distributionID
 * @param _Etag
 * @param configFile
 * @return
 */
def disableCloudFrontDistribution(distributionID, _Etag, configFile, stage) {
	//events.sendStartedEvent('DISABLE_CLOUDFRONT', "distributionID: "+distributionID, null, getEnvKey(stage))
	def disableOutput
	def eTag
	try {
		disableOutput = sh(
			script: "aws cloudfront update-distribution \
						--output json \
						--id $distributionID \
						--distribution-config file://"+configFile+" \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "disableOutput... $disableOutput"
		if(disableOutput) {
			def disableConfigObj = new JsonSlurper().parseText(disableOutput)
			eTag = disableConfigObj.ETag
		}
		echo "disable eTag...$eTag"
		//events.sendCompletedEvent('DISABLE_CLOUDFRONT', "distributionID: "+distributionID, null, getEnvKey(stage))
		return eTag
	}catch(ex){
		//events.sendFailureEvent('DISABLE_CLOUDFRONT', ex.getMessage(), null, getEnvKey(stage))
		error "disableCloudFrontDistribution. "+ex.getMessage()
	}
}

/**
 * Delete CloudFront Distribution configuration
 * @param distributionID
 * @param _Etag
 * @return
 */
def deleteCloudFrontDistribution(distributionID, _Etag) {
	// @TODO: Send an Event with distributionID, _Etag as inputs. A separate job will pick up the details and schedule for deletion
	// @TODO: Clean up code below after that
	/*
	def deleteOutput
	try {
		deleteOutput = sh(
			script: "aws cloudfront delete-distribution \
						--id $distributionID \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "deleteOutput...$deleteOutput"
		return deleteOutput
	} catch(ex) {
		error "deleteCloudFrontDistribution. "+e.getMessage()
	}
	*/
}

def loadServerlessConfig(String runtime, String configPackBBURL) {

	echo "loadServerlessConfig::" + runtime + "::" + configPackBBURL

	dir('_config') {
	    checkout([$class: 'GitSCM', branches: [
	        [name: '*/master']
	    ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
	        [credentialsId: env.REPO_CREDENTIAL_ID, url: configPackBBURL]
	    ]])
	}
	if (runtime.indexOf("nodejs") > -1) {
	    sh "cp _config/serverless-nodejs.yml ./serverless.yml"
	} else if (runtime.indexOf("java") > -1) {
	    sh "cp _config/serverless-java.yml ./serverless.yml"
	} else if (runtime.indexOf("python") > -1) {
	    sh "cp _config/serverless-python.yml ./serverless.yml"
	}
	sh "cp serverless.yml serverless-temp.yml"
}

def updateServiceInDB(service_id_in_db, devApiID, region, statusval) {
  sh "curl -H \"Content-Type: application/json\"  -H \"Authorization: "+params.auth_token+"\" -X PUT -k -v -d \
  		'{ \"status\": \"${statusval}\"}' https://${devApiID}.execute-api.${region}.amazonaws.com/dev/platform/services/${service_id_in_db}?isAdmin=true"
}


/**
 * Checkout event module code and load the module
 */
def loadEventsModule() {
}

	
def loadServiceInfo() {
	def token = setCredentials()
	def url = "$g_base_url/platform/services?domain=$domain&service=$service&isAdmin=true"
	def curlOutput = sh (script: "curl -H \"Content-Type: application/json\" \
			-H \"Authorization: $token\" \"$url\"", returnStdout: true)
  	echo "CURL o/p: $curlOutput"
  	
	def jsonParser = new groovy.json.JsonSlurper()
	def resultJson = jsonParser.parseText(curlOutput)
  	echo "Resultjson: $resultJson"
	def createby = ''
  	def pcreated = resultJson.data[0].created_by
  	echo "resultjson createby: $pcreated"
	if(resultJson != null && resultJson.data != null && resultJson.data[0].created_by != null) {
			createby = resultJson.data[0].created_by
		}
	def values = createby.split(',')
	
	echo "Services : $values"

	if (values[0]) {
		owner = values[0].replaceAll("[\n\r]", "")
	}
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def url = g_base_url + '/platform/login'
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"
		def login_json = []
		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def payload = JsonOutput.toJson(login_json)
		try {
			def token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
				 $url \
				-d \'${payload}\'", returnStdout:true)
			def jsonParser = new groovy.json.JsonSlurper()
			def resultJson = jsonParser.parseText(token)
			token = resultJson.data.token.replaceAll("[\n\r]", "")
			return token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
 }

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values =  FAILED & COMPLETED
* @return
*/
def send_status_email (build_status) {
	echo "Sending email notification to " + owner
	body = ""
	bcc_email = ""
	if (build_status == 'COMPLETED'){
		body = "Service deletion completed for service : $service in the namespace : $domain"
	}else if (build_status == 'FAILED') {
		build_url = env.BUILD_URL + 'console'
		body = "Service deletion FAILED for service : $service in the namespace : $domain"
		body = body + "\n\nFor more details, please click this link: $build_url"
	} else {
		echo "Unsupported build status, nothing to email.."
		return
	}
	try{
		mail (to: owner, bcc: bcc_email,
			subject: "Jazz Service Deletion Notification",
			body: body
		);
		echo "Sent email to " + owner + " successfully!"
	} catch (e){
		echo "Failed while sending build status notification"
	}
}

/**
 * Load metadata module groovy file
 *
 */
def loadServiceMetadataModule(buildURL, serviceType, service, domain) {
		try {
			def url = "$g_base_url/platform/services?domain=$domain&service=$service"
			def dev = env.WEBSITE_DEV_S3BUCKET
			def stg = env.WEBSITE_STG_S3BUCKET
			def prd = env.WEBSITE_PROD_S3BUCKET

			echo "loading serviceMetaData, checking repos"

			dir('service-metadata') {
				checkout([$class: 'GitSCM', branches: [
					[name: '*/master']
				], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
					[credentialsId: env.REPO_CREDENTIAL_ID, url: buildURL]
				]])
				serviceMetadata = load "service-metadata-loader.groovy"
				serviceMetadata.initialize(serviceType, service, domain, url, dev, stg, prd)
				serviceMetadata.setAuthToken(setCredentials())

				// Load and set dependent utility module.
				echo "loading util module"
				Util = load "utility-loader.groovy"
				serviceMetadata.setUtil(Util)
			}
		return serviceMetadata
		}catch(ex) {
			error "loadServiceMetadataModule Failed. "+ex.getMessage()
		}
}