{
	"swagger": "2.0",
	"info": {
		"version": "2017-01-30T23:30:18Z",
		"title": "{api_deployment_node_title}",
		"description": "API specification for Events API. This API can be used to continuously log framework events by recording event types, timestamp, usernames, event handler components, status and contextual information of every event. The API also provides history of events through the GET method."
	},
	"host": "{api_host_name}",
	"basePath": "/{domain}",
	"schemes": [
		"https"
	],
	"paths": {
		"/{service_name}": {
			"options": {
				"description": "CORS Support",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"tags": [
					"CORS"
				],
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"requestTemplates": {
						"application/json": "{\"statusCode\" : 200}"
					},
					"responses": {
						"default": {
							"statusCode": "200",
							"responseTemplates": {
								"application/json": "$input.json('$')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Default response for CORS method",
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/400ErrorResponse"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/404ErrorResponse"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/500ErrorResponse"
						}
					}
				}
			},
			"get": {
				"description": "The GET method to retrieve events that match the parameters provided.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "username",
						"in": "query",
						"type": "string",
						"description": "Authorized username on whose events are being queried. This can be a logged in CORP user, or a service account." 
					}, {
						"name": "service_name",
						"in": "query",
						"type": "string",
						"description": "The service name for which the events are being queried." 
					}, {
						"name": "last_evaluated_key",
						"in": "query",
						"type": "string",
						"description": "This is an optional parameter, which has to be provided when the results are paginated. A maximum of 500 events can be retrieved in a single call. If there are more records to be provided, the API will provide a last_evaluated_key. Input the last_evaluated_key to the next API call to get the next set of records." 
					}

				],
				"responses": {
					"200": {
						"description": "Successful Execution",
						"schema": {
							"$ref": "#/definitions/Events"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/400ErrorResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/404ErrorResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/500ErrorResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:{lambda_function_name}/invocations",
					"passthroughBehavior": "when_no_templates",
					"httpMethod": "POST",
					"credentials": "{conf-role}",
					"requestTemplates": {
						"application/json": "\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $input.json(\"$\"),\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}",
						"application/x-www-form-urlencoded": "\n#define( $body )\n  {\n  #foreach( $token in $input.path('$').split('&') )\n    #set( $keyVal = $token.split('=') )\n    #set( $keyValSize = $keyVal.size() )\n    #if( $keyValSize >= 1 )\n      #set( $key = $util.urlDecode($keyVal[0]) )\n      #if( $keyValSize >= 2 )\n        #set( $val = $util.urlDecode($keyVal[1]) )\n      #else\n        #set( $val = '' )\n      #end\n      \"$key\": \"$val\"#if($foreach.hasNext),#end\n    #end\n  #end\n  }\n#end\n\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $body,\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}"
					},
					"contentHandling": "CONVERT_TO_TEXT",
					"type": "aws",
					"responses": {
						".*\"InternalServerError\".*": {
							"statusCode": "500",
							"responseTemplates": {
								"application/json": "$input.path('$.errorMessage')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						},
						".*\"BadRequest\".*": {
							"statusCode": "400",
							"responseTemplates": {
								"application/json": "$input.path('$.errorMessage')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						},
						"default": {
							"statusCode": "200",
							"responseTemplates": {
								"application/json": "{\"data\" : $input.json('$.data'),\"input\" : $input.json('$.input')}"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						},
						".*\"NotFound\".*": {
							"statusCode": "404",
							"responseTemplates": {
								"application/json": "$input.path('$.errorMessage')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					}
				}
			},
			"post": {
				"description": " The POST method to record a event.",
				"consumes": [
					"application/json",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"application/x-www-form-urlencoded"
				],
				"parameters": [{
						"name": "param",
						"in": "body",
						"description": "post body parameter.",
						"schema": {
							"$ref": "#/definitions/EventObj"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Execution",
						"schema": {
							"$ref": "#/definitions/EventResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/400ErrorResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/404ErrorResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/500ErrorResponse"
						},
						"headers": {
							"Access-Control-Allow-Headers": {
								"type": "string"
							},
							"Access-Control-Allow-Methods": {
								"type": "string"
							},
							"Access-Control-Allow-Origin": {
								"type": "string"
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"uri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:{lambda_function_name}/invocations",
					"httpMethod": "POST",
					"credentials": "{conf-role}",
					"requestTemplates": {
						"application/json": "\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $input.json(\"$\"),\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}",
						"application/x-www-form-urlencoded": "\n#define( $body )\n  {\n  #foreach( $token in $input.path('$').split('&') )\n    #set( $keyVal = $token.split('=') )\n    #set( $keyValSize = $keyVal.size() )\n    #if( $keyValSize >= 1 )\n      #set( $key = $util.urlDecode($keyVal[0]) )\n      #if( $keyValSize >= 2 )\n        #set( $val = $util.urlDecode($keyVal[1]) )\n      #else\n        #set( $val = '' )\n      #end\n      \"$key\": \"$val\"#if($foreach.hasNext),#end\n    #end\n  #end\n  }\n#end\n\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $body,\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}"
					},
					"responses": {
						".*\"InternalServerError\".*": {
							"statusCode": "500",
							"responseTemplates": {
								"application/json": "$input.path('$.errorMessage')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						},
						".*\"BadRequest\".*": {
							"statusCode": "400",
							"responseTemplates": {
								"application/json": "$input.path('$.errorMessage')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						},
						"default": {
							"statusCode": "200",
							"responseTemplates": {
								"application/json": "{\"data\" : $input.json('$.data'),\"input\" : $input.json('$.input')}"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						},
						".*\"NotFound\".*": {
							"statusCode": "404",
							"responseTemplates": {
								"application/json": "$input.path('$.errorMessage')"
							},
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
								"method.response.header.Access-Control-Allow-Methods": "'*'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					}
				}
			}
		}
	},
	"definitions": {
		"Events": {
			"type": "object",
			"properties": {
				"data": {
					"type": "object",
					"properties": {
						"events": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/EventObj"
							}
						},
						"last_evaluated_key": {
							"type": "string",
							"description": "This is an optional parameter, which has to be provided when the results are paginated. A maximum of 500 events can be retrieved in a single call. If there are more records to be provided, the API will provide a last_evaluated_key. Input the last_evaluated_key to the next API call to get the next set of records." 
						}
					}
				},
				"input": {
					"type": "object",
					"description": "The request payload"
					
				}
			},
			"title": "Success Response"
		},
		"EventResponse": {
			"type": "object",
			"properties": {
				"data": {
					"type": "object",
					"description": "The response payload",
					"properties": {
						"event_id": {
							"type": "string",
							"description": "The unique ID returned for the event"
						}
					}

				},
				"input": {
					"$ref": "#/definitions/EventObj"
				}
			}
		},
		"400ErrorResponse": {
			"type": "object",
			"properties": {
				"error_type": {
					"type": "string",
					"default": "Bad Request format"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"404ErrorResponse": {
			"type": "object",
			"properties": {
				"error_type": {
					"type": "string",
					"default": "Resource Not Found"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"500ErrorResponse": {
			"type": "object",
			"properties": {
				"error_type": {
					"type": "string",
					"default": "Internal Server Error"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"EventObj": {
			"type": "object",
			"properties": {
				"service_context": {
					"type": "object",
					"description": "The contextual information of the event."

				},
				"event_handler": {
					"enum": [
						"SELF_SERVICE_PORTAL",
						"ONBOARDING_API",
						"JENKINS",
						"BITBUCKET",
						"AWS"
					],
					"type": "string",
					"description": "The framework component which processes the event. This could be one of self service portal, jenkins, bitbucket, aws api gateway, aws lambda etc."
				},
				"event_name": {
					"enum": [
						"CREATE_SERVICE",
						"CALL_ONBOARDING_SERVICE",
						"CALL_ONBOARDING_WORKFLOW",
						"CLONE_TEMPLATE",
						"MODIFY_TEMPLATE",
						"CREATE_SERVICE_REPO",
						"PUSH_TEMPLATE_TO_SERVICE_REPO",
						"LOCK_MASTER_BRANCH",
						"ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO",
						"COMMIT_CODE",
						"BUILD_CODE_BRANCH",
						"DEPLOY_TO_AWS",
						"RAISE_PR",
						"APPROVE_PR",
						"BUILD_MASTER_BRANCH"
					],
					"type": "string",
					"description": "Describes the action that is taking place within the serverless framework. For example, CALL_ONBOARDING_API is the event when the self-service-portal calls the on-boarding apis to on-board a new service after validating the information provided by the developer."
				},
				"service_name": {
					"type": "string",
					"description": "Name of the service being developed."
				},
				"event_status": {
					"enum": [
						"STARTED",
						"COMPLETED",
						"FAILED"
					],
					"type": "string",
					"description": "Status of the event"
				},
				"event_type": {
					"enum": [
						"SERVICE_CREATION",
						"SERVICE_ONBOARDING",
						"SERVICE_DEPLOYMENT",
						"SERVICE_UPDATE",
						"SERVICE_DELETE"
					],
					"type": "string",
					"description": "categorization of framework events. All events are associated with a customer service. The event type describes the lifecycle stage of the service."
				},
				"username": {
					"type": "string",
					"description": "Authorized username on whose behalf the event handler processes the event. This can be a logged in CORP user, or a service account."
				},
				"event_timestamp": {
					"type": "string",
					"format": "date-time",
					"description": "UTC time and date of the event. Format: YYYY-MM-DDTHH:mm:ss:SSS"
				}
			},
			"required": [
				"service_context",
				"event_handler",
				"event_name",
				"service_name",
				"event_status",
				"event_type",
				"username",
				"event_timestamp"
			]
		}
	}
}

