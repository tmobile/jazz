#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field
//@Field def environmentDeploymentMetadata
//@Field def Util

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core

//definitions
def Event_Name = [
	'GENERATE_API_DOC':'GENERATE_API_DOC',
	'UPLOAD_API_SPEC':'UPLOAD_API_SPEC',
	'DISABLE_API_CACHE':'DISABLE_API_CACHE',
	'UPDATE_SWAGGER':'UPDATE_SWAGGER',
	'DEPLOY_SWAGGER_TO_APIGATEWAY':'DEPLOY_SWAGGER_TO_APIGATEWAY',
	'UPDATE_DEPLOYMENT_CONF':'UPDATE_DEPLOYMENT_CONF',
	'UPDATE_LOGGING_CONF':'UPDATE_LOGGING_CONF',
	'GET_DEPLOYMENT_CONF':'GET_DEPLOYMENT_CONF',
	'GET_SERVICE_CODE':'GET_SERVICE_CODE',
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'CALL_ONBOARDING_WORKFLOW':'CALL_ONBOARDING_WORKFLOW',
	'RAISE_PR':'RAISE_PR',
	'VALIDATE_PRE_BUILD_CONF':'VALIDATE_PRE_BUILD_CONF',
	'CALL_ONBOARDING_SERVICE':'CALL_ONBOARDING_SERVICE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'CREATE_SERVICE':'CREATE_SERVICE',
	'BUILD':'BUILD',
	'CODE_QUALITY_CHECK':'CODE_QUALITY_CHECK',
	'UNIT_TEST':'UNIT_TEST',
	'COMMIT_CODE':'COMMIT_CODE',
	'APPROVE_PR':'APPROVE_PR',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'DEPLOY_TO_AWS':'DEPLOY_TO_AWS',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE',
	'CREATE_ASSET':'CREATE_ASSET',
	'UPDATE_ASSET':'UPDATE_ASSET'
]

def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]

@Field def configModule
@Field def configLoader

@Field def g_login_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def service_id = ''

@Field def created_by = ''

@Field def current_environment = ''
@Field def jq = '/usr/local/bin/jq'

node ()  {
	def jazzBuildModuleURL = "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
	loadConfigModule(jazzBuildModuleURL)

	g_base_url = "https://${configLoader.API.API_KEY}.execute-api.${configLoader.JAZZ.jazz_region}.amazonaws.com/prod"
	
	echo "Build triggered via branch: " + params.scm_branch + " with params " + params
	def _event = ""

    def serviceName = ""
    def cfStackName = ""
	
	if(params.service_name != null && !params.service_name.isEmpty()){
		serviceName = params.service_name
		cfStackName = params.service_name
	}
	
	def branch = params.scm_branch
	def bitbucket_name = params.service_name
	def var_bitbucket_framework_url = "http://${configLoader.REPOSITORY.REPO_BASE}/scm/${configLoader.REPOSITORY.REPO_LOC}/"
	def config
	def domain

	if(params.domain && params.domain.trim() != ""){
		bitbucket_name = params.domain.trim() + "-" + service_name.trim()
		domain = params.domain.trim()
	}

	if (params.scm_branch == 'master') {
		current_environment = 'prod'
	}else {
		current_environment = 'dev'
	}

    stage('Checkout code base') {

		sh 'rm -rf ' + bitbucket_name
		sh 'mkdir ' + bitbucket_name
        sh 'pwd'

		dir(bitbucket_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: var_bitbucket_framework_url + bitbucket_name + '.git']]])
		}

		sh 'cd ' + bitbucket_name
		def configObj = dir(bitbucket_name){
			LoadConfiguration()
		}
		
		if(configObj.service_id){	
			def url = "$g_base_url/platform/services/"+configObj.service_id
			serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL)
			serviceMetadata.setUrl(url)
			def serviceData = serviceMetadata.loadServiceMetaData()
			if(serviceData && serviceData.data){	
				config = serviceData.data['metadata']
			}else{
				error "Error while fetching service metadata"
			}
		}else{
			error "Service Id is not available."
		}

	}

	def runtime = config['providerRuntime']
	def service = config['service']
	def isScheduleEnabled = isEnabled(config, "eventScheduleRate")
	def isStreamEnabled = isEnabled(config, "event_source_stream")
	def isDynamoDbEnabled = isEnabled(config, "event_source_dynamodb")
	def isS3EventEnabled = isEnabled(config, "event_source_s3")
	def isEc2EventEnabled = isEnabled(config, "event_source_ec2")
	def isEventSchdld = false
	def internalAccess = config['require_internal_access']

	def roleARN = configLoader.JAZZ.jazz_roleId.replaceAll("/", "\\\\/")
	// @TODO: the below statement will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

  	def logStreamer = "arn:aws:lambda:${configLoader.JAZZ.jazz_region}:${roleId}:function:${configLoader.env_name_prefix}-cloud-logs-streamer-prod"

	echo "logStreamer:: " + logStreamer

	domain = config['domain']
	if (domain  && domain.trim()!="") {
			serviceName = domain.trim() + "-" + service
			cfStackName = cfStackName + "-" + domain.trim() //sets CF Stack name as service-domain-env
	}

	serviceName = "${configLoader.env_name_prefix}-${serviceName}"
	cfStackName = serviceName

    echo serviceName+"******************************************************* "

	if (isScheduleEnabled || isEc2EventEnabled || isS3EventEnabled || isStreamEnabled || isDynamoDbEnabled){
		isEventSchdld = true
	}
	dir(bitbucket_name){
		loadServerlessConfig(runtime, isEventSchdld, isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
	}

	stage ('Pre-Build Validation'){
		sendEvent(service, branch, runtime, "NA", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.STARTED, "")
		try {
			loadServiceInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment)
			send_status_email(created_by, 'STARTED', params.service_name, '')
			//clearVirtualEnv()
			validateDeploymentConfigurations(config)
			//if (isEventSchdld == true){
              	// validateUserConfigurationYml()
			//}
		}catch(ex) {
			send_status_email(created_by, 'FAILED', params.service_name, '')
			sendEvent(service, branch, runtime, "NA", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.FAILED, ex.getMessage())
			error ex.getMessage()
		}
		sendEvent(service, branch, runtime, "NA", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.COMPLETED, "")
	}

	stage ('Build') {
		sendEvent(service, branch, runtime, "NA", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.BUILD, Event_Status.STARTED, "")
		try {
			dir(bitbucket_name){
				buildLambda(runtime)
			}
		}catch(ex) {
			send_status_email(created_by, 'FAILED', params.service_name, '')
			sendEvent(service, branch, runtime, "NA", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.BUILD, Event_Status.FAILED, ex.getMessage())
			error ex.getMessage()
		}
		sendEvent(service, branch, runtime, "NA", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.BUILD, Event_Status.COMPLETED, "")
	}

	if (params.scm_branch == 'master') {
		stage ('Deployment to Production Env'){
			sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")
			dir(bitbucket_name){
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					try {
						// initialize aws credentials
						sh "aws configure set profile.cloud-api.region ${configLoader.JAZZ.jazz_region}"
						sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
						sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"


						_event = Event_Name.GET_DEPLOYMENT_CONF
						sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.STARTED, "")
						loadServerlessConfig(runtime, isEventSchdld, isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
						sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.COMPLETED, "")

						// Generate serverless yml file with domain added in function name
						echo "Generate deployment env with domain"
						_event = Event_Name.UPDATE_DEPLOYMENT_CONF
						sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.STARTED, "")
						
						writeServerlessFile(config)
						
						generateServerlessYml(service, "prod", serviceName, cfStackName)
						echo "setting lambda execution role as ${configLoader.JAZZ.jazz_roleId}";
						setLambdaExecutionRole(configLoader.JAZZ.jazz_roleId);
						sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.COMPLETED, "")

						sh "serverless deploy --stage prod -v --bucket " + configLoader.JAZZ_S3.jazz_bucket_prod

						def stackProdName = cfStackName + "-prod"
						lambdaProdARN = getLambdaARN(stackProdName)
						echo "lambdaProdARN: ${lambdaProdARN}"

						_event = Event_Name.UPDATE_LOGGING_CONF
						createSubscriptionFilters(serviceName, "prod", configLoader.JAZZ.jazz_region, logStreamer);
						sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.COMPLETED, "")

						// reset Credentials
						resetCredentials()

						// echo status
						def svc_response = echoServiceInfo("prod")
						send_status_email(created_by, 'COMPLETED', params.service_name, svc_response)

					}catch(ex) {
						send_status_email(created_by, 'FAILED', params.service_name, '')
						sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.FAILED, ex.getMessage())
						error ex.getMessage()
					}
					updateServiceInDB(service_id, domain, configLoader.API.API_KEY, configLoader.JAZZ.jazz_region, "active")
					sendEvent(service, branch, runtime, "PRODUCTION", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}//end of withCredentials
			}//end of dir
		}//end of stage to production

	}//end of stage using master
	else {
		stage ('Deployment to Dev Env'){
			sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")

			dir(bitbucket_name){

				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					def lambdaDevARN
					try {
						// initialize aws credentials
						sh "aws configure set profile.cloud-api.region ${configLoader.JAZZ.jazz_region}"
						sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
						sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

						_event = Event_Name.GET_DEPLOYMENT_CONF
						sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.STARTED, "")
						loadServerlessConfig(runtime, isEventSchdld, isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
						sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.COMPLETED, "")

						if(isScheduleEnabled) {
							def eventsArns = getEventsArn(domain,service, "dev")
							for (def i = 0; i < eventsArns.size(); i++) {
								def arn = eventsArns[i]
								//events.sendCompletedEvent('CREATE_ASSET', null, generateAssetMap("aws", arn, "cloudwatch_event", username), "prod");
							}
						}

						// Generate serverless yml file with domain added in function name
						echo "Generate deployment env with domain"
						_event = Event_Name.UPDATE_DEPLOYMENT_CONF
						sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.STARTED, "")
						sh "pwd"
						
						writeServerlessFile(config)
						
						generateServerlessYml(service, "dev", serviceName, cfStackName)
						echo "setting lambda execution role as ${configLoader.JAZZ.jazz_roleId}";
						setLambdaExecutionRole(configLoader.JAZZ.jazz_roleId);
						sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.COMPLETED, "")

						sh "serverless deploy --stage dev  -v --bucket " + configLoader.JAZZ_S3.jazz_bucket_dev
						def stackDevName = cfStackName + "-dev";
						lambdaDevARN = getLambdaARN(stackDevName);
						echo "lambdaDevARN: ${lambdaDevARN}"

						_event = Event_Name.UPDATE_LOGGING_CONF
						sendEvent(service, branch, runtime, "STAGING", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.STARTED, "")
						createSubscriptionFilters(serviceName, "dev", configLoader.JAZZ.jazz_region, logStreamer);
						sendEvent(service, branch, runtime, "STAGING", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.COMPLETED, "")
						// reset credentials
						resetCredentials()
						// echo status
						def svc_response = echoServiceInfo("dev")
						send_status_email(created_by, 'COMPLETED', params.service_name, svc_response)
					}catch(ex) {
						send_status_email(created_by, 'FAILED', params.service_name, '')
						sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, _event, Event_Status.FAILED, ex.getMessage())
						error ex.getMessage()
					}
					updateServiceInDB(service_id, domain, configLoader.API.API_KEY, configLoader.JAZZ.jazz_region, "active")
					sendEvent(service, branch, runtime, "DEVELOPMENT", configLoader.JAZZ.jazz_region, domain, configLoader.JAZZ.jazz_roleId, Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}//end of withCredentials
			}//end of dir
		}//end of stage to dev
	}//end of else deploy to dev
}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}


def addEvents(def isScheduleEnabled, def isEc2EventEnabled, def isS3EventEnabled, def isStreamEnabled, def isDynamoDbEnabled) {
	echo "addEvents to serverless.yml file"
	def sedCommand = "s/eventsDisabled/events/g";
	if(!isScheduleEnabled){
		sedCommand = sedCommand + "; /#Start:isScheduleEnabled/,/#End:isScheduleEnabled/d"
	}
	if(!isEc2EventEnabled){
		sedCommand = sedCommand + "; /#Start:isEc2EventEnabled/,/#End:isEc2EventEnabled/d"
	}
	if(!isS3EventEnabled){
		sedCommand = sedCommand + "; /#Start:isS3EventEnabled/,/#End:isS3EventEnabled/d"
	}
	if(!isStreamEnabled){
		sedCommand = sedCommand + "; /#Start:isStreamEnabled/,/#End:isStreamEnabled/d"
	}
	if(!isDynamoDbEnabled){
		sedCommand = sedCommand + "; /#Start:isDynamoDbEnabled/,/#End:isDynamoDbEnabled/d"
	}

	sh "sed -i -- '$sedCommand' ./serverless.yml"
	echoServerlessFile()
	echo "------------------------DONE--------------"
}

def addVpnDetails() {
	echo "addVpndetails to serverless.yml file"
	sh "sed -i -- 's/vpcDisabled/vpc/g' ./serverless.yml"
}

/**
*/
def isEnabled(config, key) {
	if(config.containsKey(key)) {
		return true
	}else {
		return false
	}
}

def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
	}
	def newItem = ["subnetIds", ""]
	for (item in cleanedList) {
		// Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
		//handle empty values
		def value = "";
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}
		if(eachItemList[0].trim() == "securityGroupIds")
		{

			if(value.indexOf('"') == -1)
				value = "\"" + value + "\""
			echo value
		}
		if(eachItemList[0].trim() == "subnetIds1" || eachItemList[0].trim()  == "subnetIds2" || eachItemList[0].trim()  == "subnetIds3")
		{
			if(newItem[1].trim()  == "")
				newItem[1] = "\""  + eachItemList[1].trim()
			else
				newItem[1] =  newItem[1].trim()  + "," + eachItemList[1].trim()
		}
		else if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}
	}
	if(newItem[1] != "")
	{
	 newItem[1] =  newItem[1].trim()  + "\""
		prop.put(newItem[0].trim(),  newItem[1].trim())
		def key = newItem[0].trim()
		def val = newItem[1].trim()
	}
	echo "Loaded configurations...$prop"
	return prop
}

/** Run validation based on runtime
*/
/*def runValidation(String runtime) {


} */

/**	Build project based on runtime
*/
def buildLambda(String runtime) {
	echo "installing dependencies for $runtime"
	if(runtime.indexOf("nodejs") > -1) {
		sh "npm install --save"
	}else if(runtime.indexOf("java") > -1) {
		sh "mvn package"
	}else if(runtime.indexOf("python") > -1) {
		// install requirements.txt in library folder, these python modules will be a part of deployment package
		sh "rm -rf library"
		sh "mkdir library"
		sh "pip install -r requirements.txt -t library"
		sh "touch library/__init__.py"
		// create virtual environment and install pytest
		sh """
		pip install virtualenv
		virtualenv venv
		. venv/bin/activate
		pip install pytest
		"""
	}
}

/** Run Test cases based on runtime
*/
def runTestCases(String runtime) {
	echo "Run test cases for $runtime"
	if(runtime.indexOf("nodejs") > -1) {
		sh "npm test"
	}else if(runtime.indexOf("java") > -1) {
		sh "mvn test"
	}else if(runtime.indexOf("python") > -1) {
		sh """
		. venv/bin/activate
		pip install pytest
		pytest test
		"""
	}
}

/** Parse Yml file and validate for invalid configurations
*/
/*def validateUserConfigurationYml() {
	echo "Validating serverless.yml configuration file"
	def prop = [:]
	def result = readFile('serverless.yml').trim()
	def resultList = result.tokenize("\n")

	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
		}

	//echo "result of yaml parsing after clean up....$cleanedList"

	for (item in cleanedList) {
		def eachItemList = item.tokenize(":")
		//echo "result of yaml parsing eachItemList....$eachItemList"

		//handle empty values
		def value = null;
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}

		if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}
	}

	// validate for invalid configurations
	if(prop.containsKey("events")) {
		//@TODO: For stricter validation: check if prop['events']['schedule'] is valid
		//It should either be string in the format rate(*****) or cron(****)
		//OR an object with "rate" property.
	}else {
		error "Key $prop['events'] is required"
	}
} */


/** Reset credentials
*/
def resetCredentials() {
	echo "resetting AWS credentials"
	sh "aws configure set profile.tmoDevOps.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
	sh "aws configure set profile.tmoDevOps.aws_secret_access_key XXXXXXXXXXXXXXXXXXXXXX"
}

/** Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {
	if(prop.containsKey("service")) {
		if(prop['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}
	}else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}
	if(prop.containsKey("providerRuntime")) {
		def _runtime = prop['providerRuntime']
		if(_runtime == "") {
			error "Wrong configuration. Value for Key 'providerRuntime' is missing in the configuration"
		} else {
			def validRuntimes =["nodejs4.3", "python2.7", "java8"]  //@TODO. Add more runtime supports. DSundar3
			def flag = false
			
			for(int i = 0; i < validRuntimes.size(); i++) {
				if(_runtime == validRuntimes[i]) {
					flag = true
				}
			}

			if(!flag) {
				echo "$flag"
				error "Runtime given in the configuration is not valid."
			}
		}
	}else {
		error "Wrong configuration. Key 'providerRuntime' is missing in the configuration"
	}
	if(prop.containsKey("providerTimeout")) {
		if(prop['providerTimeout'] == "") {
			error "Wrong configuration. Value for Key 'providerTimeout' is missing in the configuration"
		}else if(Integer.parseInt(prop['providerTimeout']) > 300) { // Should not be a high
			error "Wrong configuration. Value for Key 'providerTimeout' should be a less than 160"
		}
	}else {
		error "Wrong configuration. Key 'providerTimeout' is missing in the configuration"
	}

	if(prop.containsKey("region")) {
		if(prop['region'] == "") {
			error "Wrong configuration. Value for Key 'region' is missing in the configuration"
		}else if(prop['region'] != configLoader.JAZZ.jazz_region) {
			error "Wrong configuration. Value for Key 'region' should be ${region}"
		}
	}else {
		error "Wrong configuration. Key 'region' is missing in the configuration"
	}

	def runtime = prop['providerRuntime']
	if(runtime.indexOf("java") > -1) {

		if(prop.containsKey("artifact")) {
			if(prop['artifact'] == "") {
				error "Wrong configuration. Value for Key 'artifact' is missing in the configuration"
			}
		}else {
			error "Wrong configuration. Key 'artifact' is missing in the configuration"
		}

		if(prop.containsKey("mainClass")) {
			if(prop['mainClass'] == "") {
				error "Wrong configuration. Value for Key 'mainClass' is missing in the configuration"
			}
		}else {
			error "Wrong configuration. Key 'mainClass' is missing in the configuration"
		}
	}
}


def loadServerlessConfig(String runtime, def isEventSchdld, def isScheduleEnabled, def isEc2EventEnabled, def isS3EventEnabled, def isStreamEnabled, def isDynamoDbEnabled){

    echo " load serverless...."
		def config = LoadConfiguration()
		//def subnetIds = config['subnetIds']
		//def securityGroupIds = config['securityGroupIds']
		//def internalAccess = config['require_internal_access']
		//sh "sed -i -- 's/securityGroupIds/securityGroupIdsOld/g' deployment-env.yml"
		//sh "sed -i -- 's/subnetIds/subnetIdsOld/g' deployment-env.yml"
		//sh "echo '\nsubnetIds : $subnetIds\nsecurityGroupIds : $securityGroupIds\n' >> deployment-env.yml"

		def configPackBBURL = "http://${configLoader.REPOSITORY.REPO_BASE}/scm/${repo_core}/serverless-config-pack.git"

		dir('_config') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: configPackBBURL]
			]])
		}

	echo "isEventSchdld: $isEventSchdld,isScheduleEnabled: $isScheduleEnabled, isEc2EventEnabled: $isEc2EventEnabled,  isS3EventEnabled: $isS3EventEnabled, isStreamEnabled: $isStreamEnabled, isDynamoDbEnabled: $isDynamoDbEnabled"

	if(runtime.indexOf("nodejs") > -1) {
		sh "cp _config/serverless-nodejs.yml ./serverless.yml"
	}else if(runtime.indexOf("java") > -1) {
		sh "cp _config/serverless-java.yml ./serverless.yml"
	}else if(runtime.indexOf("python") > -1) {
		sh "cp _config/serverless-python.yml ./serverless.yml"
	}
	// serverless.yml file that is loaded contains all events enabled.
	// remove events if the not selected and also enable events
	if (isEventSchdld == true) {
		addEvents(isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
	}

	/*Based on the require_internal_access flag in deployment-env.yml enabling  vpn*/
	//if ((internalAccess != null && internalAccess.equals('true')) || internalAccess == null) {
	//	addVpnDetails()
	// }
	echoServerlessFile()
	/**sh "cp _config/$serverlessFileName ./serverless.yml"*/
}

def echoServiceInfo(String env) {
	echo "Deployment info:"
	sh "serverless --stage $env info -v > deploy-info.txt"

	def arn = "unknown"
	def svc_response = "unknown"
	def result = readFile('deploy-info.txt').trim()
	def resultList = result.tokenize("\n")

	for (item in resultList) {
		if(item.startsWith("HandlerLambdaFunctionQualifiedArn")) {
			arn = item.trim().substring(35)
			version = arn.tokenize(':').last()
			arn = arn.substring(0, arn.length()-version.length()-1)

			svc_response = "Your service endpoint: " + arn
		}
	}

	echo "==============================================================================================="
	echo svc_response
	echo "==============================================================================================="
	return svc_response

}

/**
	Create the subscription filters and loggroup if not existing
**/
def createSubscriptionFilters(String service, String env, String region, String logStreamer) {
	def lambda = "/aws/lambda/"+service+"-"+env
	def cloudLogsStreamer = logStreamer
	try {
		sh "aws logs create-log-group --log-group-name "+lambda+" --region "+region
	}catch(Exception ex) {}// ignore if already existing

	try {
		filter_json = sh (
			script: "aws logs describe-subscription-filters --output json --log-group-name \""+lambda+"\" --region "+region ,
			returnStdout: true
		).trim()
		echo "${filter_json}"
		def describeJson = new groovy.json.JsonSlurper()
		def resultJson = describeJson.parseText(filter_json)
        filtername = resultJson.subscriptionFilters[0].filterName
		echo "removing existing filter... $filtername"
		if(filtername != "" && !filtername.equals(lambda)) {
			sh "aws logs delete-subscription-filter --output json --log-group-name \""+lambda+"\" --filter-name \""+filtername+"\" --region "+region
		}
	}catch(Exception ex) {}// ignore error if not created yet

	sh "aws logs put-subscription-filter --output json --log-group-name \""+lambda+"\" --filter-name \""+lambda+"\" --filter-pattern \"\" --destination-arn \""+cloudLogsStreamer+"\" --region "+region
}
/**
	Generate the serverless yml file with domain name in lambda name
*/
def generateServerlessYml(service, env, serviceName, cfStackName) {
	sh "pwd"
	sh "sed -i -- 's/name: \${self:service}-\${self:custom.myStage}/name: ${serviceName}-${env}/g' serverless.yml"
	sh "sed -i -- 's/service: \${file(deployment-env.yml):service}/service: ${cfStackName}/g' serverless.yml"
}


def writeServerlessFile(config){
	sh "pwd"
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/" + config['region'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/" + config['domain'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/" + config['owner'] + "/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|" + config['iamRoleARN'] + "|g' serverless.yml" 	
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/" + config['providerRuntime'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/" + config['providerMemorySize'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/" + config['providerTimeout'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleRate}/" + config['eventScheduleRate'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleEnable}/" + config['eventScheduleEnable'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/" + config['securityGroupIds'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/" + config['subnetIds'] + "/g' serverless.yml"
	
	if(config['artifact']){
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/" + config['artifact'] + "/g' serverless.yml"
	}
	if(config['mainClass']){
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/" + config['mainClass'] + "/g' serverless.yml"
	}
	
}

/**
	Set the Lambda execution role. If user provided a custom role override the default.
*/
def setLambdaExecutionRole(role) {
	sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#"+role+"#g' serverless.yml"
}
/**
*   Clear Virtualenvironment
**/
//def clearVirtualEnv() {
//		sh "rm -rf venv" // just delete the venv folder
//}

def sendEvent(service_name, branch, runtime, environment, region, domain, iam_role, event_name, event_status, error){

}

def loadServiceInfo(service, domain, serviceUrl, endpointKey) {
	def token = setCredentials()
	def url = "$serviceUrl?domain=$domain&service=$service&isAdmin=true"
	def curlOutput = sh (script: "curl -H \"Content-Type: application/json\" \
			-H \"Authorization: $token\" \"$url\" | $jq -r '.data[0] | [.id, .created_by] | join(\",\")'", returnStdout: true)
	def values = curlOutput.split(',')
	if (values[0]) {
		service_id = values[0].replaceAll("[\n\r]", "")
	}
	if (values[1]) {
		created_by = values[1].replaceAll("[\n\r]", "")
	}
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def loginUrl = g_base_url + '/platform/login'
	def token
	
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]

		def payload = JsonOutput.toJson(login_json)

		try {
			token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\' | $jq -r '.data.token'", returnStdout:true)

			token = token.replaceAll("[\n\r]", "")
			return token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (email_id, build_status, service, email_content) {
   	echo "Sending build notification to " + email_id
	def body_subject = ''
	def body_text = ''
	def cc_email = ''
	def body_html = ''

   	if (build_status == 'STARTED') {
		body_subject = 'Jazz Build Notification: Deployment STARTED for service: ' + service
   	} else if (build_status == 'FAILED') {
		echo "email status failed"
		def build_url = env.BUILD_URL + 'console'
		body_subject = 'Jazz Build Notification: Deployment FAILED for service: ' + service
		body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
   	} else if (build_status == 'COMPLETED'){
        body_subject = 'Jazz Build Notification: Deployment COMPLETED successfully for service: ' + service
   	} else {
		echo "Unsupported build status, nothing to email.."
		return
   	}
   	
	   if (email_content != ''){
        body_text = body_text + '\n\n' + email_content
	}

	def fromStr = 'JAZZ ADMIN <' + configLoader.JAZZ.JAZZ_ADMIN + '>'
	body = JsonOutput.toJson([
					from : fromStr,
					to : email_id,
					subject : body_subject,
					text : body_text,
					cc : cc_email,
					html : body_html
			    ])

   	try{
		def sendMail = sh (script: "curl -X POST \
						${g_base_url}/platform/email \
						-k -v -H \"Authorization: $g_login_token\" \
						-H \"Content-Type: application/json\" \
						-d \'${body}\'", returnStdout: true).trim()
		def responseJSON = parseJson(sendMail)
		if(responseJSON.data){
			echo "successfully sent e-mail to $email_id"
		} else {
			echo "exception occured while sending e-mail: $responseJSON"
		}
   	} catch (e){
     	echo "Failed while sending build status notification"
   	}
}

def updateServiceInDB(service_id, domain, apiID, region, status) {

	try {
		echo "svc id ===============" + service_id
		echo "domain ===============" + domain
		def outputStr = sh (
			script: "curl -H \"Content-Type: application/json\" -H \"Authorization: "+g_login_token+"\" -X PUT -k -v -d '{ \"status\": \"" + status + "\"}' https://" + apiID + ".execute-api." + region + ".amazonaws.com/prod/platform/services/" + service_id + "/",
			returnStdout: true
		).trim()
		echo "outputStr===============" + outputStr
	}catch (ex) {
		error "updateServiceInDB Failed. "+ex.getMessage()
	}
}

/*
* Load environment variables from build module
*/
def loadConfigModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
	}
}

/**
 *  Function to get arns of the triggers/events configured for the Lambda.
 *
 */
def getEventsArn(domain, service, env) {
	echo "in getEventsArn - if domain, lambdaFnName: ${domain}-${service}-${env}"
	def eventsArn = []
	try {
		def lambdaFnName = service+"-"+env
		if(domain){
			lambdaFnName = domain+"-"+lambdaFnName
		}
		def lambdaPolicyTxt = sh (script:"aws lambda get-policy --function-name $lambdaFnName --output json", returnStdout: true)
		def policyLists = null
		if(lambdaPolicyTxt) {
			def lambdaPolicyJson = new groovy.json.JsonSlurperClassic()
			policyLists = lambdaPolicyJson.parseText(lambdaPolicyJson.parseText(lambdaPolicyTxt).Policy)
			if(policyLists) {
				for (st in policyLists.Statement) {
					if (st.Principal.Service == "events.amazonaws.com") {
						if(st.Condition.ArnLike["AWS:SourceArn"]) {
							eventsArn.push(st.Condition.ArnLike["AWS:SourceArn"])
						}
					}
				}
			}
		}
		return eventsArn
	} catch (ex) {
		// Skip the 'ResourceNotFoundException' when deploying first time. Workflow can't fail here.
		echo  "Can't fetch the events policy configurations for lambda. "+ ex.getMessage()
		return []
	}
}

def getLambdaARN (String stackName) {
	def ARN = "";
	
	try {
		def cloudformation_resources = "";
		cloudformation_resources = sh(returnStdout: true, script: "aws cloudformation describe-stacks --output json --stack-name ${stackName} --profile cloud-api")

		def jsonSlurper = new JsonSlurper()
		def parsedObject = jsonSlurper.parseText(cloudformation_resources);
		def outputs = parsedObject.Stacks[0].Outputs;

		for (output in outputs) {
			if(output.OutputKey == "HandlerLambdaFunctionArn") {
				ARN = output.OutputValue
			}
		}
	} catch(ex) {
		error ex.getMessage();
	}

	return ARN;
}


@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/**
 * Load metadata module groovy file
 *
 */
def loadServiceMetadataModule(buildURL) {
	try {						
		echo "loading serviceMetaData, checking repos"

		dir('service-metadata') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildURL]
			]])
			serviceMetadata = load "service-metadata-loader.groovy"			
			serviceMetadata.setAuthToken(setCredentials())

			// Load and set dependent utility module.
			echo "loading util module"
			Util = load "utility-loader.groovy"
			serviceMetadata.setUtil(Util)
			return serviceMetadata 
		}
	
	}catch(ex) {
		error "loadServiceMetadataModule Failed. "+ex.getMessage()
	}
}