#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core

@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

//definitions
def Event_Name = [
	'GENERATE_API_DOC':'GENERATE_API_DOC',
	'UPLOAD_API_SPEC':'UPLOAD_API_SPEC',
	'DISABLE_API_CACHE':'DISABLE_API_CACHE',
	'UPDATE_SWAGGER':'UPDATE_SWAGGER',
	'DEPLOY_SWAGGER_TO_APIGATEWAY':'DEPLOY_SWAGGER_TO_APIGATEWAY',
	'UPDATE_DEPLOYMENT_CONF':'UPDATE_DEPLOYMENT_CONF',
	'UPDATE_LOGGING_CONF':'UPDATE_LOGGING_CONF',
	'GET_DEPLOYMENT_CONF':'GET_DEPLOYMENT_CONF',
	'GET_SERVICE_CODE':'GET_SERVICE_CODE',
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'CALL_ONBOARDING_WORKFLOW':'CALL_ONBOARDING_WORKFLOW',
	'RAISE_PR':'RAISE_PR',
	'VALIDATE_PRE_BUILD_CONF':'VALIDATE_PRE_BUILD_CONF',
	'CALL_ONBOARDING_SERVICE':'CALL_ONBOARDING_SERVICE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'CREATE_SERVICE':'CREATE_SERVICE',
	'BUILD':'BUILD',
	'CODE_QUALITY_CHECK':'CODE_QUALITY_CHECK',
	'UNIT_TEST':'UNIT_TEST',
	'COMMIT_CODE':'COMMIT_CODE',
	'APPROVE_PR':'APPROVE_PR',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'DEPLOY_TO_AWS':'DEPLOY_TO_AWS',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE',
	'CREATE_ASSET':'CREATE_ASSET',
	'UPDATE_ASSET':'UPDATE_ASSET'
]

def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def serviceConfigdata
@Field def auth_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def current_environment = ''
@Field def stack_name
node ()  {
	def jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModule(jazzBuildModuleURL)

    g_base_url ="https://${configLoader.AWS.API.PROD_ID}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	
	echo "Build triggered via branch: " + params.scm_branch + " with params " + params
	def _event = ""
	
	def branch = params.scm_branch
	def repo_name = params.service_name
	
	if(domain && domain != ""){
		repo_name = params.domain + "_" + params.service_name
	}
	
	def config
	def domain = params.domain

			
	if (params.scm_branch == 'master') {
		current_environment = 'prod'
	}else {
		current_environment = 'dev'
	}

    stage('Checkout code base') {

		sh 'rm -rf ' + repo_name
		sh 'mkdir ' + repo_name
        sh 'pwd'

		def repocloneUrl
		if(domain && domain == "jazz"){
			repocloneUrl = scmModule.getCoreRepoCloneUrl(repo_name)
		}else{					
			auth_token = setCredentials()
			repocloneUrl = scmModule.getRepoCloneUrl(repo_name)
		}
		
		dir(repo_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: repocloneUrl]]])
		}

		def configObj = dir(repo_name){
			LoadConfiguration()
		}
		
		if(configObj.service_id){	
			config = serviceConfigdata.loadServiceMetadata(configObj.service_id,configLoader)
		}else{
			error "Service Id is not available."
		}

	}

	def runtime = config['providerRuntime']
	def service = config['service']
	def isScheduleEnabled = isEnabled(config, "eventScheduleRate")
	def isStreamEnabled = isEnabled(config, "event_source_stream")
	def isDynamoDbEnabled = isEnabled(config, "event_source_dynamodb")
	def isS3EventEnabled = isEnabled(config, "event_source_s3")
	def isEc2EventEnabled = isEnabled(config, "event_source_ec2")
	def isEventSchdld = false
	def internalAccess = config['require_internal_access']
	domain = config['domain']	
	def roleARN = configLoader.AWS.ROLEID.replaceAll("/", "\\\\/")
	// @TODO: the below statement will be replaced with regular expression in very near future;
	def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))
	
	stackName = "${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}-${current_environment}"
	
	if (isScheduleEnabled || isEc2EventEnabled || isS3EventEnabled || isStreamEnabled || isDynamoDbEnabled){
		isEventSchdld = true
	}
	dir(repo_name){
		loadServerlessConfig(runtime, isEventSchdld, isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
		if(domain && domain == "jazz"){
			stage ('Update Service Template'){
				sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")
				echo "Inside Update service template"
				try{
					updatePlatformServiceTemplate(config,roleARN,roleId,current_environment,repo_name)					
				}
				catch(error){
					sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.MODIFY_TEMPLATE, Event_Status.COMPLETED, "")
					error "Error occured while updating service template."
				}
			}			
		}
		stage ('Pre-Build Validation'){
			sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.STARTED, "")
			try {
				send_status_email(config, 'STARTED',"")
				validateDeploymentConfigurations(config)
			}catch(ex) {
				send_status_email(config, 'FAILED',"")
				sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.FAILED, ex.getMessage())
				error ex.getMessage()
			}
			sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.COMPLETED, "")
		}			
			

		stage ('Build') {
			sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.BUILD, Event_Status.STARTED, "")
			try {
				buildLambda(runtime)				
			}catch(ex) {
				sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.BUILD, Event_Status.FAILED, ex.getMessage())
				error ex.getMessage()
			}
			sendEvent(service, branch, runtime, "NA", configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.BUILD, Event_Status.COMPLETED, "")
		}

		def env_key
		if(branch == "master") {
			env_key = "PROD"
		}else{
			env_key = "DEV"
		}
		stage("Deployment to ${env_key} environment") {	
			sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					try {
						// initialize aws credentials
						sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
						sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
						sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"


						_event = Event_Name.GET_DEPLOYMENT_CONF
						sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, _event, Event_Status.STARTED, "")
						loadServerlessConfig(runtime, isEventSchdld, isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
						sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, _event, Event_Status.COMPLETED, "")

						// Generate serverless yml file with domain added in function name
						echo "Generate deployment env with domain"
						_event = Event_Name.UPDATE_DEPLOYMENT_CONF
						sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, _event, Event_Status.STARTED, "")

						writeServerlessFile(config,current_environment)
						
						echo "setting lambda execution role as ${configLoader.AWS.ROLEID}";
						setLambdaExecutionRole(configLoader.AWS.ROLEID);
						sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, _event, Event_Status.COMPLETED, "")

						def envBucketKey = "${env_key}${configLoader.JAZZ.S3_BUCKET_NAME_SUFFIX}"
						sh "serverless deploy --stage ${current_environment} -v --bucket ${configLoader.AWS.S3[envBucketKey]}"
						
						def lambdaARN = getLambdaARN(stackName)
						echo "lambdaARN: ${lambdaARN}"
						// reset Credentials
						resetCredentials()					
						if(domain != "jazz"){
							createSubscriptionFilters(stackName,configLoader.AWS.REGION,roleId);							
						}
						_event = Event_Name.UPDATE_LOGGING_CONF
						sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, _event, Event_Status.COMPLETED, "")
					
						if(domain && domain == "jazz"){
							serviceConfigdata.setKinesisStream(config)
						}else{
							updateServiceInDB(config, "active")							
						}	
						def svc_response = echoServiceInfo(current_environment)
						send_status_email(config, 'COMPLETED',svc_response)
					}catch(ex) {
						send_status_email(config, 'FAILED','')						
						sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, _event, Event_Status.FAILED, ex.getMessage())
						error ex.getMessage()
					}					
					sendEvent(service, branch, runtime, env_key, configLoader.AWS.REGION, domain, configLoader.AWS.ROLEID, Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}//end of withCredentials
		}//end of stage to production
	}
}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}


def addEvents(def isScheduleEnabled, def isEc2EventEnabled, def isS3EventEnabled, def isStreamEnabled, def isDynamoDbEnabled) {
	echo "addEvents to serverless.yml file"
	def sedCommand = "s/eventsDisabled/events/g";
	if(!isScheduleEnabled){
		sedCommand = sedCommand + "; /#Start:isScheduleEnabled/,/#End:isScheduleEnabled/d"
	}
	if(!isEc2EventEnabled){
		sedCommand = sedCommand + "; /#Start:isEc2EventEnabled/,/#End:isEc2EventEnabled/d"
	}
	if(!isS3EventEnabled){
		sedCommand = sedCommand + "; /#Start:isS3EventEnabled/,/#End:isS3EventEnabled/d"
	}
	if(!isStreamEnabled){
		sedCommand = sedCommand + "; /#Start:isStreamEnabled/,/#End:isStreamEnabled/d"
	}
	if(!isDynamoDbEnabled){
		sedCommand = sedCommand + "; /#Start:isDynamoDbEnabled/,/#End:isDynamoDbEnabled/d"
	}

	sh "sed -i -- '$sedCommand' ./serverless.yml"
	echoServerlessFile()
	echo "------------------------DONE--------------"
}


/**
*/
def isEnabled(config, key) {
	if(config.containsKey(key)) {
		return true
	}else {
		return false
	}
}

def LoadConfiguration() {
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def prop = [: ]
	def resultList = result.tokenize("\n")

    // delete commented lines
    def cleanedList = []
    for (i in resultList) {
        if (i.toLowerCase().startsWith("#")) {} else {
            cleanedList.add(i)
        }
    }
    // echo "result of yaml parsing after clean up....$cleanedList"
    for (item in cleanedList) {
        // Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");
		def eachItemList = item.tokenize("#")
        //handle empty values
        def value = null;
        if (eachItemList[1]) {
            value = eachItemList[1].trim();
        }

        if (eachItemList[0]) {
            prop.put(eachItemList[0].trim(), value)
        }

    }
	echo "Loaded configurations....$prop"
	return prop	
}


/** Run validation based on runtime
*/
/*def runValidation(String runtime) {


} */

/**	Build project based on runtime
*/
def buildLambda(String runtime) {
	echo "installing dependencies for $runtime"
	if(runtime.indexOf("nodejs") > -1) {
		sh "npm install --save"
	}else if(runtime.indexOf("java") > -1) {
		sh "mvn package"
	}else if(runtime.indexOf("python") > -1) {
		// install requirements.txt in library folder, these python modules will be a part of deployment package
		sh "rm -rf library"
		sh "mkdir library"
		sh "pip install -r requirements.txt -t library"
		sh "touch library/__init__.py"
		// create virtual environment and install pytest
		sh """
		pip install virtualenv
		virtualenv venv
		. venv/bin/activate
		pip install pytest
		"""
	}
}




/** Reset credentials
*/
def resetCredentials() {
	echo "resetting AWS credentials"
	sh "aws configure set profile.tmoDevOps.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
	sh "aws configure set profile.tmoDevOps.aws_secret_access_key XXXXXXXXXXXXXXXXXXXXXX"
}

/** Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {
	if(prop.containsKey("service")) {
		if(prop['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}
	}else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}
	if(prop.containsKey("providerRuntime")) {
		def _runtime = prop['providerRuntime']
		if(_runtime == "") {
			error "Wrong configuration. Value for Key 'providerRuntime' is missing in the configuration"
		} else {
			def validRuntimes =["nodejs4.3","nodejs6.10", "python2.7", "java8"]  //@TODO. Add more runtime supports. DSundar3
			def flag = false
			
			for(int i = 0; i < validRuntimes.size(); i++) {
				if(_runtime == validRuntimes[i]) {
					flag = true
				}
			}

			if(!flag) {
				echo "$flag"
				error "Runtime given in the configuration is not valid."
			}
		}
	}else {
		error "Wrong configuration. Key 'providerRuntime' is missing in the configuration"
	}
	if(prop.containsKey("providerTimeout")) {
		if(prop['providerTimeout'] == "") {
			error "Wrong configuration. Value for Key 'providerTimeout' is missing in the configuration"
		}else if(Integer.parseInt(prop['providerTimeout']) > 300) { // Should not be a high
			error "Wrong configuration. Value for Key 'providerTimeout' should be a less than 160"
		}
	}else {
		error "Wrong configuration. Key 'providerTimeout' is missing in the configuration"
	}

	if(prop.containsKey("region")) {
		if(prop['region'] == "") {
			error "Wrong configuration. Value for Key 'region' is missing in the configuration"
		}else if(prop['region'] != configLoader.AWS.REGION) {
			error "Wrong configuration. Value for Key 'region' should be ${region}"
		}
	}else {
		error "Wrong configuration. Key 'region' is missing in the configuration"
	}

	def runtime = prop['providerRuntime']
	if(runtime.indexOf("java") > -1) {

		if(prop.containsKey("artifact")) {
			if(prop['artifact'] == "") {
				error "Wrong configuration. Value for Key 'artifact' is missing in the configuration"
			}
		}else {
			error "Wrong configuration. Key 'artifact' is missing in the configuration"
		}

		if(prop.containsKey("mainClass")) {
			if(prop['mainClass'] == "") {
				error "Wrong configuration. Value for Key 'mainClass' is missing in the configuration"
			}
		}else {
			error "Wrong configuration. Key 'mainClass' is missing in the configuration"
		}
	}
}


def loadServerlessConfig(String runtime, def isEventSchdld, def isScheduleEnabled, def isEc2EventEnabled, def isS3EventEnabled, def isStreamEnabled, def isDynamoDbEnabled){

		def configPackURL = scmModule.getCoreRepoCloneUrl("serverless-config-pack")

		dir('_config') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: configPackURL]
			]])
		}

	echo "isEventSchdld: $isEventSchdld,isScheduleEnabled: $isScheduleEnabled, isEc2EventEnabled: $isEc2EventEnabled,  isS3EventEnabled: $isS3EventEnabled, isStreamEnabled: $isStreamEnabled, isDynamoDbEnabled: $isDynamoDbEnabled"

	if(runtime.indexOf("nodejs") > -1) {
		sh "cp _config/serverless-nodejs.yml ./serverless.yml"
	}else if(runtime.indexOf("java") > -1) {
		sh "cp _config/serverless-java.yml ./serverless.yml"
	}else if(runtime.indexOf("python") > -1) {
		sh "cp _config/serverless-python.yml ./serverless.yml"
	}
	
	if (isEventSchdld == true) {
		addEvents(isScheduleEnabled, isEc2EventEnabled, isS3EventEnabled, isStreamEnabled, isDynamoDbEnabled)
	}

	echoServerlessFile()
}

def echoServiceInfo(String env) {
	echo "Deployment info:"
	sh "serverless --stage $env info -v > deploy-info.txt"

	def arn = "unknown"
	def svc_response = "unknown"
	def result = readFile('deploy-info.txt').trim()
	def resultList = result.tokenize("\n")

	for (item in resultList) {
		if(item.startsWith("HandlerLambdaFunctionQualifiedArn")) {
			arn = item.trim().substring(35)
			version = arn.tokenize(':').last()
			arn = arn.substring(0, arn.length()-version.length()-1)

			svc_response = "Your service endpoint: " + arn
		}
	}

	echo "==============================================================================================="
	echo svc_response
	echo "==============================================================================================="
	return svc_response

}

/**
	Create the subscription filters and loggroup if not existing
**/
def createSubscriptionFilters(stackName, region,roleId) {
	def lambda = "/aws/lambda/${stackName}"
	def logStreamer = "arn:aws:lambda:${configLoader.AWS.REGION}:${roleId}:function:${configLoader.INSTANCE_PREFIX}-jazz-cloud-logs-streamer-prod"
	try {
		sh "aws logs create-log-group --log-group-name ${lambda} --region ${region}"
	}catch(Exception ex) {}// ignore if already existing

	try {
		filter_json = sh (
			script: "aws logs describe-subscription-filters --output json --log-group-name \""+lambda+"\" --region "+region ,
			returnStdout: true
		).trim()
		echo "${filter_json}"
		def describeJson = new groovy.json.JsonSlurper()
		def resultJson = describeJson.parseText(filter_json)
        filtername = resultJson.subscriptionFilters[0].filterName
		echo "removing existing filter... $filtername"
		if(filtername != "" && !filtername.equals(lambda)) {
			sh "aws logs delete-subscription-filter --output json --log-group-name \""+lambda+"\" --filter-name \""+filtername+"\" --region "+region
		}
	}catch(Exception ex) {}// ignore error if not created yet
	
	sh "aws logs put-subscription-filter --output json --log-group-name \""+lambda+"\" --filter-name \""+lambda+"\" --filter-pattern \"\" --destination-arn \""+logStreamer+"\" --region "+region
}

def writeServerlessFile(config,current_environment){
	sh "pwd"
	sh "sed -i -- 's/\${file(deployment-env.yml):service}/${configLoader.INSTANCE_PREFIX}-${config['domain']}-${config['service']}/g' serverless.yml"
	sh "sed -i -- 's/{env-stage}/" + current_environment + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):region}/" + config['region'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):domain, self:provider.domain}/" + config['domain'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):owner, self:provider.owner}/" + config['owner'] + "/g' serverless.yml"
	sh "sed -i -e 's|\${file(deployment-env.yml):iamRoleARN}|" + config['iamRoleARN'] + "|g' serverless.yml" 	
	sh "sed -i -- 's/\${file(deployment-env.yml):providerRuntime}/" + config['providerRuntime'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerMemorySize}/" + config['providerMemorySize'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):providerTimeout}/" + config['providerTimeout'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleRate}/" + config['eventScheduleRate'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):eventScheduleEnable}/" + config['eventScheduleEnable'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):securityGroupIds}/" + config['securityGroupIds'] + "/g' serverless.yml"
	sh "sed -i -- 's/\${file(deployment-env.yml):subnetIds}/" + config['subnetIds'] + "/g' serverless.yml"
	
	if(config['artifact']){
		sh "sed -i -- 's/\${file(deployment-env.yml):artifact}/" + config['artifact'] + "/g' serverless.yml"
	}
	if(config['mainClass']){
		sh "sed -i -- 's/\${file(deployment-env.yml):mainClass}/" + config['mainClass'] + "/g' serverless.yml"
	}
	
}

/**
	Set the Lambda execution role. If user provided a custom role override the default.
*/
def setLambdaExecutionRole(role) {
	sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#"+role+"#g' serverless.yml"
}


def sendEvent(service_name, branch, runtime, environment, region, domain, iam_role, event_name, event_status, error){

}



/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def loginUrl = g_base_url + '/jazz/login'
	def token
	
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = parseJson(token)
			tokenJson_token = tokenJson.data.token
			
			return tokenJson_token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (config, build_status, email_content) {
	if(domain != "jazz"){
		echo "Sending build notification to ${config['created_by']}"
		def body_subject = ''
		def body_text = ''
		def cc_email = ''
		def body_html = ''
		if (build_status == 'STARTED') {
			echo "email status started"
			body_subject = 'Jazz Build Notification: Deployment STARTED for service: ' + config['service']
		} else if (build_status == 'FAILED') {
			echo "email status failed"
			def build_url = env.BUILD_URL + 'console'
			body_subject = 'Jazz Build Notification: Deployment FAILED for service: ' + config['service']
			body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
		} else if (build_status == 'COMPLETED'){
			body_subject = 'Jazz Build Notification: Deployment COMPLETED successfully for service: ' + config['service']
		} else {
			echo "Unsupported build status, nothing to email.."
			return
		}
		if (email_content != ''){
			body_text = body_text + '\n\n' + email_content
		}
		def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
		body = JsonOutput.toJson([
						from : fromStr,
						to : config['created_by'],
						subject : body_subject,
						text : body_text,
						cc : cc_email,
						html : body_html
					])

		try{
			def sendMail = sh (script: "curl -X POST \
					${g_base_url}/jazz/email \
					-k -v -H \"Authorization: $auth_token\" \
					-H \"Content-Type: application/json\" \
					-d \'${body}\'", returnStdout: true).trim()
			def responseJSON = parseJson(sendMail)
			if(responseJSON.data){
				echo "successfully sent e-mail to ${config['created_by']}"
			} else {
				echo "exception occured while sending e-mail: $responseJSON"
			}
		} catch (e){
		   echo "Failed while sending build status notification"
		}
	}
}

def updateServiceInDB(config,status) {

	def updateJson = ''
	def serviceUrl = g_base_url + '/jazz/services'
	if(status) {
		updateJson = "{ \"status\": \"$status\" }"

		echo "new json $updateJson"

		def serviceUpdateUrl = "$serviceUrl/${config['service_id']}?isAdmin=true"

		def serviceUpdateOutput = sh (script: "curl --silent -X PUT $serviceUpdateUrl \
					-H \"accept: application/json\" \
					-H \"Content-Type: application/json\" \
					-H \"Authorization: $auth_token\"  \
					-d \'${updateJson}\'", returnStdout:true)

		echo "service update result: $serviceUpdateOutput"
	}
}



/**
 *  Function to get arns of the triggers/events configured for the Lambda.
 *
 */
def getEventsArn(domain, service, env) {
	echo "in getEventsArn - if domain, lambdaFnName: ${domain}-${service}-${env}"
	def eventsArn = []
	try {
		def lambdaFnName = service+"-"+env
		if(domain){
			lambdaFnName = domain+"-"+lambdaFnName
		}
		def lambdaPolicyTxt = sh (script:"aws lambda get-policy --function-name $lambdaFnName --output json", returnStdout: true)
		def policyLists = null
		if(lambdaPolicyTxt) {
			def lambdaPolicyJson = new groovy.json.JsonSlurperClassic()
			policyLists = lambdaPolicyJson.parseText(lambdaPolicyJson.parseText(lambdaPolicyTxt).Policy)
			if(policyLists) {
				for (st in policyLists.Statement) {
					if (st.Principal.Service == "events.amazonaws.com") {
						if(st.Condition.ArnLike["AWS:SourceArn"]) {
							eventsArn.push(st.Condition.ArnLike["AWS:SourceArn"])
						}
					}
				}
			}
		}
		return eventsArn
	} catch (ex) {
		// Skip the 'ResourceNotFoundException' when deploying first time. Workflow can't fail here.
		echo  "Can't fetch the events policy configurations for lambda. "+ ex.getMessage()
		return []
	}
}

def getLambdaARN (String stackName) {
	def ARN = "";
	
	try {
		def cloudformation_resources = "";
		cloudformation_resources = sh(returnStdout: true, script: "aws cloudformation describe-stacks --output json --stack-name ${stackName} --profile cloud-api")

		def jsonSlurper = new JsonSlurper()
		def parsedObject = jsonSlurper.parseText(cloudformation_resources);
		def outputs = parsedObject.Stacks[0].Outputs;

		for (output in outputs) {
			if(output.OutputKey == "HandlerLambdaFunctionArn") {
				ARN = output.OutputValue
			}
		}
	} catch(ex) {
		error ex.getMessage();
	}

	return ARN;
}


@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

def updatePlatformServiceTemplate(config,roleARN,roleId,current_environment,repo_name)	{
	echo "loadServerlessConfig......."
	def jenkinsURL = JenkinsLocationConfiguration.get().getUrl().replaceAll("/", "\\\\/")
	serviceConfigdata.initialize(configLoader, roleARN, config['region'], roleId, jenkinsURL, current_environment, repo_name)
	serviceConfigdata.loadServiceConfigurationData()
}
/*
* Load environment variables from build module
*/
def loadBuildModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		
		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)
		
		serviceConfigdata = load "service-configuration-data-loader.groovy"
		
	}
}



def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
      // right now only bitbucket has this additional tag scm in its git clone path
      return "http://${repo_base}/${repo_core}/jazz-build-module.git" 
    }else {
      return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    } 
} 
