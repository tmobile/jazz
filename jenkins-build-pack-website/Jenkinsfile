#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

//definitions
def Event_Name = [
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'CALL_ONBOARDING_WORKFLOW':'CALL_ONBOARDING_WORKFLOW',
	'RAISE_PR':'RAISE_PR',
	'VALIDATE_PRE_BUILD_CONF':'VALIDATE_PRE_BUILD_CONF',
	'CALL_ONBOARDING_SERVICE':'CALL_ONBOARDING_SERVICE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'CREATE_SERVICE':'CREATE_SERVICE',
	'BUILD':'BUILD',
	'CODE_QUALITY_CHECK':'CODE_QUALITY_CHECK',
	'UNIT_TEST':'UNIT_TEST',
	'COMMIT_CODE':'COMMIT_CODE',
	'APPROVE_PR':'APPROVE_PR',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'DEPLOY_TO_AWS':'DEPLOY_TO_AWS',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE',
	'CREATE_ASSET':'CREATE_ASSET',
	'UPDATE_ASSET':'UPDATE_ASSET'
]

def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]

@Field def configModule
@Field def configLoader
@Field def scmModule

@Field def g_login_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'

@Field def service_id = ''
@Field def preserveEnvKey = ''
@Field def preserveEnvValue = ''
@Field def created_by = ''
@Field def environment = ''

node ()  {
	def jazzBuildModuleURL = getBuildModuleUrl()
	loadConfigModule(jazzBuildModuleURL)
	loadSCMModule(jazzBuildModuleURL)

	g_base_url = "https://${configLoader.AWS.API.PROD_ID}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	
	echo "Build Pack website params: " + params

	def branch = params.scm_branch
	def domain = params.domain
	def service = params.service_name
	def repo_name = params.service_name
	
	if(domain && domain != ""){
		repo_name = params.domain + "_" + params.service_name
	}

	def config

	if (params.scm_branch == 'master') {
		environment = 'prod'
	}else {
		environment = 'dev'
	}

    stage('Checkout code base') {

		sh 'rm -rf ' + repo_name
		sh 'mkdir ' + repo_name

		dir(repo_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getRepoCloneUrl(repo_name)]]])
		}

		// @TODO: dir can be removed, needs to be refactored
		def configObj = dir(repo_name)
		{
			return LoadConfiguration()
		}
		
		if(configObj.service_id){	
			def url = "$g_base_url/jazz/services/"+configObj.service_id
			serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL)
			serviceMetadata.setUrl(url)
			def serviceData = serviceMetadata.loadServiceMetaData()
			if(serviceData && serviceData.data){	
				config = serviceData.data['metadata']
			}else{
				error "Error while fetching service metadata"
			}
		}else{
			error "Service Id is not available."
		}
	
	}
	
	def create_cloudfront_url

	dir(repo_name)
	{
		stage ('Pre-Build Validation'){

			sendEvent(service, branch, "NA", Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.STARTED, "")
			try {
				service = config['service']
				domain = config['domain']

				if(domain != '' && domain != null ){
					service = domain + '-' + service
				}

				create_cloudfront_url = false

				if (config['create_cloudfront_url'] == true || config['create_cloudfront_url'] == "true") {
					create_cloudfront_url = true
				}

				echo "create_cloudfront_url====" + create_cloudfront_url

				loadServiceInfo(config['service'], domain, g_base_url + '/jazz/services', environment)

				send_status_email(created_by, 'STARTED', config['service'], '')

				validateTemplate()
				validateDeploymentConfigurations(config)
			}catch(ex) {
				send_status_email(created_by, 'FAILED', config['service'], '')
				sendEvent(service, branch, "NA", Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.FAILED, ex.getMessage())
				error ex.getMessage()
			}
			sendEvent(service, branch, "NA", Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.COMPLETED, "")
		}

	  def s3StgBucket  = configLoader.JAZZ.S3.WEBSITE_STG_BUCKET;
	  def s3ProdBucket = configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	  def s3DevBucket  = configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;

	  if (branch == 'master'){
		stage ('Deployment to Production Env'){
		  sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
			echo "AWS Configure ......."

			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def assetInfo = "S3 Folder - /${s3ProdBucket}/${service}"
			try
			{
				try {
					echo "Checking if the website already exists.."
					sh "aws s3 ls s3://" + s3ProdBucket + "/$service"
				}catch(ex) {
					error ex.getMessage()
				}

				sendEvent(service, branch, "PRODUCTION", Event_Name.UPDATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					echo "website with name $service already exists, syncing new files"
					sh "aws s3 sync ./app s3://" + s3ProdBucket + "/$service  --exclude \".git/*\" --exclude \".gitignore\" --exclude \"*.svg\""
					sh "aws s3 sync ./app s3://" + s3ProdBucket + "/$service  --exclude \"*\" --include \"*.svg\" --no-guess-mime-type --content-type image/svg+xml"

					def url = 'n/a'
					if (create_cloudfront_url == true) {
						loadBucketPolicy(service, s3ProdBucket, true)

						def cfDetails = getCloudFrontDetails(environment, service)

						if (cfDetails) {
							echo "id is ${cfDetails[0]}, domain: ${cfDetails[1]}"
						}

						updateEnableCompressConfig(environment, service, cfDetails[0])

						invalidateCloudFrontCache(cfDetails[0], service)

						if (cfDetails[1]) {
							url = "http://" + cfDetails[1].replaceAll("[\n\r]", "")
							updateServiceWithEndpointInfo(config['service'], domain, g_base_url + '/jazz/services', environment, url)
						}
					} else{
						loadBucketPolicy(service, s3Bucket, false)
						url = "https://s3.amazonaws.com/" + s3ProdBucket + "/${service}/index.html"
						updateServiceWithEndpointInfo(config['service'], domain, g_base_url + '/jazz/services', environment, url)
					}

					def svc_status = 'You can access your website using following link: ' + url
					echo svc_status

					send_status_email(created_by, 'COMPLETED', config['service'], svc_status)
					sendEvent(service, branch, "PRODUCTION", Event_Name.UPDATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', config['service'], '')
					sendEvent(service, branch, "PRODUCTION", Event_Name.UPDATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, ex.getMessage())
				}

			 }
			 catch (error)
			 {
				echo "uploading a new website with name $service"
				sendEvent(service, branch, "PRODUCTION", Event_Name.CREATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					sh "aws s3 sync ./app s3://" + s3ProdBucket + "/$service  --exclude \".git/*\" --exclude \".gitignore\" --exclude \"*.svg\""
					sh "aws s3 sync ./app s3://" + s3ProdBucket + "/$service  --exclude \"*\" --include \"*.svg\" --no-guess-mime-type --content-type image/svg+xml"

					def url = ''
					if (create_cloudfront_url == true) {
						loadDistributionConfig()
						generateDistributionConfig(service, environment, config)
						sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json file://distribution_config_with_tags.json"

						loadBucketPolicy(service, s3ProdBucket, true)
						url = sh (script: "aws  cloudfront list-distributions --output text --query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-${environment}-static-website-origin-$service']].DomainName\"", returnStdout: true)

						if (url) {
							updateServiceWithEndpointInfo(config['service'], domain, g_base_url + '/jazz/services', environment, "http://" + url.replaceAll("[\n\r]", ""))
						}
					}else{
						loadBucketPolicy(service, s3Bucket, false)
						url = "https://s3.amazonaws.com/" + s3ProdBucket + "/${service}/index.html"
						updateServiceWithEndpointInfo(config['service'], domain, g_base_url + '/jazz/services', environment, url)
					}
					def svc_status = 'You can access your website using following link: ' + url
					echo svc_status

					send_status_email(created_by, 'COMPLETED', config['service'], svc_status)
					sendEvent(service, branch, "PRODUCTION", Event_Name.CREATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', config['service'], '')
					sendEvent(service, branch, "PRODUCTION", Event_Name.CREATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, "")
				}

			 }
			// reset Credentials
			resetCredentials()
		  }
		}
	  }
	  else {
		stage ('Deployment to Deployment Env'){
		  sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
			echo "AWS Configure ......."

			sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def assetInfo = "S3 Folder - /" + s3DevBucket + "/"+service
			 try
			 {
				try {
					echo "Checking if the website already exists.."
					sh "aws s3 ls s3://${s3DevBucket}/$service"
				}catch(ex) {
					error ex.getMessage()
				}

				sendEvent(service, branch, "DEVELOPMENT", Event_Name.UPDATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					echo "website with name $service already exists, syncing new files"
					sh "aws s3 sync ./app s3://${s3DevBucket}/$service --exclude \".git/*\" --exclude \".gitignore\" "
					def url = 'n/a'
					if (create_cloudfront_url == true) {
						loadBucketPolicy(service, s3DevBucket, true)

						def cfDetails = getCloudFrontDetails(environment, service)

						updateEnableCompressConfig(environment, service, cfDetails[0])

						invalidateCloudFrontCache(cfDetails[0], service)

						if (cfDetails[1]) {
							url = "http://" + cfDetails[1].replaceAll("[\n\r]", "")
							updateServiceWithEndpointInfo(config['service'], domain, "${g_base_url}/jazz/services", environment, url)
						}
					} else{
						loadBucketPolicy(service, s3Bucket, false)
						url = "https://s3.amazonaws.com/${s3DevBucket}/${service}/index.html"
						updateServiceWithEndpointInfo(config['service'], domain, "${g_base_url}/jazz/services", environment, url)
					}
					def svc_status = "You can access your website using following link: ${url}"
					echo svc_status

					send_status_email(created_by, 'COMPLETED', config['service'], svc_status)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.UPDATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', config['service'], '')
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.UPDATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, ex.getMessage())
				}
			 }
			 catch (error)
			 {
				echo "uploading a new website with name $service"
				sendEvent(service, branch, "DEVELOPMENT", Event_Name.CREATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					sh "aws s3 sync ./app s3://" + s3DevBucket + "/$service --exclude \".git/*\" --exclude \".gitignore\" "
					def url = 'n/a'
					if (create_cloudfront_url == true) {
						loadDistributionConfig()
						generateDistributionConfig(service,environment,config)
						sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json file://distribution_config_with_tags.json"

						loadBucketPolicy(service, s3DevBucket, true)
						url = sh (script: "aws  cloudfront list-distributions --output text --query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-${environment}-static-website-origin-$service']].DomainName\"", returnStdout: true)

						if (url) {
							updateServiceWithEndpointInfo(config['service'], domain, g_base_url + '/jazz/services', environment, "http://" + url.replaceAll("[\n\r]", ""))
						}
					}else{
						loadBucketPolicy(service, s3Bucket,false)
						url = "https://s3.amazonaws.com/" + s3DevBucket + "/${service}/index.html"
						updateServiceWithEndpointInfo(config['service'], domain, g_base_url + '/jazz/services', environment, url)
					}
					def svc_status = 'You can access your website using following link: ' + url
					echo svc_status

					send_status_email(created_by, 'COMPLETED', config['service'], svc_status)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.CREATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', config['service'], '')
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.CREATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, "")
				}
			 }
			// reset Credentials
			resetCredentials()

		  }
		}
	  }
	}
}

def getS3BucketName(String envname) {

	if (envname == "dev") {
		return configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
	} else if (envname == "stg") {
		return configLoader.JAZZ.S3.WEBSITE_STG_BUCKET;
	} else if (envname == "prod") {
		return configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	}

	return configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
}

def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
    }

	for (item in cleanedList) {
		def eachItemList = item.tokenize(":")
		//handle empty values
		def value = "";
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}

		if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}
	}

	echo "Loaded configurations...$prop"
	return prop
}


/**
	Reset credentials
*/
def resetCredentials() {
	echo "resetting AWS credentials"
	sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
	sh "aws configure set profile.cloud-api.aws_secret_access_key XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Generate the distribution config file
*/
def generateDistributionConfig(service, envname, config) {
	sh "sed -i -- 's/{service_name}/"+service+"/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{env}/"+envname+"/g' distribution_config_with_tags.json"

	sh "sed -i -- 's/{conf_s3bucketname}/" + getS3BucketName(envname) + "/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{conf_stack_prefix}/${configLoader.INSTANCE_PREFIX}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's:{conf_origin_id}:${configLoader.AWS.CLOUDFRONT_ORIGIN_ID}:g' distribution_config_with_tags.json"

	def owner = ''
	try{
		if (config['owner']) {
			owner = config['owner']
		}
	}
	catch(Exception e) { }

	def domain = ''
	try{
		if (config['domain']) {
			domain = config['domain']
		}
	}
	catch(Exception e) { }
	sh "sed -i -- 's/{owner}/"+owner+"/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{domain_name}/"+domain+"/g' distribution_config_with_tags.json"
	def distribution_config_with_tags = readFile('distribution_config_with_tags.json').trim()
	echo(distribution_config_with_tags)
}



/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {

	if(prop.containsKey("service")) {
		if(prop['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}

	}else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}
}


/**
	Validate template for all necessary files. Ex: index.html
*/
def validateTemplate() {
	if (fileExists('app/index.html')) {

          echo "index.html is present"
        }
		else {
			error "index.html is not available."
		}

	if (fileExists('deployment-env.yml')) {

          echo "deployment-env.yml is present"
        }
		else {
			error "deployment-env.yml is not available."
		}

}

def loadDistributionConfig() {

	checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url:  scmModule.getCoreRepoCloneUrl("website-distribution-pack")]]])

}

def loadBucketPolicy(String service, String s3Bucket, Boolean create_cloudfront_url){
	def policySpec = '{"Version":"2012-10-17","Id":"Policy For ","Statement":[]}'
	def policyObj 
	
	try {
		def policyJson = sh(returnStdout: true, script: "aws s3api get-bucket-policy --bucket $s3Bucket --query Policy --output text")
		echo "policyJson: $policyJson"
		policyObj = jsonParse(policyJson) 
		echo "loadBucketPolicy readFile: $policyObj"
	} catch(ex) {
		echo "Bucket policy doesn't exists yet."
		policyObj =  jsonParse(policySpec)
		policyObj.Id += "$s3Bucket"
	}
	if(policyObj) {
		updateS3BucketPolicy(service, s3Bucket, create_cloudfront_url, policyObj)
	}
}

def loadIPList() {

  dir('_jenkins_buildpack') {

		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getCoreRepoCloneUrl("jenkins-build-pack-website")]]])
	}
}
/*
*	add restrictions so that Cloudfront endpoint can access S3
*/
def updateS3BucketPolicy( service,  s3Bucket, isCloudfront, existingPolicyObj){
	echo "updateS3BucketPolicy"
	try{
		def policy_filedata
		def new_policy
		def stmtS3 = '{"Sid":"","Effect":"Allow","Principal":{"AWS":"*"},"Action":"s3:GetObject","Resource":"arn:aws:s3:::","Condition":{"IpAddress":{"aws:SourceIp":[]}}}'
		def stmtCf = '{"Sid":"","Effect":"Allow","Principal":{"AWS":""},"Action":"s3:GetObject","Resource":"arn:aws:s3:::"}'
		def stmtCfList = '{"Sid":"ListBucket","Effect":"Allow","Principal":"*","Action":"s3:ListBucket","Resource":"arn:aws:s3:::"}'
		def cleanupIndex = -1

		def bucketPolicy = existingPolicyObj
		def statements = bucketPolicy.Statement	

		def CFOAI = sh (
			script: "aws cloudfront list-cloud-front-origin-access-identities --output text \
			--query \"CloudFrontOriginAccessIdentityList.Items[?Comment=='${configLoader.INSTANCE_PREFIX}-origin_access_identity'].{j: Id}\"",
			returnStdout: true
			).trim()

		for(st in statements) {
			cleanupIndex++
			if(st['Sid'] == "$service") {
				echo "cleanupIndex...$cleanupIndex"
				bucketPolicy.Statement[cleanupIndex] = null
			} else if(st['Sid'] == "ListBucket") {
				bucketPolicy.Statement[cleanupIndex] = null
			}
		}
		bucketPolicy.Statement.removeAll([null])

		//add restrictions so that Cloudfront endpoint can access S3
		if(isCloudfront){
			echo "isCloudfront: $isCloudfront"
			def principal = ["AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity $CFOAI"]
			new_policy =  jsonParse(stmtCf)
			new_policy.put('Sid', "$service")
			new_policy.put('Principal', principal)
			new_policy.put('Resource', "arn:aws:s3:::$s3Bucket/$service/*")
			bucketPolicy.Statement << new_policy

			//add new list policy statement 
			def listPolicyObject = jsonParse(stmtCfList)
			listPolicyObject.put('Principal', principal)
			listPolicyObject.put('Resource', "arn:aws:s3:::$s3Bucket")
			bucketPolicy.Statement << listPolicyObject
		} else{
			echo "isCloudfront: $isCloudfront"
			def principal = "*"
			new_policy =  jsonParse(stmtS3)
			new_policy.put('Sid', "$service")
			new_policy.put('Principal', principal)
			new_policy.put('Resource', "arn:aws:s3:::$s3Bucket/$service/*")
			bucketPolicy.Statement << new_policy
		}

		echo "updated PolicyStatement : $statements"

		policy_filedata = JsonOutput.prettyPrint(JsonOutput.toJson(bucketPolicy))

		def putPolicyResponse = sh(returnStdout: true, script: "aws s3api put-bucket-policy --output json --bucket $s3Bucket --policy \'${policy_filedata}\'")

	} catch(ex){
		echo "Bucket policy update failed. "+ex.getMessage()
		error "Bucket policy update failed. "+ex.getMessage()
	}
}

def getCloudFrontDetails(env, service) {

	def distributionId = sh (script: "aws  cloudfront list-distributions --output text \
									--query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-$env-static-website-origin-$service']].{j: Id, k: DomainName}\"",
							returnStdout: true
						).trim()

	echo "getCloudFrontDetails are $distributionId"

	return distributionId.split('\t')
}

def updateEnableCompressConfig(env, service, distributionId) {

	try {
		def cf_config = sh (script: "aws cloudfront get-distribution-config --id $distributionId --output json" ,
							returnStdout: true
						).trim()

		echo "cf_config is $cf_config"
		def configParser = new groovy.json.JsonSlurper()
		def cfConfig = configParser.parseText(cf_config)
		if(cfConfig == null) { error "Could not fetch distribution configuration"}

		def _eTag = cfConfig.ETag

		echo "_eTag is $_eTag"
		def updateConfig = 	cfConfig.DistributionConfig
		if(updateConfig == null) { error "Invalid distribution configuration returned"}

		echo "updateConfig $updateConfig"

		if(!updateConfig.DefaultCacheBehavior.SmoothStreaming || !updateConfig.DefaultCacheBehavior.Compress){
			updateConfig.DefaultCacheBehavior.SmoothStreaming = true
			updateConfig.DefaultCacheBehavior.Compress = true

			def updateConfigJson = JsonOutput.toJson(updateConfig)
			try {
				sh "echo '$updateConfigJson' > cf_config.json"
				sh "cat cf_config.json"
			} catch(ex){
				echo "Ignoring the lazy error0 "+ex.getMessage()
			}

			sh "aws cloudfront update-distribution \
					--distribution-config file://cf_config.json \
					--id $distributionId \
					--if-match $_eTag \
					--output json"
		}
	}catch(ex) {
		error "Failed while updateEnableCompressConfig " + ex.toString()
	}
}

def invalidateCloudFrontCache(distributionId, service) {
	try {
		if(distributionId) {

			def callerReference = service+"_"+env.BUILD_ID
			def config = "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$callerReference\"}"

			def invalidateStatus = sh(
						script:"aws cloudfront create-invalidation \
								--distribution-id $distributionId \
								--invalidation-batch '$config' \
								--output json",
								returnStdout: true)

			echo "Invalidated Cloud Front Cache for service $service..:$invalidateStatus"
		}
	} catch(ex) {
		error "Error occured while invalidating the Cloudfron Cache. "+ex.getMessage()
	}
}

def sendEvent(service_name, branch, environment, event_name, event_status, message){
    echo "send event " + event_status + " message::" + message;
}

def loadServiceInfo(service, domain, serviceUrl, endpointKey) {

	def token = setCredentials()

	def url = "$serviceUrl?domain=$domain&service=$service&isAdmin=true"

	if (endpointKey == 'dev') {
		preserveEnvKey = 'prod'
	}else if (endpointKey == 'prod') {
		preserveEnvKey = 'dev'
	}

	def curlOutput = sh (script: "curl -H \"Content-Type: application/json\" \
			-H \"Authorization: $token\" \"$url\"" ,returnStdout: true ).trim()
	echo "curlOutput: $curlOutput"

	def curlOutputJSON = jsonParse(curlOutput)
	
	if (curlOutputJSON.data[0].id) {
		service_id = curlOutputJSON.data[0].id
	}

	if (curlOutputJSON.data[0].endpoints) {
		preserveEnvValue = curlOutputJSON.data[0].endpoints["$preserveEnvKey"]
	}

	if (curlOutputJSON.data[0].created_by) {
		created_by = curlOutputJSON.data[0].created_by
	}
}

def updateServiceWithEndpointInfo(service, domain, serviceUrl, endpointKey, endpointVal) {

	def updateJson = ''

	if(preserveEnvValue) {
		updateJson = "{ \"endpoints\": { \"$endpointKey\" : \"$endpointVal\", \"$preserveEnvKey\": \"$preserveEnvValue\"}, \"status\": \"active\"  }"
	}else {
		updateJson = "{ \"endpoints\": { \"$endpointKey\" : \"$endpointVal\"}, \"status\": \"active\" }"
	}

	echo "new json $updateJson"

	def serviceUpdateUrl = "$serviceUrl/$service_id?isAdmin=true"

	def serviceUpdateOutput = sh (script: "curl --silent -X PUT $serviceUpdateUrl \
		        -H \"accept: application/json\" \
				-H \"Content-Type: application/json\" \
				-H \"Authorization: $g_login_token\"  \
				  -d \'${updateJson}\'", returnStdout:true)

	echo "service update result: $serviceUpdateOutput"
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials() {
	def loginUrl = g_base_url + '/jazz/login'
	def token
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			token = sh (script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = jsonParse(token)
			tokenJson_token = tokenJson.data.token

			return tokenJson_token
		}
		catch(e){
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (email_id, build_status, service, email_content) {
   	echo "Sending build notification to " + email_id
	def body_subject = ''
	def body_text = ''
	def cc_email = ''
	def body_html = ''
   	if (build_status == 'STARTED') {
		echo "email status started"
		body_subject = 'Jazz Build Notification: Deployment STARTED for service: ' + service
   	} else if (build_status == 'FAILED') {
		echo "email status failed"
		def build_url = env.BUILD_URL + 'console'
		body_subject = 'Jazz Build Notification: Deployment FAILED for service: ' + service
		body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
   	} else if (build_status == 'COMPLETED'){
        	body_subject = 'Jazz Build Notification: Deployment COMPLETED successfully for service: ' + service
   	} else {
        	echo "Unsupported build status, nothing to email.."
        	return
   	}
   	if (email_content != ''){
        	body_text = body_text + '\n\n' + email_content
	}
	def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
	body = JsonOutput.toJson([
					from : fromStr,
					to : email_id,
					subject : body_subject,
					text : body_text,
					cc : cc_email,
					html : body_html
			    ])

   	try{
		def sendMail = sh (script: "curl -X POST \
						${g_base_url}/jazz/email \
						-k -v -H \"Authorization: $g_login_token\" \
						-H \"Content-Type: application/json\" \
						-d \'${body}\'", returnStdout: true).trim()
		def responseJSON = parseJson(sendMail)
		if(responseJSON.data){
			echo "successfully sent e-mail to $email_id"
		} else {
			echo "exception occured while sending e-mail: $responseJSON"
		}
   	} catch (e){
       	echo "Failed while sending build status notification  " + e.toString()
   	}
}

/*
* Load environment variables from build module
*/
def loadConfigModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
	}
}

/**
 * Non-lazy JSON parser
 */
@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/**
 * Load metadata module groovy file
 *
 */
def loadServiceMetadataModule(buildURL) {
	try {						
		echo "loading serviceMetaData, checking repos"

		dir('service-metadata') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildURL]
			]])
			serviceMetadata = load "service-metadata-loader.groovy"			
			serviceMetadata.setAuthToken(setCredentials())

			// Load and set dependent utility module.
			echo "loading util module"
			Util = load "utility-loader.groovy"
			serviceMetadata.setUtil(Util)
			return serviceMetadata 
		}
	}catch(ex) {
		error "loadServiceMetadataModule failed: "+ex.getMessage()
	}
}

/*
load scm module
*/
def loadSCMModule(buildModuleUrl){

	try {	
		dir('scm-loader') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

			scmModule = load "scm-module.groovy"
			scmModule.initialize(configLoader)
		}
	}catch(ex) {
		error "loadSCMModule failed: " + ex.toString()
	}
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
      // right now only bitbucket has this additional tag scm in its git clone path
      return "http://${repo_base}/${repo_core}/jazz-build-module.git" 
    }else {
      return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    } 
} 

@NonCPS
def jsonParse(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}
