#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

//definitions
def Event_Name = [
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'CALL_ONBOARDING_WORKFLOW':'CALL_ONBOARDING_WORKFLOW',
	'RAISE_PR':'RAISE_PR',
	'VALIDATE_PRE_BUILD_CONF':'VALIDATE_PRE_BUILD_CONF',
	'CALL_ONBOARDING_SERVICE':'CALL_ONBOARDING_SERVICE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'CREATE_SERVICE':'CREATE_SERVICE',
	'BUILD':'BUILD',
	'CODE_QUALITY_CHECK':'CODE_QUALITY_CHECK',
	'UNIT_TEST':'UNIT_TEST',
	'COMMIT_CODE':'COMMIT_CODE',
	'APPROVE_PR':'APPROVE_PR',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'DEPLOY_TO_AWS':'DEPLOY_TO_AWS',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE',
	'CREATE_ASSET':'CREATE_ASSET',
	'UPDATE_ASSET':'UPDATE_ASSET'
]

def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]

@Field def g_login_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'
@Field def service_id = ''
@Field def preserveEnvKey = ''
@Field def preserveEnvValue = ''
@Field def created_by = ''
@Field def current_environment = ''
@Field def env_prefix = ''
@Field def region = ''

node ()  {
	region = env.jazz_region
	g_base_url = "https://${env.API_KEY}.execute-api.${region}.amazonaws.com/dev"

	echo "Build Pack website params: " + params

    def service = params.service_name
	def branch = params.scm_branch
	def domain = params.domain

    def bitbucket_name = params.service_name

	def var_bitbucket_framework_url = "http://${env.REPO_BASE}/scm/${params.scm_project}/"

	def config

	if (params.scm_branch == 'master') {
		current_environment = 'prod'
	}else {
		current_environment = 'dev'
	}

	env_prefix = env.env_name_prefix

    stage('Checkout code base') {

		if (domain && domain.trim()!="") {
			bitbucket_name = params.domain + "-" + service
		 }else{
			domain = ""
		}

		sh 'rm -rf ' + bitbucket_name
		sh 'mkdir ' + bitbucket_name

		dir(bitbucket_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.REPO_CREDENTIAL_ID , url: var_bitbucket_framework_url + bitbucket_name + '.git']]])
		}

		// @TODO: dir can be removed, needs to be refactored
		config = dir(bitbucket_name)
		{
			return LoadConfiguration()
		}
	}

	def create_cloudfront_url

	dir(bitbucket_name)
	{
		stage ('Pre-Build Validation'){

			sendEvent(service, branch, "NA", Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.STARTED, "")
			try {
				service = config['service']
				domain = config['domain']

				if(domain != '' && domain != null ){
					service = domain + '-' + service
				}

				create_cloudfront_url = false

				if (config['create_cloudfront_url'] == true || config['create_cloudfront_url'] == "true") {
					create_cloudfront_url = true
				}

				echo "create_cloudfront_url====" + create_cloudfront_url

				loadServiceInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment)

				send_status_email(created_by, 'STARTED', params.service_name, '')

				validateTemplate()
				validateDeploymentConfigurations(config)
			}catch(ex) {
				send_status_email(created_by, 'FAILED', params.service_name, '')
				sendEvent(service, branch, "NA", Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.FAILED, ex.getMessage())
				error ex.getMessage()
			}
			sendEvent(service, branch, "NA", Event_Name.VALIDATE_PRE_BUILD_CONF, Event_Status.COMPLETED, "")
		}

	  def s3StgBucket  = env.WEBSITE_STG_S3BUCKET;
	  def s3ProdBucket = env.WEBSITE_PROD_S3BUCKET;
	  def s3DevBucket  = env.WEBSITE_DEV_S3BUCKET;

	  if (branch == 'master'){
		stage ('Deployment to Production Env'){
		  sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
			echo "AWS Configure ......."

			sh "aws configure set profile.cloud-api.region ${region}"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def assetInfo = "S3 Folder - /${s3ProdBucket}/${service}"
			try
			{
				try {
					echo "Checking if the website already exists.."
					sh "aws s3 ls s3://" + s3ProdBucket + "/$service"
				}catch(ex) {
					error ex.getMessage()
				}

				sendEvent(service, branch, "PRODUCTION", Event_Name.UPDATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					echo "website with name $service already exists, syncing new files"
					sh "aws s3 sync ./app s3://" + s3ProdBucket + "/$service  --exclude \".git/*\" --exclude \".gitignore\" "

					def url = 'n/a'
					if (create_cloudfront_url == true) {
						updateCloudFrontPolicy(service, s3ProdBucket)

						def cfDetails = getCloudFrontDetails(current_environment, service)

						if (cfDetails) {
							echo "id is ${cfDetails[0]}, domain: ${cfDetails[1]}"
						}

						updateEnableCompressConfig(current_environment, service, cfDetails[0])

						invalidateCloudFrontCache(cfDetails[0], service)

						if (cfDetails[1]) {
							url = "http://" + cfDetails[1].replaceAll("[\n\r]", "")
							updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, url)
						}
					} else{
						def siteUrl = "https://s3.amazonaws.com/" + s3ProdBucket + "/${service}/index.html"
						updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, siteUrl)

						url = updateS3BucketPolicy(service, s3ProdBucket)
					}

					def svc_status = 'You can access your website using following link: ' + url
					echo svc_status

					send_status_email(created_by, 'COMPLETED', params.service_name, svc_status)
					sendEvent(service, branch, "PRODUCTION", Event_Name.UPDATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', params.service_name, '')
					sendEvent(service, branch, "PRODUCTION", Event_Name.UPDATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, ex.getMessage())
				}

			 }
			 catch (error)
			 {
				echo "uploading a new website with name $service"
				sendEvent(service, branch, "PRODUCTION", Event_Name.CREATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					sh "aws s3 sync ./app s3://" + s3ProdBucket + "/$service  --exclude \".git/*\" --exclude \".gitignore\" "
					def url = ''
					if (create_cloudfront_url == true) {
						loadDistributionConfig()
						generateDistributionConfig(service, current_environment, config)
						sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json file://distribution_config_with_tags.json"

						updateCloudFrontPolicy(service, s3ProdBucket)
						url = sh (script: "aws  cloudfront list-distributions --output text --query \"DistributionList.Items[?Origins.Items[?Id=='${env_prefix}-${current_environment}-static-website-origin-$service']].DomainName\"", returnStdout: true)

						if (url) {
							updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, "http://" + url.replaceAll("[\n\r]", ""))
						}
					}else{
						def siteUrl = "https://s3.amazonaws.com/" + s3ProdBucket + "/${service}/index.html"
						updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, siteUrl)

						url = updateS3BucketPolicy(service, s3ProdBucket)
					}
					def svc_status = 'You can access your website using following link: ' + url
					echo svc_status

					send_status_email(created_by, 'COMPLETED', params.service_name, svc_status)
					sendEvent(service, branch, "PRODUCTION", Event_Name.CREATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', params.service_name, '')
					sendEvent(service, branch, "PRODUCTION", Event_Name.CREATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "PRODUCTION", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, "")
				}

			 }
			// reset Credentials
			resetCredentials()
		  }
		}
	  }
	  else {
		stage ('Deployment to Deployment Env'){
		  sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.STARTED, "")
			withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
			echo "AWS Configure ......."

			sh "aws configure set profile.cloud-api.region "+region
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def assetInfo = "S3 Folder - /" + s3DevBucket + "/"+service
			 try
			 {
				try {
					echo "Checking if the website already exists.."
					sh "aws s3 ls s3://${s3DevBucket}/$service"
				}catch(ex) {
					error ex.getMessage()
				}

				sendEvent(service, branch, "DEVELOPMENT", Event_Name.UPDATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					echo "website with name $service already exists, syncing new files"
					sh "aws s3 sync ./app s3://${s3DevBucket}/$service --exclude \".git/*\" --exclude \".gitignore\" "
					def url = 'n/a'
					if (create_cloudfront_url == true) {
						updateCloudFrontPolicy(service, s3DevBucket)

						def cfDetails = getCloudFrontDetails(current_environment, service)

						updateEnableCompressConfig(current_environment, service, cfDetails[0])

						invalidateCloudFrontCache(cfDetails[0], service)

						if (cfDetails[1]) {
							url = "http://" + cfDetails[1].replaceAll("[\n\r]", "")
							updateServiceWithEndpointInfo(params.service_name, domain, "${g_base_url}/platform/services", current_environment, url)
						}
					} else{
						def siteUrl = "https://s3.amazonaws.com/${s3DevBucket}/${service}/index.html"
						updateServiceWithEndpointInfo(params.service_name, domain, "${g_base_url}/platform/services", current_environment, siteUrl)

						url = updateS3BucketPolicy(service, s3DevBucket)
					}
					def svc_status = "You can access your website using following link: ${url}"
					echo svc_status

					send_status_email(created_by, 'COMPLETED', params.service_name, svc_status)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.UPDATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', params.service_name, '')
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.UPDATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, ex.getMessage())
				}
			 }
			 catch (error)
			 {
				echo "uploading a new website with name $service"
				sendEvent(service, branch, "DEVELOPMENT", Event_Name.CREATE_ASSET , Event_Status.STARTED, assetInfo)
				try {
					sh "aws s3 sync ./app s3://" + s3DevBucket + "/$service --exclude \".git/*\" --exclude \".gitignore\" "
					def url = 'n/a'
					if (create_cloudfront_url == true) {
						loadDistributionConfig()
						generateDistributionConfig(service,current_environment,config)
						sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json file://distribution_config_with_tags.json"

						updateCloudFrontPolicy(service, s3DevBucket)
						url = sh (script: "aws  cloudfront list-distributions --output text --query \"DistributionList.Items[?Origins.Items[?Id=='${env_prefix}-${current_environment}-static-website-origin-$service']].DomainName\"", returnStdout: true)

						if (url) {
							updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, "http://" + url.replaceAll("[\n\r]", ""))
						}
					}else{
						def siteUrl = "https://s3.amazonaws.com/" + s3DevBucket + "/${service}/index.html"
						updateServiceWithEndpointInfo(params.service_name, domain, g_base_url + '/platform/services', current_environment, siteUrl)

						url = updateS3BucketPolicy(service, s3DevBucket)
					}
					def svc_status = 'You can access your website using following link: ' + url
					echo svc_status

					send_status_email(created_by, 'COMPLETED', params.service_name, svc_status)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.CREATE_ASSET , Event_Status.COMPLETED, assetInfo)
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.COMPLETED, "")
				}catch(ex) {
					send_status_email(created_by, 'FAILED', params.service_name, '')
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.CREATE_ASSET , Event_Status.FAILED, ex.getMessage())
					sendEvent(service, branch, "DEVELOPMENT", Event_Name.DEPLOY_TO_AWS, Event_Status.FAILED, "")
				}
			 }
			// reset Credentials
			resetCredentials()

		  }
		}
	  }
	}
}

def getS3BucketName(String envname) {

	if (envname == "dev") {
		return env.WEBSITE_DEV_S3BUCKET;
	} else if (envname == "stg") {
		return env.WEBSITE_STG_S3BUCKET;
	} else if (envname == "prod") {
		return env.WEBSITE_PROD_S3BUCKET;
	}

	return env.WEBSITE_DEV_S3BUCKET;
}

def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
    }

	for (item in cleanedList) {
		def eachItemList = item.tokenize(":")
		//handle empty values
		def value = "";
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}

		if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}
	}

	echo "Loaded configurations...$prop"
	return prop
}


/**
	Reset credentials
*/
def resetCredentials() {
	echo "resetting AWS credentials"
	sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
	sh "aws configure set profile.cloud-api.aws_secret_access_key XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Generate the distribution config file
*/
def generateDistributionConfig(service, envname, config) {
	sh "sed -i -- 's/{service_name}/"+service+"/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{env}/"+envname+"/g' distribution_config_with_tags.json"

	sh "sed -i -- 's/{conf_s3bucketname}/" + getS3BucketName(envname) + "/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{conf_stack_prefix}/" + env.env_name_prefix + "/g' distribution_config_with_tags.json"
	sh "sed -i -- 's:{conf_origin_id}:" + env.CLOUDFRONT_ORIGIN_ID + ":g' distribution_config_with_tags.json"

	def owner = ''
	try{
		if (config['owner']) {
			owner = config['owner']
		}
	}
	catch(Exception e) { }

	def domain = ''
	try{
		if (config['domain']) {
			domain = config['domain']
		}
	}
	catch(Exception e) { }
	sh "sed -i -- 's/{owner}/"+owner+"/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{domain_name}/"+domain+"/g' distribution_config_with_tags.json"
	def distribution_config_with_tags = readFile('distribution_config_with_tags.json').trim()
	echo(distribution_config_with_tags)
}



/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {

	if(prop.containsKey("service")) {
		if(prop['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}

	}else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}
}


/**
	Validate template for all necessary files. Ex: index.html
*/
def validateTemplate() {
	if (fileExists('app/index.html')) {

          echo "index.html is present"
        }
		else {
			error "index.html is not available."
		}

	if (fileExists('deployment-env.yml')) {

          echo "deployment-env.yml is present"
        }
		else {
			error "deployment-env.yml is not available."
		}

}

def loadDistributionConfig() {

	checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.REPO_CREDENTIAL_ID , url: 'http://' + env.REPO_BASE + '/scm/' + env.REPO_CORE + '/website-distribution-pack.git']]])

}

def loadBucketPolicy(String s3Bucket){
	// fetch current policy and save to > bucket-policy.json
	sh "aws s3api get-bucket-policy --bucket $s3Bucket --query Policy --output text > bucket-policy.json"

	def bucketPolicy = readFile('bucket-policy.json').trim()
	def jsonSlurper = new JsonSlurper()
	def policyLazyMap = jsonSlurper.parseText(bucketPolicy)

	def jsonMap = [:]

    jsonMap.putAll(policyLazyMap)
    def policyObject = [:]

    def statementsList = []

    // convert bucketPolicy from groovy.json.internal.LazyMap to normal map
    try {
	    policyObject["Id"] = jsonMap["Id"]
	    policyObject["Version"] = jsonMap["Version"]
	    for(st in jsonMap["Statement"]) {
	    	statement = [:]
	    	for ( e in st ) {
	    		if (e.key == "Principal") {
	    			if (e.value == '*') {
	    				statement.put("Principal", "*")
	    			} else {
	    				principal = [:]
		    			for ( p in e.value ) {
		    				principal.put(p.key, p.value)
		    			}
		    			statement.put("Principal", principal)
	    			}
	    		} else if (e.key == "Condition") {
	    			condition = [:]

	    			for ( f in e.value ) {
	    				f_value = [:]
	    				for ( src in f.value ) {
	    					src_list = []
	    					f_value.put(src.key, src.value)
	    				}
	    				condition.put(f.key, f_value)
	    			}
	    			statement.put("Condition", condition)
	    		} else{
	    			statement.put(e.key, e.value)
	    		}
	    	}
	    	statementsList << statement
	    }
	    policyObject["Statement"] = statementsList
    }
    catch(Exception e) {
    	echo "error occured while parsing bucketPolicy " + e.toString()
    }

    echo "policyObject : $policyObject"
	return policyObject
}

def loadIPList() {

  dir('_jenkins_buildpack') {

		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: env.REPO_CREDENTIAL_ID , url: 'http://' + env.REPO_BASE + '/scm/' + env.REPO_CORE + '/jenkins-build-pack-website.git']]])

	}

}

/*
*	add restrictions so that Cloudfront endpoint can access S3
*/
def updateS3BucketPolicy(String service, String s3Bucket){
	echo "updateS3BucketPolicy"

	def policy_filedata
	def url
	def new_policy
	def isPolicyExists = false

	def bucketPolicy = loadBucketPolicy(s3Bucket)

	if (bucketPolicy) {
		def statements = bucketPolicy.Statement
		//def principal = ["AWS": "*"]
		def principal = "*"

		for(st in statements) {
			if(st['Sid'] == "$service") {
				isPolicyExists = true
				new_policy = st
			}
		}
		if (isPolicyExists == false) {
			// create new policy statement
			new_policy = [:]
			new_policy.put('Sid', "$service")
			new_policy.put('Effect', "Allow")
			new_policy.put('Action', "s3:GetObject")
			new_policy.put('Principal', principal)
			new_policy.put('Resource', "arn:aws:s3:::$s3Bucket/$service/*")
		}

		if (isPolicyExists == false) {
			// add new policy statement to
			statements << new_policy
		}

		// return updated policy statements
		echo "updated PolicyStatement : $statements"

		policy_filedata = JsonOutput.prettyPrint(JsonOutput.toJson(bucketPolicy))

		sh "aws s3api put-bucket-policy --output json --bucket $s3Bucket --policy \'${policy_filedata}\'"
	}

	return "https://s3.amazonaws.com/$s3Bucket/$service/index.html"
}

/*
*	add restrictions so that Cloudfront endpoint can access S3
*/
def updateCloudFrontPolicy(String service, String s3Bucket){
	echo "updateCloudFrontPolicy"

	def json_string
	def isPolicyExists = false
	def new_policy

	def bucketPolicy = loadBucketPolicy(s3Bucket)
	def statements = bucketPolicy.Statement

//	def principal = ["AWS": env.CLOUDFRONT_OAI]
	//def principal = ["AWS": "*"]
	def principal = "*"

	for(st in statements) {
		if(st['Sid'] == "$service") {
			isPolicyExists = true
			new_policy = st
		}
	}
	if (isPolicyExists == false) {
		// create new policy statement
		new_policy = [:]
		new_policy.put('Sid',"$service")
		new_policy.put('Effect',"Allow")
		new_policy.put('Action',"s3:GetObject")
		new_policy.put('Principal', principal)
		new_policy.put('Resource',"arn:aws:s3:::$s3Bucket/$service/*")
	}

	if (isPolicyExists == false) {
		// add new policy statement to
		statements << new_policy
	}


	def jsonMap = [:]

	json_string = JsonOutput.prettyPrint(JsonOutput.toJson(bucketPolicy))

	sh "aws s3api put-bucket-policy --output json --bucket $s3Bucket --policy \'${json_string}\'"
}

def getCloudFrontDetails(env, service) {

	def distributionId = sh (script: "aws  cloudfront list-distributions --output text \
									--query \"DistributionList.Items[?Origins.Items[?Id=='${env_prefix}-$env-static-website-origin-$service']].{j: Id, k: DomainName}\"",
							returnStdout: true
						).trim()

	echo "getCloudFrontDetails are $distributionId"

	return distributionId.split('\t')
}

def updateEnableCompressConfig(env, service, distributionId) {

	try {
		def cf_config = sh (script: "aws cloudfront get-distribution-config --id $distributionId --output json" ,
							returnStdout: true
						).trim()

		echo "cf_config is $cf_config"
		def configParser = new groovy.json.JsonSlurper()
		def cfConfig = configParser.parseText(cf_config)
		if(cfConfig == null) { error "Could not fetch distribution configuration"}

		def _eTag = cfConfig.ETag

		echo "_eTag is $_eTag"
		def updateConfig = 	cfConfig.DistributionConfig
		if(updateConfig == null) { error "Invalid distribution configuration returned"}

		echo "updateConfig $updateConfig"

		if(!updateConfig.DefaultCacheBehavior.SmoothStreaming || !updateConfig.DefaultCacheBehavior.Compress){
			updateConfig.DefaultCacheBehavior.SmoothStreaming = true
			updateConfig.DefaultCacheBehavior.Compress = true

			def updateConfigJson = JsonOutput.toJson(updateConfig)
			try {
				sh "echo '$updateConfigJson' > cf_config.json"
				sh "cat cf_config.json"
			} catch(ex){
				echo "Ignoring the lazy error0 "+ex.getMessage()
			}

			sh "aws cloudfront update-distribution \
					--distribution-config file://cf_config.json \
					--id $distributionId \
					--if-match $_eTag \
					--output json"
		}
	}catch(ex) {
		error "Failed while updateEnableCompressConfig " + ex.toString()
	}
}

def invalidateCloudFrontCache(distributionId, service) {
	try {
		if(distributionId) {

			def callerReference = service+"_"+env.BUILD_ID
			def config = "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$callerReference\"}"

			def invalidateStatus = sh(
						script:"aws cloudfront create-invalidation \
								--distribution-id $distributionId \
								--invalidation-batch '$config' \
								--output json",
								returnStdout: true)

			echo "Invalidated Cloud Front Cache for service $service..:$invalidateStatus"
		}
	} catch(ex) {
		error "Error occured while invalidating the Cloudfron Cache. "+ex.getMessage()
	}
}

def sendEvent(service_name, branch, environment, event_name, event_status, message){
    echo "send event " + event_status + " message::" + message;
}

def loadServiceInfo(service, domain, serviceUrl, endpointKey) {

	setCredentials(g_base_url + '/platform/login')

	def url = "$serviceUrl?domain=$domain&service=$service&isAdmin=true"

	if (endpointKey == 'dev') {
		preserveEnvKey = 'prod'
	}else if (endpointKey == 'prod') {
		preserveEnvKey = 'dev'
	}

	def curlCMDOutput = sh (script: "curl -H \"Content-Type: application/json\" \
			-H \"Authorization: $g_login_token\" \"$url\"", returnStdout: true)
			
	def jsonParser = new groovy.json.JsonSlurper()
	def resultJson = jsonParser.parseText(curlCMDOutput)
	def curlOutputJoin = ''
	if (resultJson != null && resultJson.data != null )
	{
		if( resultJson.data[0].id != null){
			curlOutputJoin = resultJson.data[0].id 
		}
		else{
			curlOutputJoin = curlOutputJoin + "," + ""
		}
		
		if( resultJson.data[0].endpoints != null && resultJson.data[0].endpoints["$preserveEnvKey"] != null){
			curlOutputJoin = curlOutputJoin + "," + resultJson.data[0].endpoints["$preserveEnvKey"]
		}
		else{
			curlOutputJoin = curlOutputJoin + "," + ""
		}
		
		if( resultJson.data[0].created_by != null){
			curlOutputJoin = curlOutputJoin + "," + resultJson.data[0].created_by
		}
		else{
			curlOutputJoin = curlOutputJoin + "," + ""
		}
	
	}

	echo "curlOutputJoin:" + "$curlOutputJoin"
  	def values = curlOutputJoin.split(',')

	if (values[0]) {
		service_id = values[0].replaceAll("[\n\r]", "")
	}

	if (values[1]) {
		preserveEnvValue = values[1].replaceAll("[\n\r]", "")
	}

	if (values[2]) {
		created_by = values[2].replaceAll("[\n\r]", "")
	}
}

def updateServiceWithEndpointInfo(service, domain, serviceUrl, endpointKey, endpointVal) {

	def updateJson = ''

	if(preserveEnvValue) {
		updateJson = "{ \"endpoints\": { \"$endpointKey\" : \"$endpointVal\", \"$preserveEnvKey\": \"$preserveEnvValue\"}, \"status\": \"active\"  }"
	}else {
		updateJson = "{ \"endpoints\": { \"$endpointKey\" : \"$endpointVal\"}, \"status\": \"active\" }"
	}

	echo "new json $updateJson"

	def serviceUpdateUrl = "$serviceUrl/$service_id?isAdmin=true"

	def serviceUpdateOutput = sh (script: "curl --silent -X PUT $serviceUpdateUrl \
		        -H \"accept: application/json\" \
				-H \"Content-Type: application/json\" \
				-H \"Authorization: $g_login_token\"  \
				  -d \'${updateJson}\'", returnStdout:true)

	echo "service update result: $serviceUpdateOutput"
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
 def setCredentials(loginUrl) {

	if (g_login_token == '') {

		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
			echo "user name is $UNAME"

			def login_json = []

			login_json = [
				'username': UNAME,
				'password': PWD
			]

			def payload = JsonOutput.toJson(login_json)                           
			try {
				g_login_token = sh (script: "curl --silent -X POST -k -v \
					-H \"Content-Type: application/json\" \
					 $loginUrl \
					-d \'${payload}\'", returnStdout:true)
            			def jsonParser = new groovy.json.JsonSlurper()
				def resultJson = jsonParser.parseText(g_login_token)
            			echo "Token After : $resultJson"
				g_login_token = resultJson.data.token.replaceAll("[\n\r]", "")
            			return g_login_token
			}
						    
			catch(e){
				echo "error occured: " + e.getMessage()
				error "error occured: " + e.getMessage()
			}
		}
 	}

}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (email_id, build_status, service, email_content) {
   	echo "Sending build notification to " + email_id
   	body = ""
   	bcc_email = ""
   	if (build_status == 'STARTED') {
        body = "Build/deploy process just STARTED for service: " + service
   	} else if (build_status == 'FAILED') {
		build_url = env.BUILD_URL + 'console'
        body = "Build/deploy process FAILED for service: " + service
        body = body + "\n\nFor more details, please click this link: $build_url"
   	} else if (build_status == 'COMPLETED'){
        body = "Build/deploy process COMPLETED successfully for service: $service"
   	} else {
        echo "Unsupported build status, nothing to email.."
        return
   	}

   	if (email_content != ''){
        body = body + "\n\n" + email_content
	}

   	try{
        mail (to: email_id, bcc: bcc_email,
         subject: "Jazz Build Notification: Deployment $build_status for $service ($current_environment)",
         body: body
        );
        echo "Sent email to " + email_id + " successfully!"
   	} catch (e){
       echo "Failed while sending build status notification"
   	}
}