#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.transform.Field

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def events
@Field def serviceMetadataLoader
@Field def utilModule
@Field def environmentDeploymentMetadata

@Field def auth_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'

@Field def service_id = ''
@Field def preserveEnvKey = ''
@Field def preserveEnvValue = ''
@Field def created_by = ''
@Field def environment = ''
@Field def context_map = [:]

node()  {
	def jazzBuildModuleURL = getBuildModuleUrl()
	loadBuildModules(jazzBuildModuleURL)

	def jazz_prod_api_id = utilModule.getAPIIdForCore(configLoader.AWS.API["PROD"])

	g_base_url = "https://${jazz_prod_api_id}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"

	echo "Build Pack website params: " + params

	def branch = params.scm_branch
	def domain = params.domain
	def service = params.service_name
	def repo_name = params.service_name
	def gitCommitOwner
	def gitCommitHash

	if (domain && domain != "") {
		repo_name = params.domain + "_" + params.service_name
	}

	def s3Bucket
	def config

	auth_token = setCredentials()

    stage('Checkout code base') {

		sh 'rm -rf ' + repo_name
		sh 'mkdir ' + repo_name

		dir(repo_name)
		{
			checkout([$class: 'GitSCM', branches: [[name: '*/' + params.scm_branch]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getRepoCloneUrl(repo_name)]]])
		}

		// @TODO: dir can be removed, needs to be refactored
		def configObj = dir(repo_name)
		{
			return LoadConfiguration()
		}

		if (configObj.service_id) {
			config = serviceMetadataLoader.loadServiceMetadata(configObj.service_id)
		} else {
			error "Service Id is not available."
		}

	}

	environmentDeploymentMetadata.initialize(config, configLoader, scmModule, branch, env.BUILD_URL, env.BUILD_ID, g_base_url + "/jazz/environments",auth_token)
	
	def environment_logical_id = environmentDeploymentMetadata.getEnvironmentLogicalId(); 
	if (params.scm_branch == 'master') {
		environment = 'prod'
		s3Bucket = configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	} else {
		if(environment_logical_id) {
			environment = environment_logical_id
		} else {
			error "The environment has not been created yet and its missing the logical Id"
		}		
		s3Bucket = configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
	}

	if (!events) { error "Can't load events module"	} //Fail here
	events.initialize(configLoader, config, "SERVICE_DEPLOYMENT", branch, environment, g_base_url + "/jazz/events")

	def create_cloudfront_url
	context_map = [created_by : config['created_by']]
	scmModule.setServiceConfig(config)
	gitCommitHash = scmModule.getRepoCommitHash()
	gitCommitOwner = scmModule.getRepoCommitterInfo(gitCommitHash)

	def requestId = utilModule.generateRequestId()
	if (requestId != null) {
		events.setRequestId(requestId)
		environmentDeploymentMetadata.setRequestId(requestId)
	} else {
		error "Request Id Generation failed"
	}

	dir(repo_name)
	{
		events.sendStartedEvent('CREATE_DEPLOYMENT', 'Website deployment started', environmentDeploymentMetadata.generateDeploymentMap("started", environment, , gitCommitHash), environment)
		stage('Pre-Build Validation'){

			events.sendStartedEvent("VALIDATE_INPUT", 'pre-build validation starts', context_map)
			try {
				service = config['service']
				domain = config['domain']

				if (domain != '' && domain != null) {
					service = domain + '-' + service
				}

				create_cloudfront_url = true

				if (config['create_cloudfront_url'] == true || config['create_cloudfront_url'] == "true") {
					create_cloudfront_url = true
				}

				echo "create_cloudfront_url====" + create_cloudfront_url

				send_status_email('STARTED', config, '')

				validateTemplate()
				validateDeploymentConfigurations(config)
			} catch (ex) {
				send_status_email('FAILED', config, '')
				events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage(), context_map)
				events.sendFailureEvent('UPDATE_DEPLOYMENT',  ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment, gitCommitHash), environment)
				error ex.getMessage()
			}
			events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', 'pre-build validation completed', context_map)
		}

		def s3StgBucket  = configLoader.JAZZ.S3.WEBSITE_STG_BUCKET;
		def s3ProdBucket = configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
		def s3DevBucket  = configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;

		stage("Deployment to ${environment} Env"){
				events.sendStartedEvent("DEPLOY_TO_AWS", 'deployment starts', context_map)
				events.sendStartedEvent('UPDATE_ENVIRONMENT', 'Environment  status update event  for ${environment} deployment', environmentDeploymentMetadata.generateEnvironmentMap("deployment_started", environment), environment)
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: configLoader.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
					echo "AWS Configure ......."

					sh "aws configure set profile.cloud-api.region ${configLoader.AWS.REGION}"
					sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
					sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
					sh "aws configure set preview.cloudfront true"

					def assetInfo = "S3 Folder - /${s3Bucket}/${service}/${environment}"
					try {
						try {
							echo "Checking if the website already exists.."
							sh "aws s3 ls s3://${s3Bucket}/${service}/${environment}"
						} catch (ex) {
							error ex.getMessage()
						}
						events.sendStartedEvent("UPDATE_ASSET", 'update assets starts', context_map)
						try {
							echo "website with name $service already exists, syncing new files"
							sh "aws s3 sync ./app s3://${s3Bucket}/${service}/${environment}  --exclude \".git/*\" --exclude \".gitignore\" --exclude \"*.svg\""
							sh "aws s3 sync ./app s3://${s3Bucket}/${service}/${environment}  --exclude \"*\" --include \"*.svg\" --no-guess-mime-type --content-type image/svg+xml"
							

							def url = 'n/a'
							if (create_cloudfront_url == true) {
								loadBucketPolicy(service, s3Bucket, true)

								def cfDetails = getCloudFrontDetails(environment, service)

								if (cfDetails) {
									echo "id is ${cfDetails[0]}, domain: ${cfDetails[1]}"
								}

								updateEnableCompressConfig(environment, service, cfDetails[0])

								invalidateCloudFrontCache(cfDetails[0], service)

								if (cfDetails[1]) {
									url = "http://" + cfDetails[1].replaceAll("[\n\r]", "")
								}
							} else {
								loadBucketPolicy(service, s3Bucket, false)
								url = "https://s3.amazonaws.com/${s3Bucket}/${service}/${environment}/index.html"
							}							

							def svc_status = "You can access your website using following link: ${url}"
							echo svc_status
							environmentDeploymentMetadata.setEnvironmentEndpoint(url)
							send_status_email('COMPLETED', config, svc_status)
							events.sendCompletedEvent('UPDATE_ASSET', 'update assets completed', context_map)
							events.sendCompletedEvent('UPDATE_DEPLOYMENT',  'Deployment completion Event for $environment deployment',  environmentDeploymentMetadata.generateDeploymentMap("successful",  environment, gitCommitHash), environment)
							events.sendCompletedEvent('UPDATE_ENVIRONMENT', 'Environment Update event for deployment completion', environmentDeploymentMetadata.generateEnvironmentMap("deployment_completed",   environment), environment)
							events.sendCompletedEvent('DEPLOY_TO_AWS', 'deployment completed', context_map)
						} catch (ex) {
							send_status_email('FAILED', config, '')
							events.sendFailureEvent('UPDATE_ASSET', ex.getMessage(), context_map)
							events.sendFailureEvent('UPDATE_DEPLOYMENT',  ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment, gitCommitHash), environment)
							events.sendFailureEvent('UPDATE_ENVIRONMENT', ex.getMessage(), environmentDeploymentMetadata.generateEnvironmentMap("deployment_failed", environment), environment)
							events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map)
						}
					}
					catch (error) {
						echo "uploading a new website with name $service"
						events.sendStartedEvent("CREATE_ASSET", 'create assets starts', context_map)
						try {
							sh "aws s3 sync ./app s3://${s3Bucket}/$service/${environment}  --exclude \".git/*\" --exclude \".gitignore\" --exclude \"*.svg\""
							sh "aws s3 sync ./app s3://${s3Bucket}/$service/${environment}  --exclude \"*\" --include \"*.svg\" --no-guess-mime-type --content-type image/svg+xml"

							def url = 'n/a'
							if (create_cloudfront_url == true) {
								loadDistributionConfig()
								generateDistributionConfig( environment, config)
								sh "aws cloudfront create-distribution-with-tags --distribution-config-with-tags --output json file://distribution_config_with_tags.json"

								loadBucketPolicy(service, s3Bucket, true)
								url = sh(script: "aws  cloudfront list-distributions --output text --query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-${environment}-static-website-origin-$service']].DomainName\"", returnStdout: true)
								url = 'http://' + url.replaceAll("[\n\r]", "")

							} else {
								loadBucketPolicy(service, s3Bucket, false)
								url = "https://s3.amazonaws.com/${s3Bucket}/${service}/${environment}/index.html"
							}

							def svc_status = "You can access your website using following link: ${url}"

							echo svc_status
							environmentDeploymentMetadata.setEnvironmentEndpoint(url)
							send_status_email('COMPLETED', config, svc_status)
							events.sendCompletedEvent('CREATE_ASSET', 'create assets completed', context_map)
							events.sendCompletedEvent('UPDATE_DEPLOYMENT',  'Deployment completion Event for stage deployment',  environmentDeploymentMetadata.generateDeploymentMap("successful",  environment, gitCommitHash), environment)
							events.sendCompletedEvent('UPDATE_ENVIRONMENT', 'Environment Update event for deployment completion', environmentDeploymentMetadata.generateEnvironmentMap("deployment_completed",   environment), environment)
							events.sendCompletedEvent('DEPLOY_TO_AWS', 'deployment completed', context_map)
						} catch (ex) {
							send_status_email('FAILED', config, '')
							events.sendFailureEvent('CREATE_ASSET', ex.getMessage(), context_map)
							events.sendFailureEvent('UPDATE_DEPLOYMENT',  ex.getMessage(), environmentDeploymentMetadata.generateDeploymentMap("failed", environment, gitCommitHash), environment)
							events.sendFailureEvent('UPDATE_ENVIRONMENT', ex.getMessage(), environmentDeploymentMetadata.generateEnvironmentMap("deployment_failed", environment), environment)
							events.sendFailureEvent('DEPLOY_TO_AWS', ex.getMessage(), context_map)
						}
					}
					// reset Credentials
					resetCredentials()
				}
		}
	}
}

def getS3BucketName(String envname) {

	if (envname == "dev") {
		return configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
	} else if (envname == "stg") {
		return configLoader.JAZZ.S3.WEBSITE_STG_BUCKET;
	} else if (envname == "prod") {
		return configLoader.JAZZ.S3.WEBSITE_PROD_BUCKET;
	}

	return configLoader.JAZZ.S3.WEBSITE_DEV_BUCKET;
}

def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if (i.toLowerCase().startsWith("#")) {
		} else {
			cleanedList.add(i)
		}
    }

	for (item in cleanedList) {
		def eachItemList = item.tokenize(":")
		//handle empty values
		def value = "";
		if (eachItemList[1]) {
			value = eachItemList[1].trim();
		}

		if (eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}
	}

	echo "Loaded configurations...$prop"
	return prop
}


/**
	Reset credentials
*/
def resetCredentials() {
	echo "resetting AWS credentials"
	sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
	sh "aws configure set profile.cloud-api.aws_secret_access_key XXXXXXXXXXXXXXXXXXXXXX"
}

/**
	Generate the distribution config file
*/
def generateDistributionConfig(envname, config) {
	sh "sed -i -- 's/{service_name}/${config['domain']}-${config['service']}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{env}/${envname}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{conf_s3bucketname}/${getS3BucketName(envname)}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{conf_stack_prefix}/${configLoader.INSTANCE_PREFIX}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's:{conf_origin_id}:${configLoader.AWS.CLOUDFRONT_ORIGIN_ID}:g' distribution_config_with_tags.json"

	sh "sed -i -- 's/{owner}/${config['created_by']}/g' distribution_config_with_tags.json"
	sh "sed -i -- 's/{domain_name}/${config['domain']}/g' distribution_config_with_tags.json"
	def distribution_config_with_tags = readFile('distribution_config_with_tags.json').trim()
	echo(distribution_config_with_tags)
}



/**
	Validate basic configurations in the deployment yaml file and error if any keys are
	missing.
*/
def validateDeploymentConfigurations(def prop) {

	if (prop.containsKey("service")) {
		if (prop['service'] == "") {
			error "Wrong configuration. Value for Key 'service' is missing in the configuration"
		}

	} else {
		error "Wrong configuration. Key 'service' is missing in the configuration"
	}
}


/**
	Validate template for all necessary files. Ex: index.html
*/
def validateTemplate() {
	if (fileExists('app/index.html')) {

		echo "index.html is present"
	}
	else {
		error "index.html is not available."
	}

	if (fileExists('deployment-env.yml')) {

		echo "deployment-env.yml is present"
	}
	else {
		error "deployment-env.yml is not available."
	}

}

def loadDistributionConfig() {

	checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url:  scmModule.getCoreRepoCloneUrl("website-distribution-pack")]]])

}

def loadBucketPolicy(String service, String s3Bucket, Boolean create_cloudfront_url){
	def policySpec = '{"Version":"2012-10-17","Id":"Policy For ","Statement":[]}'
	def policyObj 
	
	try {
		def policyJson = sh(returnStdout: true, script: "aws s3api get-bucket-policy --bucket $s3Bucket --query Policy --output text")
		echo "policyJson: $policyJson"
		policyObj = jsonParse(policyJson)
		echo "loadBucketPolicy readFile: $policyObj"
	} catch (ex) {
		echo "Bucket policy doesn't exists yet."
		policyObj = jsonParse(policySpec)
		policyObj.Id += "$s3Bucket"
	}
	if (policyObj) {
		updateS3BucketPolicy(service, s3Bucket, create_cloudfront_url, policyObj)
	}
}

def loadIPList() {

	dir('_jenkins_buildpack') {

		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getCoreRepoCloneUrl("jenkins-build-pack-website")]]])
	}
}
/*
*	add restrictions so that Cloudfront endpoint can access S3
*/
def updateS3BucketPolicy(service, s3Bucket, isCloudfront, existingPolicyObj){
	echo "updateS3BucketPolicy"
	try {
		def policy_filedata
		def new_policy
		def stmtS3 = '{"Sid":"","Effect":"Allow","Principal":{"AWS":"*"},"Action":"s3:GetObject","Resource":"arn:aws:s3:::","Condition":{"IpAddress":{"aws:SourceIp":[]}}}'
		def stmtCf = '{"Sid":"","Effect":"Allow","Principal":{"AWS":""},"Action":"s3:GetObject","Resource":"arn:aws:s3:::"}'
		def stmtCfList = '{"Sid":"ListBucket","Effect":"Allow","Principal":"*","Action":"s3:ListBucket","Resource":"arn:aws:s3:::"}'
		def cleanupIndex = -1

		def bucketPolicy = existingPolicyObj
		def statements = bucketPolicy.Statement

		def CFOAI = sh(
			script: "aws cloudfront list-cloud-front-origin-access-identities --output text \
			--query \"CloudFrontOriginAccessIdentityList.Items[?Comment=='${configLoader.INSTANCE_PREFIX}-origin_access_identity'].{j: Id}\"",
			returnStdout: true
		).trim()

		for (st in statements) {
			cleanupIndex++
			if (st['Sid'] == "$service") {
				echo "cleanupIndex...$cleanupIndex"
				bucketPolicy.Statement[cleanupIndex] = null
			} else if (st['Sid'] == "ListBucket") {
				bucketPolicy.Statement[cleanupIndex] = null
			}
		}
		bucketPolicy.Statement.removeAll([null])

		//add restrictions so that Cloudfront endpoint can access S3
		if (isCloudfront) {
			echo "isCloudfront: $isCloudfront"
			def principal = ["AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity $CFOAI"]
			new_policy = jsonParse(stmtCf)
			new_policy.put('Sid', "$service")
			new_policy.put('Principal', principal)
			new_policy.put('Resource', "arn:aws:s3:::$s3Bucket/$service/*")
			bucketPolicy.Statement << new_policy

			//add new list policy statement 
			def listPolicyObject = jsonParse(stmtCfList)
			listPolicyObject.put('Principal', principal)
			listPolicyObject.put('Resource', "arn:aws:s3:::$s3Bucket")
			bucketPolicy.Statement << listPolicyObject
		} else {
			echo "isCloudfront: $isCloudfront"
			def principal = "*"
			new_policy = jsonParse(stmtS3)
			new_policy.put('Sid', "$service")
			new_policy.put('Principal', principal)
			new_policy.put('Resource', "arn:aws:s3:::$s3Bucket/$service/*")
			bucketPolicy.Statement << new_policy
		}

		echo "updated PolicyStatement : $statements"

		policy_filedata = JsonOutput.prettyPrint(JsonOutput.toJson(bucketPolicy))

		def putPolicyResponse = sh(returnStdout: true, script: "aws s3api put-bucket-policy --output json --bucket $s3Bucket --policy \'${policy_filedata}\'")

	} catch (ex) {
		echo "Bucket policy update failed. "+ ex.getMessage()
		error "Bucket policy update failed. "+ ex.getMessage()
	}
}

def getCloudFrontDetails(env, service) {
	try {
		def distributionId = sh(script: "aws  cloudfront list-distributions --output text \
										--query \"DistributionList.Items[?Origins.Items[?Id=='${configLoader.INSTANCE_PREFIX}-${env}-static-website-origin-$service']].{j: Id, k: DomainName}\"",
			returnStdout: true
		).trim()
		echo "getCloudFrontDetails are $distributionId"
		return distributionId.split('\t')
	}
	catch (ex) {
		echo "Failed to get DistributionConfig::::  " + ex.toString()
	}
}

def updateEnableCompressConfig(env, service, distributionId) {

	try {
		def cf_config = sh(script: "aws cloudfront get-distribution-config --id $distributionId --output json",
			returnStdout: true
		).trim()

		echo "cf_config is $cf_config"
		def configParser = new groovy.json.JsonSlurper()
		def cfConfig = configParser.parseText(cf_config)
		if (cfConfig == null) { error "Could not fetch distribution configuration"}

		def _eTag = cfConfig.ETag

		echo "_eTag is $_eTag"
		def updateConfig = cfConfig.DistributionConfig
		if (updateConfig == null) { error "Invalid distribution configuration returned"}

		echo "updateConfig $updateConfig"

		if (!updateConfig.DefaultCacheBehavior.SmoothStreaming || !updateConfig.DefaultCacheBehavior.Compress) {
			updateConfig.DefaultCacheBehavior.SmoothStreaming = true
			updateConfig.DefaultCacheBehavior.Compress = true

			def updateConfigJson = JsonOutput.toJson(updateConfig)
			try {
				sh "echo '$updateConfigJson' > cf_config.json"
				sh "cat cf_config.json"
			} catch (ex) {
				echo "Ignoring the lazy error0 "+ ex.getMessage()
			}

			sh "aws cloudfront update-distribution \
					--distribution-config file://cf_config.json \
					--id $distributionId \
					--if-match $_eTag \
					--output json"
		}
	} catch (ex) {
		error "Failed while updateEnableCompressConfig " + ex.toString()
	}
}

def invalidateCloudFrontCache(distributionId, service) {
	try {
		if (distributionId) {

			def callerReference = service + "_" + env.BUILD_ID
			def config = "{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"$callerReference\"}"

			def invalidateStatus = sh(
				script:"aws cloudfront create-invalidation \
								--distribution-id $distributionId \
								--invalidation-batch '$config' \
								--output json",
				returnStdout: true)

			echo "Invalidated Cloud Front Cache for service $service..:$invalidateStatus"
		}
	} catch (ex) {
		error "Error occured while invalidating the Cloudfron Cache. "+ ex.getMessage()
	}
}

/**
 * For getting token to access catalog APIs.
 * Must be a service account which has access to all services
 */
def setCredentials() {
	def loginUrl = g_base_url + '/jazz/login'

	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: g_svc_admin_cred_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "user name is $UNAME"

		def login_json = []

		login_json = [
			'username': UNAME,
			'password': PWD
		]
		def tokenJson_token = null
		def payload = JsonOutput.toJson(login_json)

		try {
			def token = sh(script: "curl --silent -X POST -k -v \
				-H \"Content-Type: application/json\" \
					$loginUrl \
				-d \'${payload}\'", returnStdout:true).trim()

			def tokenJson = jsonParse(token)
			tokenJson_token = tokenJson.data.token

			return tokenJson_token
		}
		catch (e) {
			echo "error occured: " + e.getMessage()
			error "error occured: " + e.getMessage()
		}
	}
}

/**
* Send email to the recipient with the build status and any additional text content
* Supported build status values = STARTED, FAILED & COMPLETED
* @return
*/
def send_status_email (build_status, config, email_content) {
   	echo "Sending build notification to ${config['created_by']}"
	def body_subject = ''
	def body_text = ''
	def cc_email = ''
	def body_html = ''
   	if (build_status == 'STARTED') {
		echo "email status started"
		body_subject = "Jazz Build Notification: Deployment STARTED for service: ${config['service']}"
   	} else if (build_status == 'FAILED') {
		echo "email status failed"
		def build_url = env.BUILD_URL + 'console'
		body_subject = "Jazz Build Notification: Deployment FAILED for service: ${config['service']}"
		body_text = body_text + '\n\nFor more details, please click this link: ' + build_url
   	} else if (build_status == 'COMPLETED') {
		body_subject = "Jazz Build Notification: Deployment COMPLETED successfully for service: ${config['service']}"
   	} else {
		echo "Unsupported build status, nothing to email.."
		return
   	}
   	if (email_content != '') {
		body_text = body_text + '\n\n' + email_content
	}
	def fromStr = 'Jazz Admin <' + configLoader.JAZZ.ADMIN + '>'
	body = JsonOutput.toJson([
		from : fromStr,
		to : config['created_by'],
		subject : body_subject,
		text : body_text,
		cc : cc_email,
		html : body_html
	])

   	try {
		def sendMail = sh(script: "curl -X POST \
						${g_base_url}/jazz/email \
						-k -v -H \"Authorization: $auth_token\" \
						-H \"Content-Type: application/json\" \
						-d \'${body}\'", returnStdout: true).trim()
		def responseJSON = parseJson(sendMail)
		if (responseJSON.data) {
			echo "successfully sent e-mail to ${config['created_by']}"
		} else {
			echo "exception occured while sending e-mail: $responseJSON"
		}
   	} catch (e) {
       	echo "Failed while sending build status notification  " + e.toString()
   	}
}


/*
* Load environment variables from build module
*/

def loadBuildModules(buildModuleUrl){ 

	dir('build_modules') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
		echo "config loader loaded successfully."
		
		scmModule = load "scm-module.groovy"
		scmModule.initialize(configLoader)
		echo "SCM module loaded successfully."
		
		events = load "events-module.groovy"
		echo "Event module loaded successfully."

		serviceMetadataLoader = load "service-metadata-loader.groovy"
		serviceMetadataLoader.initialize(configLoader)
		echo "Service metadata loader module loaded successfully."
    
		utilModule = load "utility-loader.groovy"

		environmentDeploymentMetadata = load "environment-deployment-metadata-loader.groovy"		

	}
}

/**
 * Non-lazy JSON parser
 */
@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}


def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
		// right now only bitbucket has this additional tag scm in its git clone path
		return "http://${repo_base}/${repo_core}/jazz-build-module.git"
    } else {
		return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    }
}

@NonCPS
def jsonParse(jsonString) {
    def nonLazyMap = new groovy.json.JsonSlurperClassic().parseText(jsonString)
    return nonLazyMap
}
