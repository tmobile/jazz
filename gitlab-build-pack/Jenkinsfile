#!groovy.
import groovy.json.JsonOutput
import groovy.transform.Field
import groovy.json.JsonSlurper
/*
* Module that handles managing gitlab webhooks and routes them to respective build packs
*/

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule
@Field def serviceMetadataLoader


node  {

    def jazzBuildModuleURL = getBuildModuleUrl()
    loadBuildModule(jazzBuildModuleURL)

    def gitlab_repo_name = env.gitlabSourceRepoName
    def config
    def build_job

    try {
        sh 'rm -rf $gitlab_repo_name*'
        def repocloneUrl = getRepoCloneUrl()
        echo "repocloneUrl : $repocloneUrl"
        dir(gitlab_repo_name){
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: repocloneUrl]]])
            config = getServiceConfiguration()
        }
        sh 'rm -rf $gitlab_repo_name*'
    }
    catch (ex) {
        error "Error inside gitlab-buildpack ... " + ex.getMessage()
    }

    //Get the Build URL
    if (config['type'] == 'api') {
        build_job = configLoader.JENKINS.BUILD_URI.API
    } else if (config['type'] == 'website') {
        build_job = configLoader.JENKINS.BUILD_URI.WEBSITE
    } else if (config['type'] == 'lambda' || config['type'] == 'function') {
        build_job = configLoader.JENKINS.BUILD_URI.LAMBDA
    }

    build job: "${build_job}", parameters: [string(name: 'service_name', value: "${config['service']}"), string(name: 'domain', value: "${config['domain']}"), string(name: 'scm_branch', value: "${env.gitlabBranch}")], wait: false

}

/**
	Reads deployment-env.yml.
    Returns Property Map
*/
def getServiceConfiguration() {
    def prop = [: ]
    if (fileExists('deployment-env.yml')) {
        echo "Reading from deployment.yml file "
        def result = readFile('deployment-env.yml').trim()

        def resultList = result.tokenize("\n")

        // delete commented lines
        def cleanedList = []
        for (i in resultList) {
            if (!i.toLowerCase().startsWith("#")) {
                cleanedList.add(i)
            }
        }//for

        for (item in cleanedList) {
            // Clean up to avoid issues with more ":" in the values
            item = item.replaceAll(" ", "").replaceFirst(":", "#");
            def eachItemList = item.tokenize("#")
            //handle empty values
            def value = "";
            if (eachItemList[1]) {
                value = eachItemList[1].trim();
            }

            if (eachItemList[0]) {
                prop.put(eachItemList[0].trim(), value)
            }
        }

        if (prop.service_id) {
            def serviceData = serviceMetadataLoader.loadServiceMetadata(prop.service_id)
            return serviceData
        } else {
            error "Service Id is not available."
        }
    }

}

/*
* Load build module
*/
def loadBuildModule(buildModuleUrl){

    dir('build_modules') {
        checkout([$class: 'GitSCM', branches: [
            [name: '*/master']
        ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
                [credentialsId: repo_credential_id, url: buildModuleUrl]
            ]])

        def resultJsonString = readFile("jazz-installer-vars.json")
        configModule = load "config-loader.groovy"
        configLoader = configModule.initialize(resultJsonString)
        echo "config loader loaded successfully."

        scmModule = load "scm-module.groovy"
        scmModule.initialize(configLoader)
        echo "SCM module loaded successfully."

        serviceMetadataLoader = load "service-metadata-loader.groovy"
        serviceMetadataLoader.initialize(configLoader)
        echo "Service metadata loader module loaded successfully."

    }
}


def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
        // right now only bitbucket has this additional tag scm in its git clone path
        return "http://${repo_base}/${repo_core}/jazz-build-module.git"
    } else {
        return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    }
}

def getRepoCloneUrl(){
    def srcUrl = env.gitlabSourceRepoURL.tokenize(':')
    return "http://${repo_base}/${srcUrl[1]}"

}
